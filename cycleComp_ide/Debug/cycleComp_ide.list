
cycleComp_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007140  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019e8  08007250  08007250  00017250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c38  08008c38  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08008c38  08008c38  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c38  08008c38  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c38  08008c38  00018c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c3c  08008c3c  00018c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  200001f4  08008e34  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000854  08008e34  00020854  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a821  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f07  00000000  00000000  0002aa3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0002c948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a80  00000000  00000000  0002d478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018682  00000000  00000000  0002def8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d793  00000000  00000000  0004657a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000864d7  00000000  00000000  00053d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da1e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040f8  00000000  00000000  000da234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007238 	.word	0x08007238

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08007238 	.word	0x08007238

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_d2iz>:
 8000a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a28:	d215      	bcs.n	8000a56 <__aeabi_d2iz+0x36>
 8000a2a:	d511      	bpl.n	8000a50 <__aeabi_d2iz+0x30>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d912      	bls.n	8000a5c <__aeabi_d2iz+0x3c>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	bf18      	it	ne
 8000a4c:	4240      	negne	r0, r0
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_d2iz+0x48>
 8000a5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	bf08      	it	eq
 8000a62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_d2uiz>:
 8000a70:	004a      	lsls	r2, r1, #1
 8000a72:	d211      	bcs.n	8000a98 <__aeabi_d2uiz+0x28>
 8000a74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a78:	d211      	bcs.n	8000a9e <__aeabi_d2uiz+0x2e>
 8000a7a:	d50d      	bpl.n	8000a98 <__aeabi_d2uiz+0x28>
 8000a7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a84:	d40e      	bmi.n	8000aa4 <__aeabi_d2uiz+0x34>
 8000a86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_d2uiz+0x3a>
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2lz>:
 8000ab0:	b538      	push	{r3, r4, r5, lr}
 8000ab2:	4605      	mov	r5, r0
 8000ab4:	460c      	mov	r4, r1
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2300      	movs	r3, #0
 8000aba:	4628      	mov	r0, r5
 8000abc:	4621      	mov	r1, r4
 8000abe:	f7ff ff87 	bl	80009d0 <__aeabi_dcmplt>
 8000ac2:	b928      	cbnz	r0, 8000ad0 <__aeabi_d2lz+0x20>
 8000ac4:	4628      	mov	r0, r5
 8000ac6:	4621      	mov	r1, r4
 8000ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000acc:	f000 b80a 	b.w	8000ae4 <__aeabi_d2ulz>
 8000ad0:	4628      	mov	r0, r5
 8000ad2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000ad6:	f000 f805 	bl	8000ae4 <__aeabi_d2ulz>
 8000ada:	4240      	negs	r0, r0
 8000adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae0:	bd38      	pop	{r3, r4, r5, pc}
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2ulz>:
 8000ae4:	b5d0      	push	{r4, r6, r7, lr}
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <__aeabi_d2ulz+0x34>)
 8000aea:	4606      	mov	r6, r0
 8000aec:	460f      	mov	r7, r1
 8000aee:	f7ff fcfd 	bl	80004ec <__aeabi_dmul>
 8000af2:	f7ff ffbd 	bl	8000a70 <__aeabi_d2uiz>
 8000af6:	4604      	mov	r4, r0
 8000af8:	f7ff fc7e 	bl	80003f8 <__aeabi_ui2d>
 8000afc:	2200      	movs	r2, #0
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <__aeabi_d2ulz+0x38>)
 8000b00:	f7ff fcf4 	bl	80004ec <__aeabi_dmul>
 8000b04:	4602      	mov	r2, r0
 8000b06:	460b      	mov	r3, r1
 8000b08:	4630      	mov	r0, r6
 8000b0a:	4639      	mov	r1, r7
 8000b0c:	f7ff fb36 	bl	800017c <__aeabi_dsub>
 8000b10:	f7ff ffae 	bl	8000a70 <__aeabi_d2uiz>
 8000b14:	4621      	mov	r1, r4
 8000b16:	bdd0      	pop	{r4, r6, r7, pc}
 8000b18:	3df00000 	.word	0x3df00000
 8000b1c:	41f00000 	.word	0x41f00000

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b24:	f001 f8e0 	bl	8001ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b28:	f000 f8e8 	bl	8000cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2c:	f000 f982 	bl	8000e34 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b30:	f000 f928 	bl	8000d84 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b34:	f000 f954 	bl	8000de0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();  // initialise
 8000b38:	f000 fba6 	bl	8001288 <SSD1306_Init>

  /// lets print some string

  SSD1306_GotoXY (0,0);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 fd0a 	bl	8001558 <SSD1306_GotoXY>
  SSD1306_Puts ("SPD : ", &Font_11x18, 1);
 8000b44:	2201      	movs	r2, #1
 8000b46:	495e      	ldr	r1, [pc, #376]	; (8000cc0 <main+0x1a0>)
 8000b48:	485e      	ldr	r0, [pc, #376]	; (8000cc4 <main+0x1a4>)
 8000b4a:	f000 fd9b 	bl	8001684 <SSD1306_Puts>
  SSD1306_GotoXY (0, 17);
 8000b4e:	2111      	movs	r1, #17
 8000b50:	2000      	movs	r0, #0
 8000b52:	f000 fd01 	bl	8001558 <SSD1306_GotoXY>
  SSD1306_Puts ("LAT: ", &Font_7x10, 1);
 8000b56:	2201      	movs	r2, #1
 8000b58:	495b      	ldr	r1, [pc, #364]	; (8000cc8 <main+0x1a8>)
 8000b5a:	485c      	ldr	r0, [pc, #368]	; (8000ccc <main+0x1ac>)
 8000b5c:	f000 fd92 	bl	8001684 <SSD1306_Puts>
  SSD1306_GotoXY (0, 27);
 8000b60:	211b      	movs	r1, #27
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 fcf8 	bl	8001558 <SSD1306_GotoXY>
  SSD1306_Puts ("LONG: ", &Font_7x10, 1);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4957      	ldr	r1, [pc, #348]	; (8000cc8 <main+0x1a8>)
 8000b6c:	4858      	ldr	r0, [pc, #352]	; (8000cd0 <main+0x1b0>)
 8000b6e:	f000 fd89 	bl	8001684 <SSD1306_Puts>
  SSD1306_GotoXY (0, 37);
 8000b72:	2125      	movs	r1, #37	; 0x25
 8000b74:	2000      	movs	r0, #0
 8000b76:	f000 fcef 	bl	8001558 <SSD1306_GotoXY>
  SSD1306_Puts ("SAT : ", &Font_7x10, 1);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4952      	ldr	r1, [pc, #328]	; (8000cc8 <main+0x1a8>)
 8000b7e:	4855      	ldr	r0, [pc, #340]	; (8000cd4 <main+0x1b4>)
 8000b80:	f000 fd80 	bl	8001684 <SSD1306_Puts>
  SSD1306_UpdateScreen(); //display
 8000b84:	f000 fc44 	bl	8001410 <SSD1306_UpdateScreen>
  /* USER CODE END 2 */

  nmea_mem_init(&gpsData);
 8000b88:	4853      	ldr	r0, [pc, #332]	; (8000cd8 <main+0x1b8>)
 8000b8a:	f000 f9b0 	bl	8000eee <nmea_mem_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(updateFlag != 0)
 8000b8e:	4b53      	ldr	r3, [pc, #332]	; (8000cdc <main+0x1bc>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d05d      	beq.n	8000c52 <main+0x132>
	  {
		  updateFlag = 0;
 8000b96:	4b51      	ldr	r3, [pc, #324]	; (8000cdc <main+0x1bc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
		  SSD1306_GotoXY (60,0);
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	203c      	movs	r0, #60	; 0x3c
 8000ba0:	f000 fcda 	bl	8001558 <SSD1306_GotoXY>
		  SSD1306_Puts (gpsData.speed, &Font_11x18, 1);
 8000ba4:	4b4c      	ldr	r3, [pc, #304]	; (8000cd8 <main+0x1b8>)
 8000ba6:	69db      	ldr	r3, [r3, #28]
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4945      	ldr	r1, [pc, #276]	; (8000cc0 <main+0x1a0>)
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fd69 	bl	8001684 <SSD1306_Puts>
		  SSD1306_GotoXY (34,17);
 8000bb2:	2111      	movs	r1, #17
 8000bb4:	2022      	movs	r0, #34	; 0x22
 8000bb6:	f000 fccf 	bl	8001558 <SSD1306_GotoXY>
		  SSD1306_Puts (gpsData.lat, &Font_7x10, 1);
 8000bba:	4b47      	ldr	r3, [pc, #284]	; (8000cd8 <main+0x1b8>)
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4941      	ldr	r1, [pc, #260]	; (8000cc8 <main+0x1a8>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 fd5e 	bl	8001684 <SSD1306_Puts>
		  SSD1306_GotoXY (115,17);
 8000bc8:	2111      	movs	r1, #17
 8000bca:	2073      	movs	r0, #115	; 0x73
 8000bcc:	f000 fcc4 	bl	8001558 <SSD1306_GotoXY>
		  SSD1306_Puts (gpsData.latDir, &Font_7x10, 1);
 8000bd0:	4b41      	ldr	r3, [pc, #260]	; (8000cd8 <main+0x1b8>)
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	493c      	ldr	r1, [pc, #240]	; (8000cc8 <main+0x1a8>)
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fd53 	bl	8001684 <SSD1306_Puts>
		  SSD1306_GotoXY (34,27);
 8000bde:	211b      	movs	r1, #27
 8000be0:	2022      	movs	r0, #34	; 0x22
 8000be2:	f000 fcb9 	bl	8001558 <SSD1306_GotoXY>
		  SSD1306_Puts (gpsData.lon, &Font_7x10, 1);
 8000be6:	4b3c      	ldr	r3, [pc, #240]	; (8000cd8 <main+0x1b8>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	2201      	movs	r2, #1
 8000bec:	4936      	ldr	r1, [pc, #216]	; (8000cc8 <main+0x1a8>)
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fd48 	bl	8001684 <SSD1306_Puts>
		  SSD1306_GotoXY (115,27);
 8000bf4:	211b      	movs	r1, #27
 8000bf6:	2073      	movs	r0, #115	; 0x73
 8000bf8:	f000 fcae 	bl	8001558 <SSD1306_GotoXY>
		  SSD1306_Puts (gpsData.lonDir, &Font_7x10, 1);
 8000bfc:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <main+0x1b8>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	2201      	movs	r2, #1
 8000c02:	4931      	ldr	r1, [pc, #196]	; (8000cc8 <main+0x1a8>)
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fd3d 	bl	8001684 <SSD1306_Puts>
		  SSD1306_GotoXY (35,37); //66
 8000c0a:	2125      	movs	r1, #37	; 0x25
 8000c0c:	2023      	movs	r0, #35	; 0x23
 8000c0e:	f000 fca3 	bl	8001558 <SSD1306_GotoXY>
		  SSD1306_Puts (gpsData.validStatus, &Font_7x10, 1);
 8000c12:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <main+0x1b8>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	2201      	movs	r2, #1
 8000c18:	492b      	ldr	r1, [pc, #172]	; (8000cc8 <main+0x1a8>)
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fd32 	bl	8001684 <SSD1306_Puts>
		  SSD1306_GotoXY (0,47);
 8000c20:	212f      	movs	r1, #47	; 0x2f
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 fc98 	bl	8001558 <SSD1306_GotoXY>
		  SSD1306_Puts (gpsData.utcTime, &Font_7x10, 1);
 8000c28:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <main+0x1b8>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4926      	ldr	r1, [pc, #152]	; (8000cc8 <main+0x1a8>)
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 fd27 	bl	8001684 <SSD1306_Puts>
		  SSD1306_GotoXY (70,47);
 8000c36:	212f      	movs	r1, #47	; 0x2f
 8000c38:	2046      	movs	r0, #70	; 0x46
 8000c3a:	f000 fc8d 	bl	8001558 <SSD1306_GotoXY>
		  SSD1306_Puts (gpsData.utcDate, &Font_7x10, 1);
 8000c3e:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <main+0x1b8>)
 8000c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c42:	2201      	movs	r2, #1
 8000c44:	4920      	ldr	r1, [pc, #128]	; (8000cc8 <main+0x1a8>)
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 fd1c 	bl	8001684 <SSD1306_Puts>
		  SSD1306_UpdateScreen(); //display
 8000c4c:	f000 fbe0 	bl	8001410 <SSD1306_UpdateScreen>
 8000c50:	e79d      	b.n	8000b8e <main+0x6e>
		  free(gpsData.lonDir);
		  free(gpsData.speed);
		  free(gpsData.course);*/
		  //HAL_UART_Receive_IT( &huart1, &rxData, 1);
	  }
	  else if((rxIntCheck == 1) && (seqCheck != 6))
 8000c52:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <main+0x1c0>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d10c      	bne.n	8000c74 <main+0x154>
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <main+0x1c4>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d008      	beq.n	8000c74 <main+0x154>
	  {
		  rxIntCheck = 0;
 8000c62:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <main+0x1c0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_IT( &huart1, &rxData, 1);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	491f      	ldr	r1, [pc, #124]	; (8000ce8 <main+0x1c8>)
 8000c6c:	481f      	ldr	r0, [pc, #124]	; (8000cec <main+0x1cc>)
 8000c6e:	f002 fdd6 	bl	800381e <HAL_UART_Receive_IT>
 8000c72:	e024      	b.n	8000cbe <main+0x19e>
	  }
	  else if((rxIntCheck == 1) && (seqCheck == 6))
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <main+0x1c0>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d188      	bne.n	8000b8e <main+0x6e>
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <main+0x1c4>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b06      	cmp	r3, #6
 8000c82:	d184      	bne.n	8000b8e <main+0x6e>
	  {
		  if(rxInProgress == 0)
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <main+0x1d0>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10b      	bne.n	8000ca4 <main+0x184>
		  {
			  rxIntCheck = 75;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <main+0x1c0>)
 8000c8e:	224b      	movs	r2, #75	; 0x4b
 8000c90:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Receive_IT( &huart1, &gpsBuff[6], 74);
 8000c92:	224a      	movs	r2, #74	; 0x4a
 8000c94:	4917      	ldr	r1, [pc, #92]	; (8000cf4 <main+0x1d4>)
 8000c96:	4815      	ldr	r0, [pc, #84]	; (8000cec <main+0x1cc>)
 8000c98:	f002 fdc1 	bl	800381e <HAL_UART_Receive_IT>
			  rxInProgress = 1;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <main+0x1d0>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
 8000ca2:	e774      	b.n	8000b8e <main+0x6e>
		  }
		  else
		  {
			  rxInProgress = 0;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <main+0x1d0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
			  seqCheck = 0;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <main+0x1c4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
			  nmea_parse(&gpsData, gpsBuff);
 8000cb0:	4911      	ldr	r1, [pc, #68]	; (8000cf8 <main+0x1d8>)
 8000cb2:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <main+0x1b8>)
 8000cb4:	f000 f964 	bl	8000f80 <nmea_parse>
			  //HAL_UART_Receive_IT( &huart1, &rxData, 1);
			  updateFlag = 1;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <main+0x1bc>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
	  if(updateFlag != 0)
 8000cbe:	e766      	b.n	8000b8e <main+0x6e>
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	08007250 	.word	0x08007250
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	08007258 	.word	0x08007258
 8000cd0:	08007260 	.word	0x08007260
 8000cd4:	08007268 	.word	0x08007268
 8000cd8:	20000408 	.word	0x20000408
 8000cdc:	20000430 	.word	0x20000430
 8000ce0:	20000010 	.word	0x20000010
 8000ce4:	20000431 	.word	0x20000431
 8000ce8:	20000433 	.word	0x20000433
 8000cec:	20000264 	.word	0x20000264
 8000cf0:	20000432 	.word	0x20000432
 8000cf4:	200002ae 	.word	0x200002ae
 8000cf8:	200002a8 	.word	0x200002a8

08000cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b090      	sub	sp, #64	; 0x40
 8000d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d02:	f107 0318 	add.w	r3, r7, #24
 8000d06:	2228      	movs	r2, #40	; 0x28
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f003 f9d2 	bl	80040b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d30:	2302      	movs	r3, #2
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000d3a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d40:	f107 0318 	add.w	r3, r7, #24
 8000d44:	4618      	mov	r0, r3
 8000d46:	f002 f903 	bl	8002f50 <HAL_RCC_OscConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d50:	f000 f8c8 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d54:	230f      	movs	r3, #15
 8000d56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f002 fb71 	bl	8003454 <HAL_RCC_ClockConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d78:	f000 f8b4 	bl	8000ee4 <Error_Handler>
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3740      	adds	r7, #64	; 0x40
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000d8a:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <MX_I2C1_Init+0x54>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000d90:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <MX_I2C1_Init+0x58>)
 8000d92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000da2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000da6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000dc2:	f001 fb4d 	bl	8002460 <HAL_I2C_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dcc:	f000 f88a 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000210 	.word	0x20000210
 8000dd8:	40005400 	.word	0x40005400
 8000ddc:	00061a80 	.word	0x00061a80

08000de0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <MX_USART1_UART_Init+0x50>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000dec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000df0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e06:	2204      	movs	r2, #4
 8000e08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e18:	f002 fcb4 	bl	8003784 <HAL_UART_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e22:	f000 f85f 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000264 	.word	0x20000264
 8000e30:	40013800 	.word	0x40013800

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e48:	4b24      	ldr	r3, [pc, #144]	; (8000edc <MX_GPIO_Init+0xa8>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a23      	ldr	r2, [pc, #140]	; (8000edc <MX_GPIO_Init+0xa8>)
 8000e4e:	f043 0310 	orr.w	r3, r3, #16
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b21      	ldr	r3, [pc, #132]	; (8000edc <MX_GPIO_Init+0xa8>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <MX_GPIO_Init+0xa8>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a1d      	ldr	r2, [pc, #116]	; (8000edc <MX_GPIO_Init+0xa8>)
 8000e66:	f043 0320 	orr.w	r3, r3, #32
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_GPIO_Init+0xa8>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0320 	and.w	r3, r3, #32
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_GPIO_Init+0xa8>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a17      	ldr	r2, [pc, #92]	; (8000edc <MX_GPIO_Init+0xa8>)
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_GPIO_Init+0xa8>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <MX_GPIO_Init+0xa8>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a11      	ldr	r2, [pc, #68]	; (8000edc <MX_GPIO_Init+0xa8>)
 8000e96:	f043 0308 	orr.w	r3, r3, #8
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <MX_GPIO_Init+0xa8>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0308 	and.w	r3, r3, #8
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eae:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <MX_GPIO_Init+0xac>)
 8000eb0:	f001 fabe 	bl	8002430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <MX_GPIO_Init+0xac>)
 8000ece:	f001 f92b 	bl	8002128 <HAL_GPIO_Init>

}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40011000 	.word	0x40011000

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	e7fe      	b.n	8000eec <Error_Handler+0x8>

08000eee <nmea_mem_init>:
//
#include "nmea_parse.h"
#include <stdio.h>

void nmea_mem_init(GPS *gps_data)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
	gps_data->headType = malloc(10);
 8000ef6:	200a      	movs	r0, #10
 8000ef8:	f003 f8d4 	bl	80040a4 <malloc>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	601a      	str	r2, [r3, #0]
	gps_data->utcTime = malloc(12);
 8000f04:	200c      	movs	r0, #12
 8000f06:	f003 f8cd 	bl	80040a4 <malloc>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	605a      	str	r2, [r3, #4]
	gps_data->validStatus = malloc(10);
 8000f12:	200a      	movs	r0, #10
 8000f14:	f003 f8c6 	bl	80040a4 <malloc>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
	gps_data->lat = malloc(10);
 8000f20:	200a      	movs	r0, #10
 8000f22:	f003 f8bf 	bl	80040a4 <malloc>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60da      	str	r2, [r3, #12]
	gps_data->latDir = malloc(2);
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f003 f8b8 	bl	80040a4 <malloc>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	611a      	str	r2, [r3, #16]
	gps_data->lon = malloc(12);
 8000f3c:	200c      	movs	r0, #12
 8000f3e:	f003 f8b1 	bl	80040a4 <malloc>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	615a      	str	r2, [r3, #20]
	gps_data->lonDir = malloc(2);
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	f003 f8aa 	bl	80040a4 <malloc>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	619a      	str	r2, [r3, #24]
	gps_data->speed = malloc(10);
 8000f58:	200a      	movs	r0, #10
 8000f5a:	f003 f8a3 	bl	80040a4 <malloc>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	61da      	str	r2, [r3, #28]
	gps_data->utcDate = malloc(8);
 8000f66:	2008      	movs	r0, #8
 8000f68:	f003 f89c 	bl	80040a4 <malloc>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	0000      	movs	r0, r0
	...

08000f80 <nmea_parse>:

void nmea_parse(GPS *gps_data, char *buffer)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08c      	sub	sp, #48	; 0x30
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	char *paramVal;
	int i=0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
	double speedkm, course;
	char *tmp;
	uint8_t breakCheck=0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	paramVal = strtok(buffer, ",");
 8000f94:	49a2      	ldr	r1, [pc, #648]	; (8001220 <nmea_parse+0x2a0>)
 8000f96:	6838      	ldr	r0, [r7, #0]
 8000f98:	f003 ffbe 	bl	8004f18 <strtok>
 8000f9c:	62f8      	str	r0, [r7, #44]	; 0x2c
	while( paramVal != NULL)
 8000f9e:	e166      	b.n	800126e <nmea_parse+0x2ee>
	{
		switch(i)
 8000fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa2:	2b09      	cmp	r3, #9
 8000fa4:	f200 8156 	bhi.w	8001254 <nmea_parse+0x2d4>
 8000fa8:	a201      	add	r2, pc, #4	; (adr r2, 8000fb0 <nmea_parse+0x30>)
 8000faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fae:	bf00      	nop
 8000fb0:	08000fd9 	.word	0x08000fd9
 8000fb4:	08000fed 	.word	0x08000fed
 8000fb8:	0800108d 	.word	0x0800108d
 8000fbc:	08001129 	.word	0x08001129
 8000fc0:	0800113d 	.word	0x0800113d
 8000fc4:	08001151 	.word	0x08001151
 8000fc8:	08001165 	.word	0x08001165
 8000fcc:	08001179 	.word	0x08001179
 8000fd0:	080011c7 	.word	0x080011c7
 8000fd4:	08001205 	.word	0x08001205
		{
			case MSGHEAD:
				strcpy(gps_data->headType, paramVal);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f003 f97c 	bl	80042dc <strcpy>
				i++;
 8000fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8000fea:	e137      	b.n	800125c <nmea_parse+0x2dc>

			case UTC_TIME:
				sprintf(gps_data->utcTime, "%.6s", paramVal);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ff2:	498c      	ldr	r1, [pc, #560]	; (8001224 <nmea_parse+0x2a4>)
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 f951 	bl	800429c <siprintf>
				//strcpy(gps_data->utcTime, paramVal);
				if(strcmp(paramVal, "V") == 0)
 8000ffa:	498b      	ldr	r1, [pc, #556]	; (8001228 <nmea_parse+0x2a8>)
 8000ffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ffe:	f7ff f8a7 	bl	8000150 <strcmp>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d13d      	bne.n	8001084 <nmea_parse+0x104>
				{
					paramVal = "000000";
 8001008:	4b88      	ldr	r3, [pc, #544]	; (800122c <nmea_parse+0x2ac>)
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
					sprintf(gps_data->utcTime, "%.6s", paramVal);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001012:	4984      	ldr	r1, [pc, #528]	; (8001224 <nmea_parse+0x2a4>)
 8001014:	4618      	mov	r0, r3
 8001016:	f003 f941 	bl	800429c <siprintf>
					paramVal = "INVALID";
 800101a:	4b85      	ldr	r3, [pc, #532]	; (8001230 <nmea_parse+0x2b0>)
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
					strcpy(gps_data->lat, paramVal);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001024:	4618      	mov	r0, r3
 8001026:	f003 f959 	bl	80042dc <strcpy>
					strcpy(gps_data->lon, paramVal);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001030:	4618      	mov	r0, r3
 8001032:	f003 f953 	bl	80042dc <strcpy>
					paramVal = "!";
 8001036:	4b7f      	ldr	r3, [pc, #508]	; (8001234 <nmea_parse+0x2b4>)
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
					strcpy(gps_data->latDir, paramVal);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001040:	4618      	mov	r0, r3
 8001042:	f003 f94b 	bl	80042dc <strcpy>
					strcpy(gps_data->lonDir, paramVal);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800104c:	4618      	mov	r0, r3
 800104e:	f003 f945 	bl	80042dc <strcpy>
					sprintf(gps_data->validStatus, "NO LOCK");
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	4978      	ldr	r1, [pc, #480]	; (8001238 <nmea_parse+0x2b8>)
 8001058:	4618      	mov	r0, r3
 800105a:	f003 f91f 	bl	800429c <siprintf>
					paramVal = "000";
 800105e:	4b77      	ldr	r3, [pc, #476]	; (800123c <nmea_parse+0x2bc>)
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
					strcpy(gps_data->speed, paramVal);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001068:	4618      	mov	r0, r3
 800106a:	f003 f937 	bl	80042dc <strcpy>
					paramVal = "XXXXXX";
 800106e:	4b74      	ldr	r3, [pc, #464]	; (8001240 <nmea_parse+0x2c0>)
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
					strcpy(gps_data->utcDate, paramVal);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001078:	4618      	mov	r0, r3
 800107a:	f003 f92f 	bl	80042dc <strcpy>

					breakCheck = 1;
 800107e:	2301      	movs	r3, #1
 8001080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				i++;
 8001084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001086:	3301      	adds	r3, #1
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 800108a:	e0e7      	b.n	800125c <nmea_parse+0x2dc>

			case VALIDSTATUS:
				if(strcmp(paramVal, "A") == 0)
 800108c:	496d      	ldr	r1, [pc, #436]	; (8001244 <nmea_parse+0x2c4>)
 800108e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001090:	f7ff f85e 	bl	8000150 <strcmp>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d106      	bne.n	80010a8 <nmea_parse+0x128>
					sprintf(gps_data->validStatus, " LOCKED");
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	496a      	ldr	r1, [pc, #424]	; (8001248 <nmea_parse+0x2c8>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 f8fb 	bl	800429c <siprintf>
 80010a6:	e03b      	b.n	8001120 <nmea_parse+0x1a0>
				else if(strcmp(paramVal, "V") == 0)
 80010a8:	495f      	ldr	r1, [pc, #380]	; (8001228 <nmea_parse+0x2a8>)
 80010aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010ac:	f7ff f850 	bl	8000150 <strcmp>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d134      	bne.n	8001120 <nmea_parse+0x1a0>
				{
					paramVal = "INVALID";
 80010b6:	4b5e      	ldr	r3, [pc, #376]	; (8001230 <nmea_parse+0x2b0>)
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					strcpy(gps_data->lat, paramVal);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010c0:	4618      	mov	r0, r3
 80010c2:	f003 f90b 	bl	80042dc <strcpy>
					strcpy(gps_data->lon, paramVal);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010cc:	4618      	mov	r0, r3
 80010ce:	f003 f905 	bl	80042dc <strcpy>
					paramVal = "!";
 80010d2:	4b58      	ldr	r3, [pc, #352]	; (8001234 <nmea_parse+0x2b4>)
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
					strcpy(gps_data->latDir, paramVal);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 f8fd 	bl	80042dc <strcpy>
					strcpy(gps_data->lonDir, paramVal);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 f8f7 	bl	80042dc <strcpy>
					sprintf(gps_data->validStatus, "NO LOCK");
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4951      	ldr	r1, [pc, #324]	; (8001238 <nmea_parse+0x2b8>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 f8d1 	bl	800429c <siprintf>
					paramVal = "000";
 80010fa:	4b50      	ldr	r3, [pc, #320]	; (800123c <nmea_parse+0x2bc>)
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					strcpy(gps_data->speed, paramVal);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001104:	4618      	mov	r0, r3
 8001106:	f003 f8e9 	bl	80042dc <strcpy>
					paramVal = "XXXXXX";
 800110a:	4b4d      	ldr	r3, [pc, #308]	; (8001240 <nmea_parse+0x2c0>)
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
					strcpy(gps_data->utcDate, paramVal);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001114:	4618      	mov	r0, r3
 8001116:	f003 f8e1 	bl	80042dc <strcpy>

					breakCheck = 1;
 800111a:	2301      	movs	r3, #1
 800111c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				//strcpy(gps_data->validStatus, paramVal);
				i++;
 8001120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001122:	3301      	adds	r3, #1
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8001126:	e099      	b.n	800125c <nmea_parse+0x2dc>

			case LAT:
				strcpy(gps_data->lat, paramVal);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800112e:	4618      	mov	r0, r3
 8001130:	f003 f8d4 	bl	80042dc <strcpy>
				i++;
 8001134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001136:	3301      	adds	r3, #1
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 800113a:	e08f      	b.n	800125c <nmea_parse+0x2dc>

			case LATDIR:
				strcpy(gps_data->latDir, paramVal);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001142:	4618      	mov	r0, r3
 8001144:	f003 f8ca 	bl	80042dc <strcpy>
				i++;
 8001148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114a:	3301      	adds	r3, #1
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 800114e:	e085      	b.n	800125c <nmea_parse+0x2dc>

			case LONG:
				strcpy(gps_data->lon, paramVal);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001156:	4618      	mov	r0, r3
 8001158:	f003 f8c0 	bl	80042dc <strcpy>
				i++;
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	3301      	adds	r3, #1
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8001162:	e07b      	b.n	800125c <nmea_parse+0x2dc>

			case LONGDIR:
				strcpy(gps_data->lonDir, paramVal);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800116a:	4618      	mov	r0, r3
 800116c:	f003 f8b6 	bl	80042dc <strcpy>
				i++;
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	3301      	adds	r3, #1
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8001176:	e071      	b.n	800125c <nmea_parse+0x2dc>

			case SPEED:
				speedkm = strtod(paramVal, &tmp);
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4619      	mov	r1, r3
 800117e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001180:	f003 febe 	bl	8004f00 <strtod>
 8001184:	e9c7 0104 	strd	r0, r1, [r7, #16]
				speedkm *= 1.852;
 8001188:	a323      	add	r3, pc, #140	; (adr r3, 8001218 <nmea_parse+0x298>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001192:	f7ff f9ab 	bl	80004ec <__aeabi_dmul>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	e9c7 2304 	strd	r2, r3, [r7, #16]
				sprintf(paramVal, "%03d", (int)speedkm);
 800119e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011a2:	f7ff fc3d 	bl	8000a20 <__aeabi_d2iz>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	4928      	ldr	r1, [pc, #160]	; (800124c <nmea_parse+0x2cc>)
 80011ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011ae:	f003 f875 	bl	800429c <siprintf>
				strcpy(gps_data->speed, paramVal);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80011b8:	4618      	mov	r0, r3
 80011ba:	f003 f88f 	bl	80042dc <strcpy>
				i++;
 80011be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c0:	3301      	adds	r3, #1
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 80011c4:	e04a      	b.n	800125c <nmea_parse+0x2dc>

			case COURSE:
				course = strtod(paramVal, &tmp);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011ce:	f003 fe97 	bl	8004f00 <strtod>
 80011d2:	e9c7 0106 	strd	r0, r1, [r7, #24]
				if(course >= 010100)
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <nmea_parse+0x2d0>)
 80011dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011e0:	f7ff fc0a 	bl	80009f8 <__aeabi_dcmpge>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d008      	beq.n	80011fc <nmea_parse+0x27c>
				{
					strcpy(gps_data->utcDate, paramVal);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 f873 	bl	80042dc <strcpy>
					breakCheck = 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				i++;
 80011fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fe:	3301      	adds	r3, #1
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8001202:	e02b      	b.n	800125c <nmea_parse+0x2dc>

			case DATE:
				strcpy(gps_data->utcDate, paramVal);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800120a:	4618      	mov	r0, r3
 800120c:	f003 f866 	bl	80042dc <strcpy>
				i++;
 8001210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001212:	3301      	adds	r3, #1
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8001216:	e021      	b.n	800125c <nmea_parse+0x2dc>
 8001218:	c083126f 	.word	0xc083126f
 800121c:	3ffda1ca 	.word	0x3ffda1ca
 8001220:	08007270 	.word	0x08007270
 8001224:	08007274 	.word	0x08007274
 8001228:	0800727c 	.word	0x0800727c
 800122c:	08007280 	.word	0x08007280
 8001230:	08007288 	.word	0x08007288
 8001234:	08007290 	.word	0x08007290
 8001238:	08007294 	.word	0x08007294
 800123c:	0800729c 	.word	0x0800729c
 8001240:	080072a0 	.word	0x080072a0
 8001244:	080072a8 	.word	0x080072a8
 8001248:	080072ac 	.word	0x080072ac
 800124c:	080072b4 	.word	0x080072b4
 8001250:	40b04000 	.word	0x40b04000

			default:
				i++;
 8001254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001256:	3301      	adds	r3, #1
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 800125a:	bf00      	nop

		}
		paramVal = strtok(NULL, ",");
 800125c:	4909      	ldr	r1, [pc, #36]	; (8001284 <nmea_parse+0x304>)
 800125e:	2000      	movs	r0, #0
 8001260:	f003 fe5a 	bl	8004f18 <strtok>
 8001264:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(breakCheck == 1)
 8001266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800126a:	2b01      	cmp	r3, #1
 800126c:	d004      	beq.n	8001278 <nmea_parse+0x2f8>
	while( paramVal != NULL)
 800126e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001270:	2b00      	cmp	r3, #0
 8001272:	f47f ae95 	bne.w	8000fa0 <nmea_parse+0x20>
			break;
	}
}
 8001276:	e000      	b.n	800127a <nmea_parse+0x2fa>
			break;
 8001278:	bf00      	nop
}
 800127a:	bf00      	nop
 800127c:	3730      	adds	r7, #48	; 0x30
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	08007270 	.word	0x08007270

08001288 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800128e:	f000 fa1f 	bl	80016d0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001292:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001296:	2201      	movs	r2, #1
 8001298:	2178      	movs	r1, #120	; 0x78
 800129a:	485b      	ldr	r0, [pc, #364]	; (8001408 <SSD1306_Init+0x180>)
 800129c:	f001 fb22 	bl	80028e4 <HAL_I2C_IsDeviceReady>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e0a9      	b.n	80013fe <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80012aa:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80012ae:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012b0:	e002      	b.n	80012b8 <SSD1306_Init+0x30>
		p--;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f9      	bne.n	80012b2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80012be:	22ae      	movs	r2, #174	; 0xae
 80012c0:	2100      	movs	r1, #0
 80012c2:	2078      	movs	r0, #120	; 0x78
 80012c4:	f000 fa7e 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80012c8:	2220      	movs	r2, #32
 80012ca:	2100      	movs	r1, #0
 80012cc:	2078      	movs	r0, #120	; 0x78
 80012ce:	f000 fa79 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80012d2:	2210      	movs	r2, #16
 80012d4:	2100      	movs	r1, #0
 80012d6:	2078      	movs	r0, #120	; 0x78
 80012d8:	f000 fa74 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012dc:	22b0      	movs	r2, #176	; 0xb0
 80012de:	2100      	movs	r1, #0
 80012e0:	2078      	movs	r0, #120	; 0x78
 80012e2:	f000 fa6f 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80012e6:	22c8      	movs	r2, #200	; 0xc8
 80012e8:	2100      	movs	r1, #0
 80012ea:	2078      	movs	r0, #120	; 0x78
 80012ec:	f000 fa6a 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	2078      	movs	r0, #120	; 0x78
 80012f6:	f000 fa65 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80012fa:	2210      	movs	r2, #16
 80012fc:	2100      	movs	r1, #0
 80012fe:	2078      	movs	r0, #120	; 0x78
 8001300:	f000 fa60 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001304:	2240      	movs	r2, #64	; 0x40
 8001306:	2100      	movs	r1, #0
 8001308:	2078      	movs	r0, #120	; 0x78
 800130a:	f000 fa5b 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800130e:	2281      	movs	r2, #129	; 0x81
 8001310:	2100      	movs	r1, #0
 8001312:	2078      	movs	r0, #120	; 0x78
 8001314:	f000 fa56 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001318:	22ff      	movs	r2, #255	; 0xff
 800131a:	2100      	movs	r1, #0
 800131c:	2078      	movs	r0, #120	; 0x78
 800131e:	f000 fa51 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001322:	22a1      	movs	r2, #161	; 0xa1
 8001324:	2100      	movs	r1, #0
 8001326:	2078      	movs	r0, #120	; 0x78
 8001328:	f000 fa4c 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800132c:	22a6      	movs	r2, #166	; 0xa6
 800132e:	2100      	movs	r1, #0
 8001330:	2078      	movs	r0, #120	; 0x78
 8001332:	f000 fa47 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001336:	22a8      	movs	r2, #168	; 0xa8
 8001338:	2100      	movs	r1, #0
 800133a:	2078      	movs	r0, #120	; 0x78
 800133c:	f000 fa42 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001340:	223f      	movs	r2, #63	; 0x3f
 8001342:	2100      	movs	r1, #0
 8001344:	2078      	movs	r0, #120	; 0x78
 8001346:	f000 fa3d 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800134a:	22a4      	movs	r2, #164	; 0xa4
 800134c:	2100      	movs	r1, #0
 800134e:	2078      	movs	r0, #120	; 0x78
 8001350:	f000 fa38 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001354:	22d3      	movs	r2, #211	; 0xd3
 8001356:	2100      	movs	r1, #0
 8001358:	2078      	movs	r0, #120	; 0x78
 800135a:	f000 fa33 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2078      	movs	r0, #120	; 0x78
 8001364:	f000 fa2e 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001368:	22d5      	movs	r2, #213	; 0xd5
 800136a:	2100      	movs	r1, #0
 800136c:	2078      	movs	r0, #120	; 0x78
 800136e:	f000 fa29 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001372:	22f0      	movs	r2, #240	; 0xf0
 8001374:	2100      	movs	r1, #0
 8001376:	2078      	movs	r0, #120	; 0x78
 8001378:	f000 fa24 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800137c:	22d9      	movs	r2, #217	; 0xd9
 800137e:	2100      	movs	r1, #0
 8001380:	2078      	movs	r0, #120	; 0x78
 8001382:	f000 fa1f 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001386:	2222      	movs	r2, #34	; 0x22
 8001388:	2100      	movs	r1, #0
 800138a:	2078      	movs	r0, #120	; 0x78
 800138c:	f000 fa1a 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001390:	22da      	movs	r2, #218	; 0xda
 8001392:	2100      	movs	r1, #0
 8001394:	2078      	movs	r0, #120	; 0x78
 8001396:	f000 fa15 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800139a:	2212      	movs	r2, #18
 800139c:	2100      	movs	r1, #0
 800139e:	2078      	movs	r0, #120	; 0x78
 80013a0:	f000 fa10 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80013a4:	22db      	movs	r2, #219	; 0xdb
 80013a6:	2100      	movs	r1, #0
 80013a8:	2078      	movs	r0, #120	; 0x78
 80013aa:	f000 fa0b 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80013ae:	2220      	movs	r2, #32
 80013b0:	2100      	movs	r1, #0
 80013b2:	2078      	movs	r0, #120	; 0x78
 80013b4:	f000 fa06 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80013b8:	228d      	movs	r2, #141	; 0x8d
 80013ba:	2100      	movs	r1, #0
 80013bc:	2078      	movs	r0, #120	; 0x78
 80013be:	f000 fa01 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80013c2:	2214      	movs	r2, #20
 80013c4:	2100      	movs	r1, #0
 80013c6:	2078      	movs	r0, #120	; 0x78
 80013c8:	f000 f9fc 	bl	80017c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80013cc:	22af      	movs	r2, #175	; 0xaf
 80013ce:	2100      	movs	r1, #0
 80013d0:	2078      	movs	r0, #120	; 0x78
 80013d2:	f000 f9f7 	bl	80017c4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80013d6:	222e      	movs	r2, #46	; 0x2e
 80013d8:	2100      	movs	r1, #0
 80013da:	2078      	movs	r0, #120	; 0x78
 80013dc:	f000 f9f2 	bl	80017c4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 f843 	bl	800146c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80013e6:	f000 f813 	bl	8001410 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <SSD1306_Init+0x184>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <SSD1306_Init+0x184>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <SSD1306_Init+0x184>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80013fc:	2301      	movs	r3, #1
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000210 	.word	0x20000210
 800140c:	20000834 	.word	0x20000834

08001410 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001416:	2300      	movs	r3, #0
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	e01d      	b.n	8001458 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	3b50      	subs	r3, #80	; 0x50
 8001420:	b2db      	uxtb	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	2100      	movs	r1, #0
 8001426:	2078      	movs	r0, #120	; 0x78
 8001428:	f000 f9cc 	bl	80017c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	2078      	movs	r0, #120	; 0x78
 8001432:	f000 f9c7 	bl	80017c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001436:	2210      	movs	r2, #16
 8001438:	2100      	movs	r1, #0
 800143a:	2078      	movs	r0, #120	; 0x78
 800143c:	f000 f9c2 	bl	80017c4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	01db      	lsls	r3, r3, #7
 8001444:	4a08      	ldr	r2, [pc, #32]	; (8001468 <SSD1306_UpdateScreen+0x58>)
 8001446:	441a      	add	r2, r3
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	2140      	movs	r1, #64	; 0x40
 800144c:	2078      	movs	r0, #120	; 0x78
 800144e:	f000 f953 	bl	80016f8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	3301      	adds	r3, #1
 8001456:	71fb      	strb	r3, [r7, #7]
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b07      	cmp	r3, #7
 800145c:	d9de      	bls.n	800141c <SSD1306_UpdateScreen+0xc>
	}
}
 800145e:	bf00      	nop
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000434 	.word	0x20000434

0800146c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <SSD1306_Fill+0x14>
 800147c:	2300      	movs	r3, #0
 800147e:	e000      	b.n	8001482 <SSD1306_Fill+0x16>
 8001480:	23ff      	movs	r3, #255	; 0xff
 8001482:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001486:	4619      	mov	r1, r3
 8001488:	4803      	ldr	r0, [pc, #12]	; (8001498 <SSD1306_Fill+0x2c>)
 800148a:	f002 fe13 	bl	80040b4 <memset>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000434 	.word	0x20000434

0800149c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	80fb      	strh	r3, [r7, #6]
 80014a6:	460b      	mov	r3, r1
 80014a8:	80bb      	strh	r3, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	70fb      	strb	r3, [r7, #3]
	if (
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	2b7f      	cmp	r3, #127	; 0x7f
 80014b2:	d848      	bhi.n	8001546 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80014b4:	88bb      	ldrh	r3, [r7, #4]
 80014b6:	2b3f      	cmp	r3, #63	; 0x3f
 80014b8:	d845      	bhi.n	8001546 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80014ba:	4b25      	ldr	r3, [pc, #148]	; (8001550 <SSD1306_DrawPixel+0xb4>)
 80014bc:	791b      	ldrb	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf0c      	ite	eq
 80014c8:	2301      	moveq	r3, #1
 80014ca:	2300      	movne	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d11a      	bne.n	800150c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014d6:	88fa      	ldrh	r2, [r7, #6]
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	08db      	lsrs	r3, r3, #3
 80014dc:	b298      	uxth	r0, r3
 80014de:	4603      	mov	r3, r0
 80014e0:	01db      	lsls	r3, r3, #7
 80014e2:	4413      	add	r3, r2
 80014e4:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <SSD1306_DrawPixel+0xb8>)
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	b25a      	sxtb	r2, r3
 80014ea:	88bb      	ldrh	r3, [r7, #4]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b259      	sxtb	r1, r3
 80014fc:	88fa      	ldrh	r2, [r7, #6]
 80014fe:	4603      	mov	r3, r0
 8001500:	01db      	lsls	r3, r3, #7
 8001502:	4413      	add	r3, r2
 8001504:	b2c9      	uxtb	r1, r1
 8001506:	4a13      	ldr	r2, [pc, #76]	; (8001554 <SSD1306_DrawPixel+0xb8>)
 8001508:	54d1      	strb	r1, [r2, r3]
 800150a:	e01d      	b.n	8001548 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800150c:	88fa      	ldrh	r2, [r7, #6]
 800150e:	88bb      	ldrh	r3, [r7, #4]
 8001510:	08db      	lsrs	r3, r3, #3
 8001512:	b298      	uxth	r0, r3
 8001514:	4603      	mov	r3, r0
 8001516:	01db      	lsls	r3, r3, #7
 8001518:	4413      	add	r3, r2
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <SSD1306_DrawPixel+0xb8>)
 800151c:	5cd3      	ldrb	r3, [r2, r3]
 800151e:	b25a      	sxtb	r2, r3
 8001520:	88bb      	ldrh	r3, [r7, #4]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	b25b      	sxtb	r3, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	b25b      	sxtb	r3, r3
 8001532:	4013      	ands	r3, r2
 8001534:	b259      	sxtb	r1, r3
 8001536:	88fa      	ldrh	r2, [r7, #6]
 8001538:	4603      	mov	r3, r0
 800153a:	01db      	lsls	r3, r3, #7
 800153c:	4413      	add	r3, r2
 800153e:	b2c9      	uxtb	r1, r1
 8001540:	4a04      	ldr	r2, [pc, #16]	; (8001554 <SSD1306_DrawPixel+0xb8>)
 8001542:	54d1      	strb	r1, [r2, r3]
 8001544:	e000      	b.n	8001548 <SSD1306_DrawPixel+0xac>
		return;
 8001546:	bf00      	nop
	}
}
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	20000834 	.word	0x20000834
 8001554:	20000434 	.word	0x20000434

08001558 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	460a      	mov	r2, r1
 8001562:	80fb      	strh	r3, [r7, #6]
 8001564:	4613      	mov	r3, r2
 8001566:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001568:	4a05      	ldr	r2, [pc, #20]	; (8001580 <SSD1306_GotoXY+0x28>)
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <SSD1306_GotoXY+0x28>)
 8001570:	88bb      	ldrh	r3, [r7, #4]
 8001572:	8053      	strh	r3, [r2, #2]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000834 	.word	0x20000834

08001584 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
 8001590:	4613      	mov	r3, r2
 8001592:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001594:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <SSD1306_Putc+0xfc>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	4413      	add	r3, r2
	if (
 80015a0:	2b7f      	cmp	r3, #127	; 0x7f
 80015a2:	dc07      	bgt.n	80015b4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <SSD1306_Putc+0xfc>)
 80015a6:	885b      	ldrh	r3, [r3, #2]
 80015a8:	461a      	mov	r2, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	785b      	ldrb	r3, [r3, #1]
 80015ae:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80015b0:	2b3f      	cmp	r3, #63	; 0x3f
 80015b2:	dd01      	ble.n	80015b8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e05e      	b.n	8001676 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	e04b      	b.n	8001656 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	3b20      	subs	r3, #32
 80015c6:	6839      	ldr	r1, [r7, #0]
 80015c8:	7849      	ldrb	r1, [r1, #1]
 80015ca:	fb01 f303 	mul.w	r3, r1, r3
 80015ce:	4619      	mov	r1, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	440b      	add	r3, r1
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	e030      	b.n	8001644 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d010      	beq.n	8001614 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80015f2:	4b23      	ldr	r3, [pc, #140]	; (8001680 <SSD1306_Putc+0xfc>)
 80015f4:	881a      	ldrh	r2, [r3, #0]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	b298      	uxth	r0, r3
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <SSD1306_Putc+0xfc>)
 8001600:	885a      	ldrh	r2, [r3, #2]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	b29b      	uxth	r3, r3
 8001606:	4413      	add	r3, r2
 8001608:	b29b      	uxth	r3, r3
 800160a:	79ba      	ldrb	r2, [r7, #6]
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff ff45 	bl	800149c <SSD1306_DrawPixel>
 8001612:	e014      	b.n	800163e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <SSD1306_Putc+0xfc>)
 8001616:	881a      	ldrh	r2, [r3, #0]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	b29b      	uxth	r3, r3
 800161c:	4413      	add	r3, r2
 800161e:	b298      	uxth	r0, r3
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <SSD1306_Putc+0xfc>)
 8001622:	885a      	ldrh	r2, [r3, #2]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	b29b      	uxth	r3, r3
 8001628:	4413      	add	r3, r2
 800162a:	b299      	uxth	r1, r3
 800162c:	79bb      	ldrb	r3, [r7, #6]
 800162e:	2b00      	cmp	r3, #0
 8001630:	bf0c      	ite	eq
 8001632:	2301      	moveq	r3, #1
 8001634:	2300      	movne	r3, #0
 8001636:	b2db      	uxtb	r3, r3
 8001638:	461a      	mov	r2, r3
 800163a:	f7ff ff2f 	bl	800149c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	3301      	adds	r3, #1
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4293      	cmp	r3, r2
 800164e:	d3c8      	bcc.n	80015e2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	785b      	ldrb	r3, [r3, #1]
 800165a:	461a      	mov	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	4293      	cmp	r3, r2
 8001660:	d3ad      	bcc.n	80015be <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <SSD1306_Putc+0xfc>)
 8001664:	881a      	ldrh	r2, [r3, #0]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b29b      	uxth	r3, r3
 800166c:	4413      	add	r3, r2
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <SSD1306_Putc+0xfc>)
 8001672:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001674:	79fb      	ldrb	r3, [r7, #7]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000834 	.word	0x20000834

08001684 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	4613      	mov	r3, r2
 8001690:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001692:	e012      	b.n	80016ba <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	79fa      	ldrb	r2, [r7, #7]
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff71 	bl	8001584 <SSD1306_Putc>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d002      	beq.n	80016b4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	e008      	b.n	80016c6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3301      	adds	r3, #1
 80016b8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1e8      	bne.n	8001694 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	781b      	ldrb	r3, [r3, #0]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80016d6:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <ssd1306_I2C_Init+0x24>)
 80016d8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016da:	e002      	b.n	80016e2 <ssd1306_I2C_Init+0x12>
		p--;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f9      	bne.n	80016dc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	0003d090 	.word	0x0003d090

080016f8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b0c7      	sub	sp, #284	; 0x11c
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	4604      	mov	r4, r0
 8001700:	4608      	mov	r0, r1
 8001702:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001706:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800170a:	600a      	str	r2, [r1, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001712:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001716:	4622      	mov	r2, r4
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800171e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001722:	4602      	mov	r2, r0
 8001724:	701a      	strb	r2, [r3, #0]
 8001726:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800172a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800172e:	460a      	mov	r2, r1
 8001730:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001732:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800173a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800173e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001742:	7812      	ldrb	r2, [r2, #0]
 8001744:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001746:	2300      	movs	r3, #0
 8001748:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800174c:	e015      	b.n	800177a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800174e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001752:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001756:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	441a      	add	r2, r3
 800175e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001762:	3301      	adds	r3, #1
 8001764:	7811      	ldrb	r1, [r2, #0]
 8001766:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800176a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800176e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001770:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001774:	3301      	adds	r3, #1
 8001776:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800177a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800177e:	b29b      	uxth	r3, r3
 8001780:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001784:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001788:	8812      	ldrh	r2, [r2, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d8df      	bhi.n	800174e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800178e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001792:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b299      	uxth	r1, r3
 800179a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800179e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	f107 020c 	add.w	r2, r7, #12
 80017ac:	200a      	movs	r0, #10
 80017ae:	9000      	str	r0, [sp, #0]
 80017b0:	4803      	ldr	r0, [pc, #12]	; (80017c0 <ssd1306_I2C_WriteMulti+0xc8>)
 80017b2:	f000 ff99 	bl	80026e8 <HAL_I2C_Master_Transmit>
}
 80017b6:	bf00      	nop
 80017b8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd90      	pop	{r4, r7, pc}
 80017c0:	20000210 	.word	0x20000210

080017c4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
 80017ce:	460b      	mov	r3, r1
 80017d0:	71bb      	strb	r3, [r7, #6]
 80017d2:	4613      	mov	r3, r2
 80017d4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80017d6:	79bb      	ldrb	r3, [r7, #6]
 80017d8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80017da:	797b      	ldrb	r3, [r7, #5]
 80017dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	b299      	uxth	r1, r3
 80017e2:	f107 020c 	add.w	r2, r7, #12
 80017e6:	230a      	movs	r3, #10
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2302      	movs	r3, #2
 80017ec:	4803      	ldr	r0, [pc, #12]	; (80017fc <ssd1306_I2C_Write+0x38>)
 80017ee:	f000 ff7b 	bl	80026e8 <HAL_I2C_Master_Transmit>
}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000210 	.word	0x20000210

08001800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_MspInit+0x40>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	4a0d      	ldr	r2, [pc, #52]	; (8001840 <HAL_MspInit+0x40>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6193      	str	r3, [r2, #24]
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_MspInit+0x40>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_MspInit+0x40>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a07      	ldr	r2, [pc, #28]	; (8001840 <HAL_MspInit+0x40>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	61d3      	str	r3, [r2, #28]
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_MspInit+0x40>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <HAL_I2C_MspInit+0x70>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d123      	bne.n	80018ac <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <HAL_I2C_MspInit+0x74>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a13      	ldr	r2, [pc, #76]	; (80018b8 <HAL_I2C_MspInit+0x74>)
 800186a:	f043 0308 	orr.w	r3, r3, #8
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_I2C_MspInit+0x74>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800187c:	23c0      	movs	r3, #192	; 0xc0
 800187e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001880:	2312      	movs	r3, #18
 8001882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	4619      	mov	r1, r3
 800188e:	480b      	ldr	r0, [pc, #44]	; (80018bc <HAL_I2C_MspInit+0x78>)
 8001890:	f000 fc4a 	bl	8002128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_I2C_MspInit+0x74>)
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_I2C_MspInit+0x74>)
 800189a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800189e:	61d3      	str	r3, [r2, #28]
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_I2C_MspInit+0x74>)
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018ac:	bf00      	nop
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40005400 	.word	0x40005400
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010c00 	.word	0x40010c00

080018c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a20      	ldr	r2, [pc, #128]	; (800195c <HAL_UART_MspInit+0x9c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d139      	bne.n	8001954 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018e0:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <HAL_UART_MspInit+0xa0>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a1e      	ldr	r2, [pc, #120]	; (8001960 <HAL_UART_MspInit+0xa0>)
 80018e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ea:	6193      	str	r3, [r2, #24]
 80018ec:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <HAL_UART_MspInit+0xa0>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f8:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_UART_MspInit+0xa0>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a18      	ldr	r2, [pc, #96]	; (8001960 <HAL_UART_MspInit+0xa0>)
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <HAL_UART_MspInit+0xa0>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001914:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800191a:	2303      	movs	r3, #3
 800191c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f107 0310 	add.w	r3, r7, #16
 8001922:	4619      	mov	r1, r3
 8001924:	480f      	ldr	r0, [pc, #60]	; (8001964 <HAL_UART_MspInit+0xa4>)
 8001926:	f000 fbff 	bl	8002128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800192a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800192e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	4619      	mov	r1, r3
 800193e:	4809      	ldr	r0, [pc, #36]	; (8001964 <HAL_UART_MspInit+0xa4>)
 8001940:	f000 fbf2 	bl	8002128 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	2025      	movs	r0, #37	; 0x25
 800194a:	f000 fb06 	bl	8001f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800194e:	2025      	movs	r0, #37	; 0x25
 8001950:	f000 fb1f 	bl	8001f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001954:	bf00      	nop
 8001956:	3720      	adds	r7, #32
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40013800 	.word	0x40013800
 8001960:	40021000 	.word	0x40021000
 8001964:	40010800 	.word	0x40010800

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800196c:	e7fe      	b.n	800196c <NMI_Handler+0x4>

0800196e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler+0x4>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <UsageFault_Handler+0x4>

08001986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ae:	f000 f9e1 	bl	8001d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019bc:	484f      	ldr	r0, [pc, #316]	; (8001afc <USART1_IRQHandler+0x144>)
 80019be:	f001 ff5f 	bl	8003880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if((seqCheck == 0) && (rxData == '$'))
 80019c2:	4b4f      	ldr	r3, [pc, #316]	; (8001b00 <USART1_IRQHandler+0x148>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d111      	bne.n	80019ee <USART1_IRQHandler+0x36>
 80019ca:	4b4e      	ldr	r3, [pc, #312]	; (8001b04 <USART1_IRQHandler+0x14c>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b24      	cmp	r3, #36	; 0x24
 80019d0:	d10d      	bne.n	80019ee <USART1_IRQHandler+0x36>
  {
	  gpsBuff[seqCheck] = rxData;
 80019d2:	4b4b      	ldr	r3, [pc, #300]	; (8001b00 <USART1_IRQHandler+0x148>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <USART1_IRQHandler+0x14c>)
 80019da:	7819      	ldrb	r1, [r3, #0]
 80019dc:	4b4a      	ldr	r3, [pc, #296]	; (8001b08 <USART1_IRQHandler+0x150>)
 80019de:	5499      	strb	r1, [r3, r2]
	  seqCheck = 1;
 80019e0:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <USART1_IRQHandler+0x148>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
	  rxIntCheck = 1;
 80019e6:	4b49      	ldr	r3, [pc, #292]	; (8001b0c <USART1_IRQHandler+0x154>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
 80019ec:	e083      	b.n	8001af6 <USART1_IRQHandler+0x13e>
  }
   else if((seqCheck == 1) && (rxData == 'G'))
 80019ee:	4b44      	ldr	r3, [pc, #272]	; (8001b00 <USART1_IRQHandler+0x148>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d111      	bne.n	8001a1a <USART1_IRQHandler+0x62>
 80019f6:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <USART1_IRQHandler+0x14c>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b47      	cmp	r3, #71	; 0x47
 80019fc:	d10d      	bne.n	8001a1a <USART1_IRQHandler+0x62>
  {
	  gpsBuff[seqCheck] = rxData;
 80019fe:	4b40      	ldr	r3, [pc, #256]	; (8001b00 <USART1_IRQHandler+0x148>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b3f      	ldr	r3, [pc, #252]	; (8001b04 <USART1_IRQHandler+0x14c>)
 8001a06:	7819      	ldrb	r1, [r3, #0]
 8001a08:	4b3f      	ldr	r3, [pc, #252]	; (8001b08 <USART1_IRQHandler+0x150>)
 8001a0a:	5499      	strb	r1, [r3, r2]
	  seqCheck = 2;
 8001a0c:	4b3c      	ldr	r3, [pc, #240]	; (8001b00 <USART1_IRQHandler+0x148>)
 8001a0e:	2202      	movs	r2, #2
 8001a10:	701a      	strb	r2, [r3, #0]
	  rxIntCheck = 1;
 8001a12:	4b3e      	ldr	r3, [pc, #248]	; (8001b0c <USART1_IRQHandler+0x154>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
 8001a18:	e06d      	b.n	8001af6 <USART1_IRQHandler+0x13e>
  }
  else if((seqCheck == 2) && (rxData == 'P'))
 8001a1a:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <USART1_IRQHandler+0x148>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d111      	bne.n	8001a46 <USART1_IRQHandler+0x8e>
 8001a22:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <USART1_IRQHandler+0x14c>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b50      	cmp	r3, #80	; 0x50
 8001a28:	d10d      	bne.n	8001a46 <USART1_IRQHandler+0x8e>
  {
	  gpsBuff[seqCheck] = rxData;
 8001a2a:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <USART1_IRQHandler+0x148>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <USART1_IRQHandler+0x14c>)
 8001a32:	7819      	ldrb	r1, [r3, #0]
 8001a34:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <USART1_IRQHandler+0x150>)
 8001a36:	5499      	strb	r1, [r3, r2]
	  seqCheck = 3;
 8001a38:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <USART1_IRQHandler+0x148>)
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	701a      	strb	r2, [r3, #0]
	  rxIntCheck = 1;
 8001a3e:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <USART1_IRQHandler+0x154>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	e057      	b.n	8001af6 <USART1_IRQHandler+0x13e>
  }
  else if((seqCheck == 3) && (rxData == 'R'))
 8001a46:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <USART1_IRQHandler+0x148>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d111      	bne.n	8001a72 <USART1_IRQHandler+0xba>
 8001a4e:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <USART1_IRQHandler+0x14c>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b52      	cmp	r3, #82	; 0x52
 8001a54:	d10d      	bne.n	8001a72 <USART1_IRQHandler+0xba>
  {
	  gpsBuff[seqCheck] = rxData;
 8001a56:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <USART1_IRQHandler+0x148>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <USART1_IRQHandler+0x14c>)
 8001a5e:	7819      	ldrb	r1, [r3, #0]
 8001a60:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <USART1_IRQHandler+0x150>)
 8001a62:	5499      	strb	r1, [r3, r2]
	  seqCheck = 4;
 8001a64:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <USART1_IRQHandler+0x148>)
 8001a66:	2204      	movs	r2, #4
 8001a68:	701a      	strb	r2, [r3, #0]
	  rxIntCheck = 1;
 8001a6a:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <USART1_IRQHandler+0x154>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	e041      	b.n	8001af6 <USART1_IRQHandler+0x13e>
  }
  else if((seqCheck == 4) && (rxData == 'M'))
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <USART1_IRQHandler+0x148>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d111      	bne.n	8001a9e <USART1_IRQHandler+0xe6>
 8001a7a:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <USART1_IRQHandler+0x14c>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b4d      	cmp	r3, #77	; 0x4d
 8001a80:	d10d      	bne.n	8001a9e <USART1_IRQHandler+0xe6>
  {
	  gpsBuff[seqCheck] = rxData;
 8001a82:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <USART1_IRQHandler+0x148>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <USART1_IRQHandler+0x14c>)
 8001a8a:	7819      	ldrb	r1, [r3, #0]
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <USART1_IRQHandler+0x150>)
 8001a8e:	5499      	strb	r1, [r3, r2]
	  seqCheck = 5;
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <USART1_IRQHandler+0x148>)
 8001a92:	2205      	movs	r2, #5
 8001a94:	701a      	strb	r2, [r3, #0]
	  rxIntCheck = 1;
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <USART1_IRQHandler+0x154>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	e02b      	b.n	8001af6 <USART1_IRQHandler+0x13e>
  }
  else if((seqCheck == 5) && (rxData == 'C'))
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <USART1_IRQHandler+0x148>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d111      	bne.n	8001aca <USART1_IRQHandler+0x112>
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <USART1_IRQHandler+0x14c>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b43      	cmp	r3, #67	; 0x43
 8001aac:	d10d      	bne.n	8001aca <USART1_IRQHandler+0x112>
  {
	  gpsBuff[seqCheck] = rxData;
 8001aae:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <USART1_IRQHandler+0x148>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <USART1_IRQHandler+0x14c>)
 8001ab6:	7819      	ldrb	r1, [r3, #0]
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <USART1_IRQHandler+0x150>)
 8001aba:	5499      	strb	r1, [r3, r2]
	  seqCheck = 6;
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <USART1_IRQHandler+0x148>)
 8001abe:	2206      	movs	r2, #6
 8001ac0:	701a      	strb	r2, [r3, #0]
	  rxIntCheck = 1;
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <USART1_IRQHandler+0x154>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	e015      	b.n	8001af6 <USART1_IRQHandler+0x13e>
  }
  else if(seqCheck != 6)
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <USART1_IRQHandler+0x148>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d006      	beq.n	8001ae0 <USART1_IRQHandler+0x128>
  {
	  seqCheck = 0;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <USART1_IRQHandler+0x148>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
	  rxIntCheck = 1;
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <USART1_IRQHandler+0x154>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	701a      	strb	r2, [r3, #0]
  //{
	  //rxIntCheck = 1;
  //}

  /* USER CODE END USART1_IRQn 1 */
}
 8001ade:	e00a      	b.n	8001af6 <USART1_IRQHandler+0x13e>
  else if(seqCheck == 6)
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <USART1_IRQHandler+0x148>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b06      	cmp	r3, #6
 8001ae6:	d106      	bne.n	8001af6 <USART1_IRQHandler+0x13e>
	  --rxIntCheck;
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <USART1_IRQHandler+0x154>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <USART1_IRQHandler+0x154>)
 8001af2:	701a      	strb	r2, [r3, #0]
}
 8001af4:	e7ff      	b.n	8001af6 <USART1_IRQHandler+0x13e>
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000264 	.word	0x20000264
 8001b00:	20000431 	.word	0x20000431
 8001b04:	20000433 	.word	0x20000433
 8001b08:	200002a8 	.word	0x200002a8
 8001b0c:	20000010 	.word	0x20000010

08001b10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return 1;
 8001b14:	2301      	movs	r3, #1
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <_kill>:

int _kill(int pid, int sig)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b28:	f002 fa92 	bl	8004050 <__errno>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2216      	movs	r2, #22
 8001b30:	601a      	str	r2, [r3, #0]
  return -1;
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_exit>:

void _exit (int status)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ffe7 	bl	8001b1e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b50:	e7fe      	b.n	8001b50 <_exit+0x12>

08001b52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	e00a      	b.n	8001b7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b64:	f3af 8000 	nop.w
 8001b68:	4601      	mov	r1, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	60ba      	str	r2, [r7, #8]
 8001b70:	b2ca      	uxtb	r2, r1
 8001b72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3301      	adds	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dbf0      	blt.n	8001b64 <_read+0x12>
  }

  return len;
 8001b82:	687b      	ldr	r3, [r7, #4]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e009      	b.n	8001bb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	60ba      	str	r2, [r7, #8]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	dbf1      	blt.n	8001b9e <_write+0x12>
  }
  return len;
 8001bba:	687b      	ldr	r3, [r7, #4]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_close>:

int _close(int file)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bea:	605a      	str	r2, [r3, #4]
  return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <_isatty>:

int _isatty(int file)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <_sbrk+0x5c>)
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <_sbrk+0x60>)
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <_sbrk+0x64>)
 8001c42:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <_sbrk+0x68>)
 8001c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d207      	bcs.n	8001c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c54:	f002 f9fc 	bl	8004050 <__errno>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c62:	e009      	b.n	8001c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <_sbrk+0x64>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <_sbrk+0x64>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <_sbrk+0x64>)
 8001c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c76:	68fb      	ldr	r3, [r7, #12]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20005000 	.word	0x20005000
 8001c84:	00000400 	.word	0x00000400
 8001c88:	2000083c 	.word	0x2000083c
 8001c8c:	20000858 	.word	0x20000858

08001c90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c9c:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c9e:	490d      	ldr	r1, [pc, #52]	; (8001cd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca4:	e002      	b.n	8001cac <LoopCopyDataInit>

08001ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001caa:	3304      	adds	r3, #4

08001cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb0:	d3f9      	bcc.n	8001ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cb4:	4c0a      	ldr	r4, [pc, #40]	; (8001ce0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb8:	e001      	b.n	8001cbe <LoopFillZerobss>

08001cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cbc:	3204      	adds	r2, #4

08001cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc0:	d3fb      	bcc.n	8001cba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cc2:	f7ff ffe5 	bl	8001c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f002 f9c9 	bl	800405c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cca:	f7fe ff29 	bl	8000b20 <main>
  bx lr
 8001cce:	4770      	bx	lr
  ldr r0, =_sdata
 8001cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001cd8:	08008c40 	.word	0x08008c40
  ldr r2, =_sbss
 8001cdc:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001ce0:	20000854 	.word	0x20000854

08001ce4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ce4:	e7fe      	b.n	8001ce4 <ADC1_2_IRQHandler>
	...

08001ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <HAL_Init+0x28>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <HAL_Init+0x28>)
 8001cf2:	f043 0310 	orr.w	r3, r3, #16
 8001cf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf8:	2003      	movs	r0, #3
 8001cfa:	f000 f923 	bl	8001f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cfe:	200f      	movs	r0, #15
 8001d00:	f000 f808 	bl	8001d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d04:	f7ff fd7c 	bl	8001800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40022000 	.word	0x40022000

08001d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_InitTick+0x54>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_InitTick+0x58>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f93b 	bl	8001fae <HAL_SYSTICK_Config>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00e      	b.n	8001d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b0f      	cmp	r3, #15
 8001d46:	d80a      	bhi.n	8001d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d50:	f000 f903 	bl	8001f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d54:	4a06      	ldr	r2, [pc, #24]	; (8001d70 <HAL_InitTick+0x5c>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e000      	b.n	8001d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000014 	.word	0x20000014
 8001d6c:	2000001c 	.word	0x2000001c
 8001d70:	20000018 	.word	0x20000018

08001d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_IncTick+0x1c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_IncTick+0x20>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <HAL_IncTick+0x20>)
 8001d86:	6013      	str	r3, [r2, #0]
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	2000001c 	.word	0x2000001c
 8001d94:	20000840 	.word	0x20000840

08001d98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b02      	ldr	r3, [pc, #8]	; (8001da8 <HAL_GetTick+0x10>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	20000840 	.word	0x20000840

08001dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dde:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	60d3      	str	r3, [r2, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4906      	ldr	r1, [pc, #24]	; (8001e44 <__NVIC_EnableIRQ+0x34>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2001      	movs	r0, #1
 8001e32:	fa00 f202 	lsl.w	r2, r0, r2
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	e000e100 	.word	0xe000e100

08001e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	db0a      	blt.n	8001e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	490c      	ldr	r1, [pc, #48]	; (8001e94 <__NVIC_SetPriority+0x4c>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	0112      	lsls	r2, r2, #4
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e70:	e00a      	b.n	8001e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4908      	ldr	r1, [pc, #32]	; (8001e98 <__NVIC_SetPriority+0x50>)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	3b04      	subs	r3, #4
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	440b      	add	r3, r1
 8001e86:	761a      	strb	r2, [r3, #24]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000e100 	.word	0xe000e100
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f1c3 0307 	rsb	r3, r3, #7
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	bf28      	it	cs
 8001eba:	2304      	movcs	r3, #4
 8001ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d902      	bls.n	8001ecc <NVIC_EncodePriority+0x30>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3b03      	subs	r3, #3
 8001eca:	e000      	b.n	8001ece <NVIC_EncodePriority+0x32>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43da      	mvns	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43d9      	mvns	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	4313      	orrs	r3, r2
         );
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f10:	d301      	bcc.n	8001f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00f      	b.n	8001f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <SysTick_Config+0x40>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1e:	210f      	movs	r1, #15
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f24:	f7ff ff90 	bl	8001e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <SysTick_Config+0x40>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2e:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <SysTick_Config+0x40>)
 8001f30:	2207      	movs	r2, #7
 8001f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	e000e010 	.word	0xe000e010

08001f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ff2d 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f6c:	f7ff ff42 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	6978      	ldr	r0, [r7, #20]
 8001f78:	f7ff ff90 	bl	8001e9c <NVIC_EncodePriority>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff5f 	bl	8001e48 <__NVIC_SetPriority>
}
 8001f8a:	bf00      	nop
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff35 	bl	8001e10 <__NVIC_EnableIRQ>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ffa2 	bl	8001f00 <SysTick_Config>
 8001fbc:	4603      	mov	r3, r0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b085      	sub	sp, #20
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d008      	beq.n	8001fee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2204      	movs	r2, #4
 8001fe0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e020      	b.n	8002030 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 020e 	bic.w	r2, r2, #14
 8001ffc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0201 	bic.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002016:	2101      	movs	r1, #1
 8002018:	fa01 f202 	lsl.w	r2, r1, r2
 800201c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800202e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
	...

0800203c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800204e:	2b02      	cmp	r3, #2
 8002050:	d005      	beq.n	800205e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2204      	movs	r2, #4
 8002056:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	e051      	b.n	8002102 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 020e 	bic.w	r2, r2, #14
 800206c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0201 	bic.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a22      	ldr	r2, [pc, #136]	; (800210c <HAL_DMA_Abort_IT+0xd0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d029      	beq.n	80020dc <HAL_DMA_Abort_IT+0xa0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a20      	ldr	r2, [pc, #128]	; (8002110 <HAL_DMA_Abort_IT+0xd4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d022      	beq.n	80020d8 <HAL_DMA_Abort_IT+0x9c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <HAL_DMA_Abort_IT+0xd8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d01a      	beq.n	80020d2 <HAL_DMA_Abort_IT+0x96>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1d      	ldr	r2, [pc, #116]	; (8002118 <HAL_DMA_Abort_IT+0xdc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d012      	beq.n	80020cc <HAL_DMA_Abort_IT+0x90>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1c      	ldr	r2, [pc, #112]	; (800211c <HAL_DMA_Abort_IT+0xe0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00a      	beq.n	80020c6 <HAL_DMA_Abort_IT+0x8a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <HAL_DMA_Abort_IT+0xe4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d102      	bne.n	80020c0 <HAL_DMA_Abort_IT+0x84>
 80020ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020be:	e00e      	b.n	80020de <HAL_DMA_Abort_IT+0xa2>
 80020c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020c4:	e00b      	b.n	80020de <HAL_DMA_Abort_IT+0xa2>
 80020c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020ca:	e008      	b.n	80020de <HAL_DMA_Abort_IT+0xa2>
 80020cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d0:	e005      	b.n	80020de <HAL_DMA_Abort_IT+0xa2>
 80020d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020d6:	e002      	b.n	80020de <HAL_DMA_Abort_IT+0xa2>
 80020d8:	2310      	movs	r3, #16
 80020da:	e000      	b.n	80020de <HAL_DMA_Abort_IT+0xa2>
 80020dc:	2301      	movs	r3, #1
 80020de:	4a11      	ldr	r2, [pc, #68]	; (8002124 <HAL_DMA_Abort_IT+0xe8>)
 80020e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	4798      	blx	r3
    } 
  }
  return status;
 8002102:	7bfb      	ldrb	r3, [r7, #15]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40020008 	.word	0x40020008
 8002110:	4002001c 	.word	0x4002001c
 8002114:	40020030 	.word	0x40020030
 8002118:	40020044 	.word	0x40020044
 800211c:	40020058 	.word	0x40020058
 8002120:	4002006c 	.word	0x4002006c
 8002124:	40020000 	.word	0x40020000

08002128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002128:	b480      	push	{r7}
 800212a:	b08b      	sub	sp, #44	; 0x2c
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213a:	e169      	b.n	8002410 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800213c:	2201      	movs	r2, #1
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	429a      	cmp	r2, r3
 8002156:	f040 8158 	bne.w	800240a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4a9a      	ldr	r2, [pc, #616]	; (80023c8 <HAL_GPIO_Init+0x2a0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d05e      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002164:	4a98      	ldr	r2, [pc, #608]	; (80023c8 <HAL_GPIO_Init+0x2a0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d875      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800216a:	4a98      	ldr	r2, [pc, #608]	; (80023cc <HAL_GPIO_Init+0x2a4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d058      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002170:	4a96      	ldr	r2, [pc, #600]	; (80023cc <HAL_GPIO_Init+0x2a4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d86f      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 8002176:	4a96      	ldr	r2, [pc, #600]	; (80023d0 <HAL_GPIO_Init+0x2a8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d052      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 800217c:	4a94      	ldr	r2, [pc, #592]	; (80023d0 <HAL_GPIO_Init+0x2a8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d869      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 8002182:	4a94      	ldr	r2, [pc, #592]	; (80023d4 <HAL_GPIO_Init+0x2ac>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d04c      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002188:	4a92      	ldr	r2, [pc, #584]	; (80023d4 <HAL_GPIO_Init+0x2ac>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d863      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800218e:	4a92      	ldr	r2, [pc, #584]	; (80023d8 <HAL_GPIO_Init+0x2b0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d046      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002194:	4a90      	ldr	r2, [pc, #576]	; (80023d8 <HAL_GPIO_Init+0x2b0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d85d      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800219a:	2b12      	cmp	r3, #18
 800219c:	d82a      	bhi.n	80021f4 <HAL_GPIO_Init+0xcc>
 800219e:	2b12      	cmp	r3, #18
 80021a0:	d859      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 80021a2:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <HAL_GPIO_Init+0x80>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	08002223 	.word	0x08002223
 80021ac:	080021fd 	.word	0x080021fd
 80021b0:	0800220f 	.word	0x0800220f
 80021b4:	08002251 	.word	0x08002251
 80021b8:	08002257 	.word	0x08002257
 80021bc:	08002257 	.word	0x08002257
 80021c0:	08002257 	.word	0x08002257
 80021c4:	08002257 	.word	0x08002257
 80021c8:	08002257 	.word	0x08002257
 80021cc:	08002257 	.word	0x08002257
 80021d0:	08002257 	.word	0x08002257
 80021d4:	08002257 	.word	0x08002257
 80021d8:	08002257 	.word	0x08002257
 80021dc:	08002257 	.word	0x08002257
 80021e0:	08002257 	.word	0x08002257
 80021e4:	08002257 	.word	0x08002257
 80021e8:	08002257 	.word	0x08002257
 80021ec:	08002205 	.word	0x08002205
 80021f0:	08002219 	.word	0x08002219
 80021f4:	4a79      	ldr	r2, [pc, #484]	; (80023dc <HAL_GPIO_Init+0x2b4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021fa:	e02c      	b.n	8002256 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	623b      	str	r3, [r7, #32]
          break;
 8002202:	e029      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	3304      	adds	r3, #4
 800220a:	623b      	str	r3, [r7, #32]
          break;
 800220c:	e024      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	3308      	adds	r3, #8
 8002214:	623b      	str	r3, [r7, #32]
          break;
 8002216:	e01f      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	330c      	adds	r3, #12
 800221e:	623b      	str	r3, [r7, #32]
          break;
 8002220:	e01a      	b.n	8002258 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800222a:	2304      	movs	r3, #4
 800222c:	623b      	str	r3, [r7, #32]
          break;
 800222e:	e013      	b.n	8002258 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d105      	bne.n	8002244 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002238:	2308      	movs	r3, #8
 800223a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	611a      	str	r2, [r3, #16]
          break;
 8002242:	e009      	b.n	8002258 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002244:	2308      	movs	r3, #8
 8002246:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	615a      	str	r2, [r3, #20]
          break;
 800224e:	e003      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
          break;
 8002254:	e000      	b.n	8002258 <HAL_GPIO_Init+0x130>
          break;
 8002256:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2bff      	cmp	r3, #255	; 0xff
 800225c:	d801      	bhi.n	8002262 <HAL_GPIO_Init+0x13a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	e001      	b.n	8002266 <HAL_GPIO_Init+0x13e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3304      	adds	r3, #4
 8002266:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2bff      	cmp	r3, #255	; 0xff
 800226c:	d802      	bhi.n	8002274 <HAL_GPIO_Init+0x14c>
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	e002      	b.n	800227a <HAL_GPIO_Init+0x152>
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	3b08      	subs	r3, #8
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	210f      	movs	r1, #15
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	401a      	ands	r2, r3
 800228c:	6a39      	ldr	r1, [r7, #32]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	431a      	orrs	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80b1 	beq.w	800240a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022a8:	4b4d      	ldr	r3, [pc, #308]	; (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	4a4c      	ldr	r2, [pc, #304]	; (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6193      	str	r3, [r2, #24]
 80022b4:	4b4a      	ldr	r3, [pc, #296]	; (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022c0:	4a48      	ldr	r2, [pc, #288]	; (80023e4 <HAL_GPIO_Init+0x2bc>)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	3302      	adds	r3, #2
 80022c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	220f      	movs	r2, #15
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4013      	ands	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a40      	ldr	r2, [pc, #256]	; (80023e8 <HAL_GPIO_Init+0x2c0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <HAL_GPIO_Init+0x1ec>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a3f      	ldr	r2, [pc, #252]	; (80023ec <HAL_GPIO_Init+0x2c4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00d      	beq.n	8002310 <HAL_GPIO_Init+0x1e8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a3e      	ldr	r2, [pc, #248]	; (80023f0 <HAL_GPIO_Init+0x2c8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d007      	beq.n	800230c <HAL_GPIO_Init+0x1e4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a3d      	ldr	r2, [pc, #244]	; (80023f4 <HAL_GPIO_Init+0x2cc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d101      	bne.n	8002308 <HAL_GPIO_Init+0x1e0>
 8002304:	2303      	movs	r3, #3
 8002306:	e006      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002308:	2304      	movs	r3, #4
 800230a:	e004      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 800230c:	2302      	movs	r3, #2
 800230e:	e002      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002314:	2300      	movs	r3, #0
 8002316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002318:	f002 0203 	and.w	r2, r2, #3
 800231c:	0092      	lsls	r2, r2, #2
 800231e:	4093      	lsls	r3, r2
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002326:	492f      	ldr	r1, [pc, #188]	; (80023e4 <HAL_GPIO_Init+0x2bc>)
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3302      	adds	r3, #2
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002340:	4b2d      	ldr	r3, [pc, #180]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	492c      	ldr	r1, [pc, #176]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800234e:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	43db      	mvns	r3, r3
 8002356:	4928      	ldr	r1, [pc, #160]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002358:	4013      	ands	r3, r2
 800235a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d006      	beq.n	8002376 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002368:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	4922      	ldr	r1, [pc, #136]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
 8002374:	e006      	b.n	8002384 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	43db      	mvns	r3, r3
 800237e:	491e      	ldr	r1, [pc, #120]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002380:	4013      	ands	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	4918      	ldr	r1, [pc, #96]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]
 800239c:	e006      	b.n	80023ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800239e:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	4914      	ldr	r1, [pc, #80]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d021      	beq.n	80023fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	490e      	ldr	r1, [pc, #56]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60cb      	str	r3, [r1, #12]
 80023c4:	e021      	b.n	800240a <HAL_GPIO_Init+0x2e2>
 80023c6:	bf00      	nop
 80023c8:	10320000 	.word	0x10320000
 80023cc:	10310000 	.word	0x10310000
 80023d0:	10220000 	.word	0x10220000
 80023d4:	10210000 	.word	0x10210000
 80023d8:	10120000 	.word	0x10120000
 80023dc:	10110000 	.word	0x10110000
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40010000 	.word	0x40010000
 80023e8:	40010800 	.word	0x40010800
 80023ec:	40010c00 	.word	0x40010c00
 80023f0:	40011000 	.word	0x40011000
 80023f4:	40011400 	.word	0x40011400
 80023f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_GPIO_Init+0x304>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	43db      	mvns	r3, r3
 8002404:	4909      	ldr	r1, [pc, #36]	; (800242c <HAL_GPIO_Init+0x304>)
 8002406:	4013      	ands	r3, r2
 8002408:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	3301      	adds	r3, #1
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	fa22 f303 	lsr.w	r3, r2, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	f47f ae8e 	bne.w	800213c <HAL_GPIO_Init+0x14>
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	372c      	adds	r7, #44	; 0x2c
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	40010400 	.word	0x40010400

08002430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
 800243c:	4613      	mov	r3, r2
 800243e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002440:	787b      	ldrb	r3, [r7, #1]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002446:	887a      	ldrh	r2, [r7, #2]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800244c:	e003      	b.n	8002456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800244e:	887b      	ldrh	r3, [r7, #2]
 8002450:	041a      	lsls	r2, r3, #16
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	611a      	str	r2, [r3, #16]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e12b      	b.n	80026ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff f9dc 	bl	8001844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2224      	movs	r2, #36	; 0x24
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0201 	bic.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024c4:	f001 f918 	bl	80036f8 <HAL_RCC_GetPCLK1Freq>
 80024c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4a81      	ldr	r2, [pc, #516]	; (80026d4 <HAL_I2C_Init+0x274>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d807      	bhi.n	80024e4 <HAL_I2C_Init+0x84>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4a80      	ldr	r2, [pc, #512]	; (80026d8 <HAL_I2C_Init+0x278>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	bf94      	ite	ls
 80024dc:	2301      	movls	r3, #1
 80024de:	2300      	movhi	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	e006      	b.n	80024f2 <HAL_I2C_Init+0x92>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4a7d      	ldr	r2, [pc, #500]	; (80026dc <HAL_I2C_Init+0x27c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	bf94      	ite	ls
 80024ec:	2301      	movls	r3, #1
 80024ee:	2300      	movhi	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0e7      	b.n	80026ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4a78      	ldr	r2, [pc, #480]	; (80026e0 <HAL_I2C_Init+0x280>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	0c9b      	lsrs	r3, r3, #18
 8002504:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	430a      	orrs	r2, r1
 8002518:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4a6a      	ldr	r2, [pc, #424]	; (80026d4 <HAL_I2C_Init+0x274>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d802      	bhi.n	8002534 <HAL_I2C_Init+0xd4>
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	3301      	adds	r3, #1
 8002532:	e009      	b.n	8002548 <HAL_I2C_Init+0xe8>
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	4a69      	ldr	r2, [pc, #420]	; (80026e4 <HAL_I2C_Init+0x284>)
 8002540:	fba2 2303 	umull	r2, r3, r2, r3
 8002544:	099b      	lsrs	r3, r3, #6
 8002546:	3301      	adds	r3, #1
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	430b      	orrs	r3, r1
 800254e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800255a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	495c      	ldr	r1, [pc, #368]	; (80026d4 <HAL_I2C_Init+0x274>)
 8002564:	428b      	cmp	r3, r1
 8002566:	d819      	bhi.n	800259c <HAL_I2C_Init+0x13c>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1e59      	subs	r1, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	fbb1 f3f3 	udiv	r3, r1, r3
 8002576:	1c59      	adds	r1, r3, #1
 8002578:	f640 73fc 	movw	r3, #4092	; 0xffc
 800257c:	400b      	ands	r3, r1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <HAL_I2C_Init+0x138>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1e59      	subs	r1, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002590:	3301      	adds	r3, #1
 8002592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002596:	e051      	b.n	800263c <HAL_I2C_Init+0x1dc>
 8002598:	2304      	movs	r3, #4
 800259a:	e04f      	b.n	800263c <HAL_I2C_Init+0x1dc>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d111      	bne.n	80025c8 <HAL_I2C_Init+0x168>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1e58      	subs	r0, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	440b      	add	r3, r1
 80025b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b6:	3301      	adds	r3, #1
 80025b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf0c      	ite	eq
 80025c0:	2301      	moveq	r3, #1
 80025c2:	2300      	movne	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	e012      	b.n	80025ee <HAL_I2C_Init+0x18e>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1e58      	subs	r0, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	0099      	lsls	r1, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	fbb0 f3f3 	udiv	r3, r0, r3
 80025de:	3301      	adds	r3, #1
 80025e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Init+0x196>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e022      	b.n	800263c <HAL_I2C_Init+0x1dc>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10e      	bne.n	800261c <HAL_I2C_Init+0x1bc>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1e58      	subs	r0, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6859      	ldr	r1, [r3, #4]
 8002606:	460b      	mov	r3, r1
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	440b      	add	r3, r1
 800260c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002610:	3301      	adds	r3, #1
 8002612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261a:	e00f      	b.n	800263c <HAL_I2C_Init+0x1dc>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1e58      	subs	r0, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6859      	ldr	r1, [r3, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	0099      	lsls	r1, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002632:	3301      	adds	r3, #1
 8002634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	6809      	ldr	r1, [r1, #0]
 8002640:	4313      	orrs	r3, r2
 8002642:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69da      	ldr	r2, [r3, #28]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800266a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6911      	ldr	r1, [r2, #16]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68d2      	ldr	r2, [r2, #12]
 8002676:	4311      	orrs	r1, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	430b      	orrs	r3, r1
 800267e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	000186a0 	.word	0x000186a0
 80026d8:	001e847f 	.word	0x001e847f
 80026dc:	003d08ff 	.word	0x003d08ff
 80026e0:	431bde83 	.word	0x431bde83
 80026e4:	10624dd3 	.word	0x10624dd3

080026e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	461a      	mov	r2, r3
 80026f4:	460b      	mov	r3, r1
 80026f6:	817b      	strh	r3, [r7, #10]
 80026f8:	4613      	mov	r3, r2
 80026fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026fc:	f7ff fb4c 	bl	8001d98 <HAL_GetTick>
 8002700:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b20      	cmp	r3, #32
 800270c:	f040 80e0 	bne.w	80028d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	2319      	movs	r3, #25
 8002716:	2201      	movs	r2, #1
 8002718:	4970      	ldr	r1, [pc, #448]	; (80028dc <HAL_I2C_Master_Transmit+0x1f4>)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fa92 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002726:	2302      	movs	r3, #2
 8002728:	e0d3      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_I2C_Master_Transmit+0x50>
 8002734:	2302      	movs	r3, #2
 8002736:	e0cc      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d007      	beq.n	800275e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0201 	orr.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800276c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2221      	movs	r2, #33	; 0x21
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2210      	movs	r2, #16
 800277a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	893a      	ldrh	r2, [r7, #8]
 800278e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4a50      	ldr	r2, [pc, #320]	; (80028e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800279e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027a0:	8979      	ldrh	r1, [r7, #10]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	6a3a      	ldr	r2, [r7, #32]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f9ca 	bl	8002b40 <I2C_MasterRequestWrite>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e08d      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027cc:	e066      	b.n	800289c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	6a39      	ldr	r1, [r7, #32]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 fb0c 	bl	8002df0 <I2C_WaitOnTXEFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00d      	beq.n	80027fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d107      	bne.n	80027f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e06b      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	781a      	ldrb	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b04      	cmp	r3, #4
 8002836:	d11b      	bne.n	8002870 <HAL_I2C_Master_Transmit+0x188>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	d017      	beq.n	8002870 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	6a39      	ldr	r1, [r7, #32]
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fafc 	bl	8002e72 <I2C_WaitOnBTFFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00d      	beq.n	800289c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	2b04      	cmp	r3, #4
 8002886:	d107      	bne.n	8002898 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002896:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e01a      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d194      	bne.n	80027ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
  }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	00100002 	.word	0x00100002
 80028e0:	ffff0000 	.word	0xffff0000

080028e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	; 0x28
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	460b      	mov	r3, r1
 80028f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80028f4:	f7ff fa50 	bl	8001d98 <HAL_GetTick>
 80028f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80028fa:	2301      	movs	r3, #1
 80028fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b20      	cmp	r3, #32
 8002908:	f040 8111 	bne.w	8002b2e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2319      	movs	r3, #25
 8002912:	2201      	movs	r2, #1
 8002914:	4988      	ldr	r1, [pc, #544]	; (8002b38 <HAL_I2C_IsDeviceReady+0x254>)
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f994 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002922:	2302      	movs	r3, #2
 8002924:	e104      	b.n	8002b30 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_I2C_IsDeviceReady+0x50>
 8002930:	2302      	movs	r3, #2
 8002932:	e0fd      	b.n	8002b30 <HAL_I2C_IsDeviceReady+0x24c>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b01      	cmp	r3, #1
 8002948:	d007      	beq.n	800295a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0201 	orr.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002968:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2224      	movs	r2, #36	; 0x24
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4a70      	ldr	r2, [pc, #448]	; (8002b3c <HAL_I2C_IsDeviceReady+0x258>)
 800297c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800298c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2200      	movs	r2, #0
 8002996:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f952 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b4:	d103      	bne.n	80029be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e0b6      	b.n	8002b30 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029c2:	897b      	ldrh	r3, [r7, #10]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80029d2:	f7ff f9e1 	bl	8001d98 <HAL_GetTick>
 80029d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	bf0c      	ite	eq
 80029e6:	2301      	moveq	r3, #1
 80029e8:	2300      	movne	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fc:	bf0c      	ite	eq
 80029fe:	2301      	moveq	r3, #1
 8002a00:	2300      	movne	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a06:	e025      	b.n	8002a54 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a08:	f7ff f9c6 	bl	8001d98 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d302      	bcc.n	8002a1e <HAL_I2C_IsDeviceReady+0x13a>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d103      	bne.n	8002a26 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	22a0      	movs	r2, #160	; 0xa0
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2ba0      	cmp	r3, #160	; 0xa0
 8002a5e:	d005      	beq.n	8002a6c <HAL_I2C_IsDeviceReady+0x188>
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d102      	bne.n	8002a6c <HAL_I2C_IsDeviceReady+0x188>
 8002a66:	7dbb      	ldrb	r3, [r7, #22]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0cd      	beq.n	8002a08 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d129      	bne.n	8002ad6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a90:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	2319      	movs	r3, #25
 8002aae:	2201      	movs	r2, #1
 8002ab0:	4921      	ldr	r1, [pc, #132]	; (8002b38 <HAL_I2C_IsDeviceReady+0x254>)
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f8c6 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e036      	b.n	8002b30 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e02c      	b.n	8002b30 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002aee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	2319      	movs	r3, #25
 8002af6:	2201      	movs	r2, #1
 8002af8:	490f      	ldr	r1, [pc, #60]	; (8002b38 <HAL_I2C_IsDeviceReady+0x254>)
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f8a2 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e012      	b.n	8002b30 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	f4ff af32 	bcc.w	800297e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002b2e:	2302      	movs	r3, #2
  }
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	00100002 	.word	0x00100002
 8002b3c:	ffff0000 	.word	0xffff0000

08002b40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d006      	beq.n	8002b6a <I2C_MasterRequestWrite+0x2a>
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d003      	beq.n	8002b6a <I2C_MasterRequestWrite+0x2a>
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b68:	d108      	bne.n	8002b7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e00b      	b.n	8002b94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	2b12      	cmp	r3, #18
 8002b82:	d107      	bne.n	8002b94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f84f 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00d      	beq.n	8002bc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bba:	d103      	bne.n	8002bc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e035      	b.n	8002c34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bd0:	d108      	bne.n	8002be4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bd2:	897b      	ldrh	r3, [r7, #10]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002be0:	611a      	str	r2, [r3, #16]
 8002be2:	e01b      	b.n	8002c1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002be4:	897b      	ldrh	r3, [r7, #10]
 8002be6:	11db      	asrs	r3, r3, #7
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f003 0306 	and.w	r3, r3, #6
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f063 030f 	orn	r3, r3, #15
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	490e      	ldr	r1, [pc, #56]	; (8002c3c <I2C_MasterRequestWrite+0xfc>)
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f875 	bl	8002cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e010      	b.n	8002c34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c12:	897b      	ldrh	r3, [r7, #10]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4907      	ldr	r1, [pc, #28]	; (8002c40 <I2C_MasterRequestWrite+0x100>)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f865 	bl	8002cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	00010008 	.word	0x00010008
 8002c40:	00010002 	.word	0x00010002

08002c44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c54:	e025      	b.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c5c:	d021      	beq.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5e:	f7ff f89b 	bl	8001d98 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d302      	bcc.n	8002c74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d116      	bne.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e023      	b.n	8002cea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d10d      	bne.n	8002cc8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bf0c      	ite	eq
 8002cbe:	2301      	moveq	r3, #1
 8002cc0:	2300      	movne	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	e00c      	b.n	8002ce2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf0c      	ite	eq
 8002cda:	2301      	moveq	r3, #1
 8002cdc:	2300      	movne	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d0b6      	beq.n	8002c56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d00:	e051      	b.n	8002da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d10:	d123      	bne.n	8002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d20:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d2a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f043 0204 	orr.w	r2, r3, #4
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e046      	b.n	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d60:	d021      	beq.n	8002da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d62:	f7ff f819 	bl	8001d98 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d302      	bcc.n	8002d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d116      	bne.n	8002da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f043 0220 	orr.w	r2, r3, #32
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e020      	b.n	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	0c1b      	lsrs	r3, r3, #16
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d10c      	bne.n	8002dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	43da      	mvns	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	bf14      	ite	ne
 8002dc2:	2301      	movne	r3, #1
 8002dc4:	2300      	moveq	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	e00b      	b.n	8002de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	43da      	mvns	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf14      	ite	ne
 8002ddc:	2301      	movne	r3, #1
 8002dde:	2300      	moveq	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d18d      	bne.n	8002d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dfc:	e02d      	b.n	8002e5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f878 	bl	8002ef4 <I2C_IsAcknowledgeFailed>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e02d      	b.n	8002e6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e14:	d021      	beq.n	8002e5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e16:	f7fe ffbf 	bl	8001d98 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d116      	bne.n	8002e5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f043 0220 	orr.w	r2, r3, #32
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e007      	b.n	8002e6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e64:	2b80      	cmp	r3, #128	; 0x80
 8002e66:	d1ca      	bne.n	8002dfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e7e:	e02d      	b.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f837 	bl	8002ef4 <I2C_IsAcknowledgeFailed>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e02d      	b.n	8002eec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e96:	d021      	beq.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e98:	f7fe ff7e 	bl	8001d98 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d302      	bcc.n	8002eae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d116      	bne.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e007      	b.n	8002eec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d1ca      	bne.n	8002e80 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0a:	d11b      	bne.n	8002f44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f043 0204 	orr.w	r2, r3, #4
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e000      	b.n	8002f46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e272      	b.n	8003448 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8087 	beq.w	800307e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f70:	4b92      	ldr	r3, [pc, #584]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 030c 	and.w	r3, r3, #12
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d00c      	beq.n	8002f96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f7c:	4b8f      	ldr	r3, [pc, #572]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d112      	bne.n	8002fae <HAL_RCC_OscConfig+0x5e>
 8002f88:	4b8c      	ldr	r3, [pc, #560]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f94:	d10b      	bne.n	8002fae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f96:	4b89      	ldr	r3, [pc, #548]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d06c      	beq.n	800307c <HAL_RCC_OscConfig+0x12c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d168      	bne.n	800307c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e24c      	b.n	8003448 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb6:	d106      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x76>
 8002fb8:	4b80      	ldr	r3, [pc, #512]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a7f      	ldr	r2, [pc, #508]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	e02e      	b.n	8003024 <HAL_RCC_OscConfig+0xd4>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x98>
 8002fce:	4b7b      	ldr	r3, [pc, #492]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a7a      	ldr	r2, [pc, #488]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b78      	ldr	r3, [pc, #480]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a77      	ldr	r2, [pc, #476]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e01d      	b.n	8003024 <HAL_RCC_OscConfig+0xd4>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff0:	d10c      	bne.n	800300c <HAL_RCC_OscConfig+0xbc>
 8002ff2:	4b72      	ldr	r3, [pc, #456]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a71      	ldr	r2, [pc, #452]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	4b6f      	ldr	r3, [pc, #444]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a6e      	ldr	r2, [pc, #440]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	e00b      	b.n	8003024 <HAL_RCC_OscConfig+0xd4>
 800300c:	4b6b      	ldr	r3, [pc, #428]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a6a      	ldr	r2, [pc, #424]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8003012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b68      	ldr	r3, [pc, #416]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a67      	ldr	r2, [pc, #412]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 800301e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003022:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d013      	beq.n	8003054 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7fe feb4 	bl	8001d98 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003034:	f7fe feb0 	bl	8001d98 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	; 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e200      	b.n	8003448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	4b5d      	ldr	r3, [pc, #372]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0xe4>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fe fea0 	bl	8001d98 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800305c:	f7fe fe9c 	bl	8001d98 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	; 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e1ec      	b.n	8003448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306e:	4b53      	ldr	r3, [pc, #332]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x10c>
 800307a:	e000      	b.n	800307e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d063      	beq.n	8003152 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800308a:	4b4c      	ldr	r3, [pc, #304]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003096:	4b49      	ldr	r3, [pc, #292]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d11c      	bne.n	80030dc <HAL_RCC_OscConfig+0x18c>
 80030a2:	4b46      	ldr	r3, [pc, #280]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d116      	bne.n	80030dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ae:	4b43      	ldr	r3, [pc, #268]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <HAL_RCC_OscConfig+0x176>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d001      	beq.n	80030c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e1c0      	b.n	8003448 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c6:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4939      	ldr	r1, [pc, #228]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030da:	e03a      	b.n	8003152 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d020      	beq.n	8003126 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e4:	4b36      	ldr	r3, [pc, #216]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ea:	f7fe fe55 	bl	8001d98 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f2:	f7fe fe51 	bl	8001d98 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e1a1      	b.n	8003448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003104:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003110:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4927      	ldr	r1, [pc, #156]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8003120:	4313      	orrs	r3, r2
 8003122:	600b      	str	r3, [r1, #0]
 8003124:	e015      	b.n	8003152 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003126:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fe fe34 	bl	8001d98 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003134:	f7fe fe30 	bl	8001d98 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e180      	b.n	8003448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003146:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d03a      	beq.n	80031d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d019      	beq.n	800319a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003166:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <HAL_RCC_OscConfig+0x274>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316c:	f7fe fe14 	bl	8001d98 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003174:	f7fe fe10 	bl	8001d98 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e160      	b.n	8003448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <HAL_RCC_OscConfig+0x26c>)
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003192:	2001      	movs	r0, #1
 8003194:	f000 fad8 	bl	8003748 <RCC_Delay>
 8003198:	e01c      	b.n	80031d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <HAL_RCC_OscConfig+0x274>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a0:	f7fe fdfa 	bl	8001d98 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a6:	e00f      	b.n	80031c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a8:	f7fe fdf6 	bl	8001d98 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d908      	bls.n	80031c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e146      	b.n	8003448 <HAL_RCC_OscConfig+0x4f8>
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
 80031c0:	42420000 	.word	0x42420000
 80031c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c8:	4b92      	ldr	r3, [pc, #584]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e9      	bne.n	80031a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80a6 	beq.w	800332e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e2:	2300      	movs	r3, #0
 80031e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e6:	4b8b      	ldr	r3, [pc, #556]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10d      	bne.n	800320e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f2:	4b88      	ldr	r3, [pc, #544]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	4a87      	ldr	r2, [pc, #540]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fc:	61d3      	str	r3, [r2, #28]
 80031fe:	4b85      	ldr	r3, [pc, #532]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320a:	2301      	movs	r3, #1
 800320c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320e:	4b82      	ldr	r3, [pc, #520]	; (8003418 <HAL_RCC_OscConfig+0x4c8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003216:	2b00      	cmp	r3, #0
 8003218:	d118      	bne.n	800324c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800321a:	4b7f      	ldr	r3, [pc, #508]	; (8003418 <HAL_RCC_OscConfig+0x4c8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a7e      	ldr	r2, [pc, #504]	; (8003418 <HAL_RCC_OscConfig+0x4c8>)
 8003220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003226:	f7fe fdb7 	bl	8001d98 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322e:	f7fe fdb3 	bl	8001d98 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b64      	cmp	r3, #100	; 0x64
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e103      	b.n	8003448 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003240:	4b75      	ldr	r3, [pc, #468]	; (8003418 <HAL_RCC_OscConfig+0x4c8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d106      	bne.n	8003262 <HAL_RCC_OscConfig+0x312>
 8003254:	4b6f      	ldr	r3, [pc, #444]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	4a6e      	ldr	r2, [pc, #440]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6213      	str	r3, [r2, #32]
 8003260:	e02d      	b.n	80032be <HAL_RCC_OscConfig+0x36e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10c      	bne.n	8003284 <HAL_RCC_OscConfig+0x334>
 800326a:	4b6a      	ldr	r3, [pc, #424]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4a69      	ldr	r2, [pc, #420]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	6213      	str	r3, [r2, #32]
 8003276:	4b67      	ldr	r3, [pc, #412]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4a66      	ldr	r2, [pc, #408]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	f023 0304 	bic.w	r3, r3, #4
 8003280:	6213      	str	r3, [r2, #32]
 8003282:	e01c      	b.n	80032be <HAL_RCC_OscConfig+0x36e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b05      	cmp	r3, #5
 800328a:	d10c      	bne.n	80032a6 <HAL_RCC_OscConfig+0x356>
 800328c:	4b61      	ldr	r3, [pc, #388]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	4a60      	ldr	r2, [pc, #384]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 8003292:	f043 0304 	orr.w	r3, r3, #4
 8003296:	6213      	str	r3, [r2, #32]
 8003298:	4b5e      	ldr	r3, [pc, #376]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	4a5d      	ldr	r2, [pc, #372]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	6213      	str	r3, [r2, #32]
 80032a4:	e00b      	b.n	80032be <HAL_RCC_OscConfig+0x36e>
 80032a6:	4b5b      	ldr	r3, [pc, #364]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	4a5a      	ldr	r2, [pc, #360]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	6213      	str	r3, [r2, #32]
 80032b2:	4b58      	ldr	r3, [pc, #352]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	4a57      	ldr	r2, [pc, #348]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	f023 0304 	bic.w	r3, r3, #4
 80032bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d015      	beq.n	80032f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c6:	f7fe fd67 	bl	8001d98 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032cc:	e00a      	b.n	80032e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ce:	f7fe fd63 	bl	8001d98 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e0b1      	b.n	8003448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e4:	4b4b      	ldr	r3, [pc, #300]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0ee      	beq.n	80032ce <HAL_RCC_OscConfig+0x37e>
 80032f0:	e014      	b.n	800331c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f2:	f7fe fd51 	bl	8001d98 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f8:	e00a      	b.n	8003310 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fa:	f7fe fd4d 	bl	8001d98 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	f241 3288 	movw	r2, #5000	; 0x1388
 8003308:	4293      	cmp	r3, r2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e09b      	b.n	8003448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003310:	4b40      	ldr	r3, [pc, #256]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1ee      	bne.n	80032fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800331c:	7dfb      	ldrb	r3, [r7, #23]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d105      	bne.n	800332e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003322:	4b3c      	ldr	r3, [pc, #240]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	4a3b      	ldr	r2, [pc, #236]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800332c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8087 	beq.w	8003446 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003338:	4b36      	ldr	r3, [pc, #216]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b08      	cmp	r3, #8
 8003342:	d061      	beq.n	8003408 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d146      	bne.n	80033da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334c:	4b33      	ldr	r3, [pc, #204]	; (800341c <HAL_RCC_OscConfig+0x4cc>)
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003352:	f7fe fd21 	bl	8001d98 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335a:	f7fe fd1d 	bl	8001d98 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e06d      	b.n	8003448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800336c:	4b29      	ldr	r3, [pc, #164]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1f0      	bne.n	800335a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003380:	d108      	bne.n	8003394 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003382:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	4921      	ldr	r1, [pc, #132]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 8003390:	4313      	orrs	r3, r2
 8003392:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003394:	4b1f      	ldr	r3, [pc, #124]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a19      	ldr	r1, [r3, #32]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	430b      	orrs	r3, r1
 80033a6:	491b      	ldr	r1, [pc, #108]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ac:	4b1b      	ldr	r3, [pc, #108]	; (800341c <HAL_RCC_OscConfig+0x4cc>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b2:	f7fe fcf1 	bl	8001d98 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ba:	f7fe fced 	bl	8001d98 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e03d      	b.n	8003448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033cc:	4b11      	ldr	r3, [pc, #68]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x46a>
 80033d8:	e035      	b.n	8003446 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_RCC_OscConfig+0x4cc>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fe fcda 	bl	8001d98 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e8:	f7fe fcd6 	bl	8001d98 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e026      	b.n	8003448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_RCC_OscConfig+0x4c4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x498>
 8003406:	e01e      	b.n	8003446 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d107      	bne.n	8003420 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e019      	b.n	8003448 <HAL_RCC_OscConfig+0x4f8>
 8003414:	40021000 	.word	0x40021000
 8003418:	40007000 	.word	0x40007000
 800341c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_OscConfig+0x500>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	429a      	cmp	r2, r3
 8003432:	d106      	bne.n	8003442 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d001      	beq.n	8003446 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000

08003454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0d0      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003468:	4b6a      	ldr	r3, [pc, #424]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d910      	bls.n	8003498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b67      	ldr	r3, [pc, #412]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 0207 	bic.w	r2, r3, #7
 800347e:	4965      	ldr	r1, [pc, #404]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b63      	ldr	r3, [pc, #396]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0b8      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d020      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b0:	4b59      	ldr	r3, [pc, #356]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a58      	ldr	r2, [pc, #352]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034c8:	4b53      	ldr	r3, [pc, #332]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4a52      	ldr	r2, [pc, #328]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d4:	4b50      	ldr	r3, [pc, #320]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	494d      	ldr	r1, [pc, #308]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d040      	beq.n	8003574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d107      	bne.n	800350a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fa:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d115      	bne.n	8003532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e07f      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003512:	4b41      	ldr	r3, [pc, #260]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e073      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003522:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e06b      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003532:	4b39      	ldr	r3, [pc, #228]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f023 0203 	bic.w	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4936      	ldr	r1, [pc, #216]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	4313      	orrs	r3, r2
 8003542:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003544:	f7fe fc28 	bl	8001d98 <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354a:	e00a      	b.n	8003562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354c:	f7fe fc24 	bl	8001d98 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	; 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e053      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 020c 	and.w	r2, r3, #12
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	429a      	cmp	r2, r3
 8003572:	d1eb      	bne.n	800354c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003574:	4b27      	ldr	r3, [pc, #156]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d210      	bcs.n	80035a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003582:	4b24      	ldr	r3, [pc, #144]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 0207 	bic.w	r2, r3, #7
 800358a:	4922      	ldr	r1, [pc, #136]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e032      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4916      	ldr	r1, [pc, #88]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	490e      	ldr	r1, [pc, #56]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035e2:	f000 f821 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 80035e6:	4602      	mov	r2, r0
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	490a      	ldr	r1, [pc, #40]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80035f4:	5ccb      	ldrb	r3, [r1, r3]
 80035f6:	fa22 f303 	lsr.w	r3, r2, r3
 80035fa:	4a09      	ldr	r2, [pc, #36]	; (8003620 <HAL_RCC_ClockConfig+0x1cc>)
 80035fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_ClockConfig+0x1d0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe fb86 	bl	8001d14 <HAL_InitTick>

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40022000 	.word	0x40022000
 8003618:	40021000 	.word	0x40021000
 800361c:	08008794 	.word	0x08008794
 8003620:	20000014 	.word	0x20000014
 8003624:	20000018 	.word	0x20000018

08003628 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003628:	b490      	push	{r4, r7}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800362e:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003630:	1d3c      	adds	r4, r7, #4
 8003632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003638:	f240 2301 	movw	r3, #513	; 0x201
 800363c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	2300      	movs	r3, #0
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003652:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b04      	cmp	r3, #4
 8003660:	d002      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x40>
 8003662:	2b08      	cmp	r3, #8
 8003664:	d003      	beq.n	800366e <HAL_RCC_GetSysClockFreq+0x46>
 8003666:	e02b      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003668:	4b1c      	ldr	r3, [pc, #112]	; (80036dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800366a:	623b      	str	r3, [r7, #32]
      break;
 800366c:	e02b      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	0c9b      	lsrs	r3, r3, #18
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	3328      	adds	r3, #40	; 0x28
 8003678:	443b      	add	r3, r7
 800367a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800367e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d012      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	0c5b      	lsrs	r3, r3, #17
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	3328      	adds	r3, #40	; 0x28
 8003696:	443b      	add	r3, r7
 8003698:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800369c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	4a0e      	ldr	r2, [pc, #56]	; (80036dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80036a2:	fb03 f202 	mul.w	r2, r3, r2
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
 80036ae:	e004      	b.n	80036ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	4a0b      	ldr	r2, [pc, #44]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b4:	fb02 f303 	mul.w	r3, r2, r3
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	623b      	str	r3, [r7, #32]
      break;
 80036be:	e002      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036c0:	4b06      	ldr	r3, [pc, #24]	; (80036dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80036c2:	623b      	str	r3, [r7, #32]
      break;
 80036c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036c6:	6a3b      	ldr	r3, [r7, #32]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3728      	adds	r7, #40	; 0x28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc90      	pop	{r4, r7}
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	080072bc 	.word	0x080072bc
 80036d8:	40021000 	.word	0x40021000
 80036dc:	007a1200 	.word	0x007a1200
 80036e0:	003d0900 	.word	0x003d0900

080036e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036e8:	4b02      	ldr	r3, [pc, #8]	; (80036f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80036ea:	681b      	ldr	r3, [r3, #0]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr
 80036f4:	20000014 	.word	0x20000014

080036f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036fc:	f7ff fff2 	bl	80036e4 <HAL_RCC_GetHCLKFreq>
 8003700:	4602      	mov	r2, r0
 8003702:	4b05      	ldr	r3, [pc, #20]	; (8003718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	0a1b      	lsrs	r3, r3, #8
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	4903      	ldr	r1, [pc, #12]	; (800371c <HAL_RCC_GetPCLK1Freq+0x24>)
 800370e:	5ccb      	ldrb	r3, [r1, r3]
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003714:	4618      	mov	r0, r3
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40021000 	.word	0x40021000
 800371c:	080087a4 	.word	0x080087a4

08003720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003724:	f7ff ffde 	bl	80036e4 <HAL_RCC_GetHCLKFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	0adb      	lsrs	r3, r3, #11
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	4903      	ldr	r1, [pc, #12]	; (8003744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800373c:	4618      	mov	r0, r3
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000
 8003744:	080087a4 	.word	0x080087a4

08003748 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <RCC_Delay+0x34>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <RCC_Delay+0x38>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	0a5b      	lsrs	r3, r3, #9
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003764:	bf00      	nop
  }
  while (Delay --);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1e5a      	subs	r2, r3, #1
 800376a:	60fa      	str	r2, [r7, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1f9      	bne.n	8003764 <RCC_Delay+0x1c>
}
 8003770:	bf00      	nop
 8003772:	bf00      	nop
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr
 800377c:	20000014 	.word	0x20000014
 8003780:	10624dd3 	.word	0x10624dd3

08003784 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e03f      	b.n	8003816 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fe f888 	bl	80018c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2224      	movs	r2, #36	; 0x24
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fbb3 	bl	8003f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695a      	ldr	r2, [r3, #20]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	4613      	mov	r3, r2
 800382a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b20      	cmp	r3, #32
 8003836:	d11d      	bne.n	8003874 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_UART_Receive_IT+0x26>
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e016      	b.n	8003876 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_UART_Receive_IT+0x38>
 8003852:	2302      	movs	r3, #2
 8003854:	e00f      	b.n	8003876 <HAL_UART_Receive_IT+0x58>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	461a      	mov	r2, r3
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f9d8 	bl	8003c20 <UART_Start_Receive_IT>
 8003870:	4603      	mov	r3, r0
 8003872:	e000      	b.n	8003876 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003874:	2302      	movs	r3, #2
  }
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08a      	sub	sp, #40	; 0x28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10d      	bne.n	80038d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_UART_IRQHandler+0x52>
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa88 	bl	8003de0 <UART_Receive_IT>
      return;
 80038d0:	e17b      	b.n	8003bca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80b1 	beq.w	8003a3c <HAL_UART_IRQHandler+0x1bc>
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d105      	bne.n	80038f0 <HAL_UART_IRQHandler+0x70>
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 80a6 	beq.w	8003a3c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <HAL_UART_IRQHandler+0x90>
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f043 0201 	orr.w	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_UART_IRQHandler+0xb0>
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f043 0202 	orr.w	r2, r3, #2
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_UART_IRQHandler+0xd0>
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	f043 0204 	orr.w	r2, r3, #4
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00f      	beq.n	800397a <HAL_UART_IRQHandler+0xfa>
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	d104      	bne.n	800396e <HAL_UART_IRQHandler+0xee>
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f043 0208 	orr.w	r2, r3, #8
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 811e 	beq.w	8003bc0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <HAL_UART_IRQHandler+0x11e>
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fa21 	bl	8003de0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf14      	ite	ne
 80039ac:	2301      	movne	r3, #1
 80039ae:	2300      	moveq	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d102      	bne.n	80039c6 <HAL_UART_IRQHandler+0x146>
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d031      	beq.n	8003a2a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f963 	bl	8003c92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d023      	beq.n	8003a22 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695a      	ldr	r2, [r3, #20]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d013      	beq.n	8003a1a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	4a76      	ldr	r2, [pc, #472]	; (8003bd0 <HAL_UART_IRQHandler+0x350>)
 80039f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe fb1c 	bl	800203c <HAL_DMA_Abort_IT>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d016      	beq.n	8003a38 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a14:	4610      	mov	r0, r2
 8003a16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	e00e      	b.n	8003a38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f8ec 	bl	8003bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	e00a      	b.n	8003a38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8e8 	bl	8003bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	e006      	b.n	8003a38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8e4 	bl	8003bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a36:	e0c3      	b.n	8003bc0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a38:	bf00      	nop
    return;
 8003a3a:	e0c1      	b.n	8003bc0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	f040 80a1 	bne.w	8003b88 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 809b 	beq.w	8003b88 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8095 	beq.w	8003b88 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d04e      	beq.n	8003b20 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003a8c:	8a3b      	ldrh	r3, [r7, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8098 	beq.w	8003bc4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a98:	8a3a      	ldrh	r2, [r7, #16]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	f080 8092 	bcs.w	8003bc4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8a3a      	ldrh	r2, [r7, #16]
 8003aa4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d02b      	beq.n	8003b08 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003abe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0201 	bic.w	r2, r2, #1
 8003ace:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ade:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0210 	bic.w	r2, r2, #16
 8003afc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fa5f 	bl	8001fc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	4619      	mov	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f876 	bl	8003c0a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b1e:	e051      	b.n	8003bc4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d047      	beq.n	8003bc8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003b38:	8a7b      	ldrh	r3, [r7, #18]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d044      	beq.n	8003bc8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b4c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0210 	bic.w	r2, r2, #16
 8003b7a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b7c:	8a7b      	ldrh	r3, [r7, #18]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f842 	bl	8003c0a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b86:	e01f      	b.n	8003bc8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x324>
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f8b8 	bl	8003d12 <UART_Transmit_IT>
    return;
 8003ba2:	e012      	b.n	8003bca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00d      	beq.n	8003bca <HAL_UART_IRQHandler+0x34a>
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f8f9 	bl	8003db0 <UART_EndTransmit_IT>
    return;
 8003bbe:	e004      	b.n	8003bca <HAL_UART_IRQHandler+0x34a>
    return;
 8003bc0:	bf00      	nop
 8003bc2:	e002      	b.n	8003bca <HAL_UART_IRQHandler+0x34a>
      return;
 8003bc4:	bf00      	nop
 8003bc6:	e000      	b.n	8003bca <HAL_UART_IRQHandler+0x34a>
      return;
 8003bc8:	bf00      	nop
  }
}
 8003bca:	3728      	adds	r7, #40	; 0x28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	08003ceb 	.word	0x08003ceb

08003bd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr

08003be6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr

08003c0a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	460b      	mov	r3, r1
 8003c14:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	88fa      	ldrh	r2, [r7, #6]
 8003c38:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	88fa      	ldrh	r2, [r7, #6]
 8003c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2222      	movs	r2, #34	; 0x22
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c64:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695a      	ldr	r2, [r3, #20]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0201 	orr.w	r2, r2, #1
 8003c74:	615a      	str	r2, [r3, #20]

  /* Enable the UART 1 Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0220 	orr.w	r2, r2, #32
 8003c84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ca8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0201 	bic.w	r2, r2, #1
 8003cb8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d107      	bne.n	8003cd2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0210 	bic.w	r2, r2, #16
 8003cd0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr

08003cea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f7ff ff77 	bl	8003bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b085      	sub	sp, #20
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b21      	cmp	r3, #33	; 0x21
 8003d24:	d13e      	bne.n	8003da4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2e:	d114      	bne.n	8003d5a <UART_Transmit_IT+0x48>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d110      	bne.n	8003d5a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	1c9a      	adds	r2, r3, #2
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	621a      	str	r2, [r3, #32]
 8003d58:	e008      	b.n	8003d6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	1c59      	adds	r1, r3, #1
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6211      	str	r1, [r2, #32]
 8003d64:	781a      	ldrb	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10f      	bne.n	8003da0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	e000      	b.n	8003da6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003da4:	2302      	movs	r3, #2
  }
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff feff 	bl	8003bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b22      	cmp	r3, #34	; 0x22
 8003df2:	f040 8099 	bne.w	8003f28 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfe:	d117      	bne.n	8003e30 <UART_Receive_IT+0x50>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d113      	bne.n	8003e30 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	1c9a      	adds	r2, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	629a      	str	r2, [r3, #40]	; 0x28
 8003e2e:	e026      	b.n	8003e7e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e42:	d007      	beq.n	8003e54 <UART_Receive_IT+0x74>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <UART_Receive_IT+0x82>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d106      	bne.n	8003e62 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	701a      	strb	r2, [r3, #0]
 8003e60:	e008      	b.n	8003e74 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d148      	bne.n	8003f24 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0220 	bic.w	r2, r2, #32
 8003ea0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0201 	bic.w	r2, r2, #1
 8003ec0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d123      	bne.n	8003f1a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0210 	bic.w	r2, r2, #16
 8003ee6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	2b10      	cmp	r3, #16
 8003ef4:	d10a      	bne.n	8003f0c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f10:	4619      	mov	r1, r3
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff fe79 	bl	8003c0a <HAL_UARTEx_RxEventCallback>
 8003f18:	e002      	b.n	8003f20 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fe63 	bl	8003be6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e002      	b.n	8003f2a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	e000      	b.n	8003f2a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003f28:	2302      	movs	r3, #2
  }
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f6e:	f023 030c 	bic.w	r3, r3, #12
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6812      	ldr	r2, [r2, #0]
 8003f76:	68b9      	ldr	r1, [r7, #8]
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a2c      	ldr	r2, [pc, #176]	; (8004048 <UART_SetConfig+0x114>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d103      	bne.n	8003fa4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f9c:	f7ff fbc0 	bl	8003720 <HAL_RCC_GetPCLK2Freq>
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	e002      	b.n	8003faa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fa4:	f7ff fba8 	bl	80036f8 <HAL_RCC_GetPCLK1Freq>
 8003fa8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009a      	lsls	r2, r3, #2
 8003fb4:	441a      	add	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc0:	4a22      	ldr	r2, [pc, #136]	; (800404c <UART_SetConfig+0x118>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	0119      	lsls	r1, r3, #4
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009a      	lsls	r2, r3, #2
 8003fd4:	441a      	add	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fe0:	4b1a      	ldr	r3, [pc, #104]	; (800404c <UART_SetConfig+0x118>)
 8003fe2:	fba3 0302 	umull	r0, r3, r3, r2
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	2064      	movs	r0, #100	; 0x64
 8003fea:	fb00 f303 	mul.w	r3, r0, r3
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	3332      	adds	r3, #50	; 0x32
 8003ff4:	4a15      	ldr	r2, [pc, #84]	; (800404c <UART_SetConfig+0x118>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004000:	4419      	add	r1, r3
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	009a      	lsls	r2, r3, #2
 800400c:	441a      	add	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	fbb2 f2f3 	udiv	r2, r2, r3
 8004018:	4b0c      	ldr	r3, [pc, #48]	; (800404c <UART_SetConfig+0x118>)
 800401a:	fba3 0302 	umull	r0, r3, r3, r2
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	2064      	movs	r0, #100	; 0x64
 8004022:	fb00 f303 	mul.w	r3, r0, r3
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	3332      	adds	r3, #50	; 0x32
 800402c:	4a07      	ldr	r2, [pc, #28]	; (800404c <UART_SetConfig+0x118>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	f003 020f 	and.w	r2, r3, #15
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	440a      	add	r2, r1
 800403e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40013800 	.word	0x40013800
 800404c:	51eb851f 	.word	0x51eb851f

08004050 <__errno>:
 8004050:	4b01      	ldr	r3, [pc, #4]	; (8004058 <__errno+0x8>)
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	20000020 	.word	0x20000020

0800405c <__libc_init_array>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	2600      	movs	r6, #0
 8004060:	4d0c      	ldr	r5, [pc, #48]	; (8004094 <__libc_init_array+0x38>)
 8004062:	4c0d      	ldr	r4, [pc, #52]	; (8004098 <__libc_init_array+0x3c>)
 8004064:	1b64      	subs	r4, r4, r5
 8004066:	10a4      	asrs	r4, r4, #2
 8004068:	42a6      	cmp	r6, r4
 800406a:	d109      	bne.n	8004080 <__libc_init_array+0x24>
 800406c:	f003 f8e4 	bl	8007238 <_init>
 8004070:	2600      	movs	r6, #0
 8004072:	4d0a      	ldr	r5, [pc, #40]	; (800409c <__libc_init_array+0x40>)
 8004074:	4c0a      	ldr	r4, [pc, #40]	; (80040a0 <__libc_init_array+0x44>)
 8004076:	1b64      	subs	r4, r4, r5
 8004078:	10a4      	asrs	r4, r4, #2
 800407a:	42a6      	cmp	r6, r4
 800407c:	d105      	bne.n	800408a <__libc_init_array+0x2e>
 800407e:	bd70      	pop	{r4, r5, r6, pc}
 8004080:	f855 3b04 	ldr.w	r3, [r5], #4
 8004084:	4798      	blx	r3
 8004086:	3601      	adds	r6, #1
 8004088:	e7ee      	b.n	8004068 <__libc_init_array+0xc>
 800408a:	f855 3b04 	ldr.w	r3, [r5], #4
 800408e:	4798      	blx	r3
 8004090:	3601      	adds	r6, #1
 8004092:	e7f2      	b.n	800407a <__libc_init_array+0x1e>
 8004094:	08008c38 	.word	0x08008c38
 8004098:	08008c38 	.word	0x08008c38
 800409c:	08008c38 	.word	0x08008c38
 80040a0:	08008c3c 	.word	0x08008c3c

080040a4 <malloc>:
 80040a4:	4b02      	ldr	r3, [pc, #8]	; (80040b0 <malloc+0xc>)
 80040a6:	4601      	mov	r1, r0
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	f000 b873 	b.w	8004194 <_malloc_r>
 80040ae:	bf00      	nop
 80040b0:	20000020 	.word	0x20000020

080040b4 <memset>:
 80040b4:	4603      	mov	r3, r0
 80040b6:	4402      	add	r2, r0
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d100      	bne.n	80040be <memset+0xa>
 80040bc:	4770      	bx	lr
 80040be:	f803 1b01 	strb.w	r1, [r3], #1
 80040c2:	e7f9      	b.n	80040b8 <memset+0x4>

080040c4 <_free_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	4605      	mov	r5, r0
 80040c8:	2900      	cmp	r1, #0
 80040ca:	d040      	beq.n	800414e <_free_r+0x8a>
 80040cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040d0:	1f0c      	subs	r4, r1, #4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	bfb8      	it	lt
 80040d6:	18e4      	addlt	r4, r4, r3
 80040d8:	f001 fb30 	bl	800573c <__malloc_lock>
 80040dc:	4a1c      	ldr	r2, [pc, #112]	; (8004150 <_free_r+0x8c>)
 80040de:	6813      	ldr	r3, [r2, #0]
 80040e0:	b933      	cbnz	r3, 80040f0 <_free_r+0x2c>
 80040e2:	6063      	str	r3, [r4, #4]
 80040e4:	6014      	str	r4, [r2, #0]
 80040e6:	4628      	mov	r0, r5
 80040e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040ec:	f001 bb2c 	b.w	8005748 <__malloc_unlock>
 80040f0:	42a3      	cmp	r3, r4
 80040f2:	d908      	bls.n	8004106 <_free_r+0x42>
 80040f4:	6820      	ldr	r0, [r4, #0]
 80040f6:	1821      	adds	r1, r4, r0
 80040f8:	428b      	cmp	r3, r1
 80040fa:	bf01      	itttt	eq
 80040fc:	6819      	ldreq	r1, [r3, #0]
 80040fe:	685b      	ldreq	r3, [r3, #4]
 8004100:	1809      	addeq	r1, r1, r0
 8004102:	6021      	streq	r1, [r4, #0]
 8004104:	e7ed      	b.n	80040e2 <_free_r+0x1e>
 8004106:	461a      	mov	r2, r3
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	b10b      	cbz	r3, 8004110 <_free_r+0x4c>
 800410c:	42a3      	cmp	r3, r4
 800410e:	d9fa      	bls.n	8004106 <_free_r+0x42>
 8004110:	6811      	ldr	r1, [r2, #0]
 8004112:	1850      	adds	r0, r2, r1
 8004114:	42a0      	cmp	r0, r4
 8004116:	d10b      	bne.n	8004130 <_free_r+0x6c>
 8004118:	6820      	ldr	r0, [r4, #0]
 800411a:	4401      	add	r1, r0
 800411c:	1850      	adds	r0, r2, r1
 800411e:	4283      	cmp	r3, r0
 8004120:	6011      	str	r1, [r2, #0]
 8004122:	d1e0      	bne.n	80040e6 <_free_r+0x22>
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	4401      	add	r1, r0
 800412a:	6011      	str	r1, [r2, #0]
 800412c:	6053      	str	r3, [r2, #4]
 800412e:	e7da      	b.n	80040e6 <_free_r+0x22>
 8004130:	d902      	bls.n	8004138 <_free_r+0x74>
 8004132:	230c      	movs	r3, #12
 8004134:	602b      	str	r3, [r5, #0]
 8004136:	e7d6      	b.n	80040e6 <_free_r+0x22>
 8004138:	6820      	ldr	r0, [r4, #0]
 800413a:	1821      	adds	r1, r4, r0
 800413c:	428b      	cmp	r3, r1
 800413e:	bf01      	itttt	eq
 8004140:	6819      	ldreq	r1, [r3, #0]
 8004142:	685b      	ldreq	r3, [r3, #4]
 8004144:	1809      	addeq	r1, r1, r0
 8004146:	6021      	streq	r1, [r4, #0]
 8004148:	6063      	str	r3, [r4, #4]
 800414a:	6054      	str	r4, [r2, #4]
 800414c:	e7cb      	b.n	80040e6 <_free_r+0x22>
 800414e:	bd38      	pop	{r3, r4, r5, pc}
 8004150:	20000844 	.word	0x20000844

08004154 <sbrk_aligned>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	4e0e      	ldr	r6, [pc, #56]	; (8004190 <sbrk_aligned+0x3c>)
 8004158:	460c      	mov	r4, r1
 800415a:	6831      	ldr	r1, [r6, #0]
 800415c:	4605      	mov	r5, r0
 800415e:	b911      	cbnz	r1, 8004166 <sbrk_aligned+0x12>
 8004160:	f000 f88c 	bl	800427c <_sbrk_r>
 8004164:	6030      	str	r0, [r6, #0]
 8004166:	4621      	mov	r1, r4
 8004168:	4628      	mov	r0, r5
 800416a:	f000 f887 	bl	800427c <_sbrk_r>
 800416e:	1c43      	adds	r3, r0, #1
 8004170:	d00a      	beq.n	8004188 <sbrk_aligned+0x34>
 8004172:	1cc4      	adds	r4, r0, #3
 8004174:	f024 0403 	bic.w	r4, r4, #3
 8004178:	42a0      	cmp	r0, r4
 800417a:	d007      	beq.n	800418c <sbrk_aligned+0x38>
 800417c:	1a21      	subs	r1, r4, r0
 800417e:	4628      	mov	r0, r5
 8004180:	f000 f87c 	bl	800427c <_sbrk_r>
 8004184:	3001      	adds	r0, #1
 8004186:	d101      	bne.n	800418c <sbrk_aligned+0x38>
 8004188:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800418c:	4620      	mov	r0, r4
 800418e:	bd70      	pop	{r4, r5, r6, pc}
 8004190:	20000848 	.word	0x20000848

08004194 <_malloc_r>:
 8004194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004198:	1ccd      	adds	r5, r1, #3
 800419a:	f025 0503 	bic.w	r5, r5, #3
 800419e:	3508      	adds	r5, #8
 80041a0:	2d0c      	cmp	r5, #12
 80041a2:	bf38      	it	cc
 80041a4:	250c      	movcc	r5, #12
 80041a6:	2d00      	cmp	r5, #0
 80041a8:	4607      	mov	r7, r0
 80041aa:	db01      	blt.n	80041b0 <_malloc_r+0x1c>
 80041ac:	42a9      	cmp	r1, r5
 80041ae:	d905      	bls.n	80041bc <_malloc_r+0x28>
 80041b0:	230c      	movs	r3, #12
 80041b2:	2600      	movs	r6, #0
 80041b4:	603b      	str	r3, [r7, #0]
 80041b6:	4630      	mov	r0, r6
 80041b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041bc:	4e2e      	ldr	r6, [pc, #184]	; (8004278 <_malloc_r+0xe4>)
 80041be:	f001 fabd 	bl	800573c <__malloc_lock>
 80041c2:	6833      	ldr	r3, [r6, #0]
 80041c4:	461c      	mov	r4, r3
 80041c6:	bb34      	cbnz	r4, 8004216 <_malloc_r+0x82>
 80041c8:	4629      	mov	r1, r5
 80041ca:	4638      	mov	r0, r7
 80041cc:	f7ff ffc2 	bl	8004154 <sbrk_aligned>
 80041d0:	1c43      	adds	r3, r0, #1
 80041d2:	4604      	mov	r4, r0
 80041d4:	d14d      	bne.n	8004272 <_malloc_r+0xde>
 80041d6:	6834      	ldr	r4, [r6, #0]
 80041d8:	4626      	mov	r6, r4
 80041da:	2e00      	cmp	r6, #0
 80041dc:	d140      	bne.n	8004260 <_malloc_r+0xcc>
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	4631      	mov	r1, r6
 80041e2:	4638      	mov	r0, r7
 80041e4:	eb04 0803 	add.w	r8, r4, r3
 80041e8:	f000 f848 	bl	800427c <_sbrk_r>
 80041ec:	4580      	cmp	r8, r0
 80041ee:	d13a      	bne.n	8004266 <_malloc_r+0xd2>
 80041f0:	6821      	ldr	r1, [r4, #0]
 80041f2:	3503      	adds	r5, #3
 80041f4:	1a6d      	subs	r5, r5, r1
 80041f6:	f025 0503 	bic.w	r5, r5, #3
 80041fa:	3508      	adds	r5, #8
 80041fc:	2d0c      	cmp	r5, #12
 80041fe:	bf38      	it	cc
 8004200:	250c      	movcc	r5, #12
 8004202:	4638      	mov	r0, r7
 8004204:	4629      	mov	r1, r5
 8004206:	f7ff ffa5 	bl	8004154 <sbrk_aligned>
 800420a:	3001      	adds	r0, #1
 800420c:	d02b      	beq.n	8004266 <_malloc_r+0xd2>
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	442b      	add	r3, r5
 8004212:	6023      	str	r3, [r4, #0]
 8004214:	e00e      	b.n	8004234 <_malloc_r+0xa0>
 8004216:	6822      	ldr	r2, [r4, #0]
 8004218:	1b52      	subs	r2, r2, r5
 800421a:	d41e      	bmi.n	800425a <_malloc_r+0xc6>
 800421c:	2a0b      	cmp	r2, #11
 800421e:	d916      	bls.n	800424e <_malloc_r+0xba>
 8004220:	1961      	adds	r1, r4, r5
 8004222:	42a3      	cmp	r3, r4
 8004224:	6025      	str	r5, [r4, #0]
 8004226:	bf18      	it	ne
 8004228:	6059      	strne	r1, [r3, #4]
 800422a:	6863      	ldr	r3, [r4, #4]
 800422c:	bf08      	it	eq
 800422e:	6031      	streq	r1, [r6, #0]
 8004230:	5162      	str	r2, [r4, r5]
 8004232:	604b      	str	r3, [r1, #4]
 8004234:	4638      	mov	r0, r7
 8004236:	f104 060b 	add.w	r6, r4, #11
 800423a:	f001 fa85 	bl	8005748 <__malloc_unlock>
 800423e:	f026 0607 	bic.w	r6, r6, #7
 8004242:	1d23      	adds	r3, r4, #4
 8004244:	1af2      	subs	r2, r6, r3
 8004246:	d0b6      	beq.n	80041b6 <_malloc_r+0x22>
 8004248:	1b9b      	subs	r3, r3, r6
 800424a:	50a3      	str	r3, [r4, r2]
 800424c:	e7b3      	b.n	80041b6 <_malloc_r+0x22>
 800424e:	6862      	ldr	r2, [r4, #4]
 8004250:	42a3      	cmp	r3, r4
 8004252:	bf0c      	ite	eq
 8004254:	6032      	streq	r2, [r6, #0]
 8004256:	605a      	strne	r2, [r3, #4]
 8004258:	e7ec      	b.n	8004234 <_malloc_r+0xa0>
 800425a:	4623      	mov	r3, r4
 800425c:	6864      	ldr	r4, [r4, #4]
 800425e:	e7b2      	b.n	80041c6 <_malloc_r+0x32>
 8004260:	4634      	mov	r4, r6
 8004262:	6876      	ldr	r6, [r6, #4]
 8004264:	e7b9      	b.n	80041da <_malloc_r+0x46>
 8004266:	230c      	movs	r3, #12
 8004268:	4638      	mov	r0, r7
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	f001 fa6c 	bl	8005748 <__malloc_unlock>
 8004270:	e7a1      	b.n	80041b6 <_malloc_r+0x22>
 8004272:	6025      	str	r5, [r4, #0]
 8004274:	e7de      	b.n	8004234 <_malloc_r+0xa0>
 8004276:	bf00      	nop
 8004278:	20000844 	.word	0x20000844

0800427c <_sbrk_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	2300      	movs	r3, #0
 8004280:	4d05      	ldr	r5, [pc, #20]	; (8004298 <_sbrk_r+0x1c>)
 8004282:	4604      	mov	r4, r0
 8004284:	4608      	mov	r0, r1
 8004286:	602b      	str	r3, [r5, #0]
 8004288:	f7fd fccc 	bl	8001c24 <_sbrk>
 800428c:	1c43      	adds	r3, r0, #1
 800428e:	d102      	bne.n	8004296 <_sbrk_r+0x1a>
 8004290:	682b      	ldr	r3, [r5, #0]
 8004292:	b103      	cbz	r3, 8004296 <_sbrk_r+0x1a>
 8004294:	6023      	str	r3, [r4, #0]
 8004296:	bd38      	pop	{r3, r4, r5, pc}
 8004298:	2000084c 	.word	0x2000084c

0800429c <siprintf>:
 800429c:	b40e      	push	{r1, r2, r3}
 800429e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042a2:	b500      	push	{lr}
 80042a4:	b09c      	sub	sp, #112	; 0x70
 80042a6:	ab1d      	add	r3, sp, #116	; 0x74
 80042a8:	9002      	str	r0, [sp, #8]
 80042aa:	9006      	str	r0, [sp, #24]
 80042ac:	9107      	str	r1, [sp, #28]
 80042ae:	9104      	str	r1, [sp, #16]
 80042b0:	4808      	ldr	r0, [pc, #32]	; (80042d4 <siprintf+0x38>)
 80042b2:	4909      	ldr	r1, [pc, #36]	; (80042d8 <siprintf+0x3c>)
 80042b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80042b8:	9105      	str	r1, [sp, #20]
 80042ba:	6800      	ldr	r0, [r0, #0]
 80042bc:	a902      	add	r1, sp, #8
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	f001 ff70 	bl	80061a4 <_svfiprintf_r>
 80042c4:	2200      	movs	r2, #0
 80042c6:	9b02      	ldr	r3, [sp, #8]
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	b01c      	add	sp, #112	; 0x70
 80042cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80042d0:	b003      	add	sp, #12
 80042d2:	4770      	bx	lr
 80042d4:	20000020 	.word	0x20000020
 80042d8:	ffff0208 	.word	0xffff0208

080042dc <strcpy>:
 80042dc:	4603      	mov	r3, r0
 80042de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042e2:	f803 2b01 	strb.w	r2, [r3], #1
 80042e6:	2a00      	cmp	r2, #0
 80042e8:	d1f9      	bne.n	80042de <strcpy+0x2>
 80042ea:	4770      	bx	lr

080042ec <sulp>:
 80042ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042f0:	460f      	mov	r7, r1
 80042f2:	4690      	mov	r8, r2
 80042f4:	f001 fd9e 	bl	8005e34 <__ulp>
 80042f8:	4604      	mov	r4, r0
 80042fa:	460d      	mov	r5, r1
 80042fc:	f1b8 0f00 	cmp.w	r8, #0
 8004300:	d011      	beq.n	8004326 <sulp+0x3a>
 8004302:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004306:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800430a:	2b00      	cmp	r3, #0
 800430c:	dd0b      	ble.n	8004326 <sulp+0x3a>
 800430e:	2400      	movs	r4, #0
 8004310:	051b      	lsls	r3, r3, #20
 8004312:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004316:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800431a:	4622      	mov	r2, r4
 800431c:	462b      	mov	r3, r5
 800431e:	f7fc f8e5 	bl	80004ec <__aeabi_dmul>
 8004322:	4604      	mov	r4, r0
 8004324:	460d      	mov	r5, r1
 8004326:	4620      	mov	r0, r4
 8004328:	4629      	mov	r1, r5
 800432a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004330 <_strtod_l>:
 8004330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004334:	469b      	mov	fp, r3
 8004336:	2300      	movs	r3, #0
 8004338:	b09f      	sub	sp, #124	; 0x7c
 800433a:	931a      	str	r3, [sp, #104]	; 0x68
 800433c:	4b9e      	ldr	r3, [pc, #632]	; (80045b8 <_strtod_l+0x288>)
 800433e:	4682      	mov	sl, r0
 8004340:	681f      	ldr	r7, [r3, #0]
 8004342:	460e      	mov	r6, r1
 8004344:	4638      	mov	r0, r7
 8004346:	9215      	str	r2, [sp, #84]	; 0x54
 8004348:	f7fb ff0c 	bl	8000164 <strlen>
 800434c:	f04f 0800 	mov.w	r8, #0
 8004350:	4604      	mov	r4, r0
 8004352:	f04f 0900 	mov.w	r9, #0
 8004356:	9619      	str	r6, [sp, #100]	; 0x64
 8004358:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	2a2b      	cmp	r2, #43	; 0x2b
 800435e:	d04c      	beq.n	80043fa <_strtod_l+0xca>
 8004360:	d83a      	bhi.n	80043d8 <_strtod_l+0xa8>
 8004362:	2a0d      	cmp	r2, #13
 8004364:	d833      	bhi.n	80043ce <_strtod_l+0x9e>
 8004366:	2a08      	cmp	r2, #8
 8004368:	d833      	bhi.n	80043d2 <_strtod_l+0xa2>
 800436a:	2a00      	cmp	r2, #0
 800436c:	d03d      	beq.n	80043ea <_strtod_l+0xba>
 800436e:	2300      	movs	r3, #0
 8004370:	930a      	str	r3, [sp, #40]	; 0x28
 8004372:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004374:	782b      	ldrb	r3, [r5, #0]
 8004376:	2b30      	cmp	r3, #48	; 0x30
 8004378:	f040 80aa 	bne.w	80044d0 <_strtod_l+0x1a0>
 800437c:	786b      	ldrb	r3, [r5, #1]
 800437e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004382:	2b58      	cmp	r3, #88	; 0x58
 8004384:	d166      	bne.n	8004454 <_strtod_l+0x124>
 8004386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004388:	4650      	mov	r0, sl
 800438a:	9301      	str	r3, [sp, #4]
 800438c:	ab1a      	add	r3, sp, #104	; 0x68
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	4a8a      	ldr	r2, [pc, #552]	; (80045bc <_strtod_l+0x28c>)
 8004392:	f8cd b008 	str.w	fp, [sp, #8]
 8004396:	ab1b      	add	r3, sp, #108	; 0x6c
 8004398:	a919      	add	r1, sp, #100	; 0x64
 800439a:	f000 feb1 	bl	8005100 <__gethex>
 800439e:	f010 0607 	ands.w	r6, r0, #7
 80043a2:	4604      	mov	r4, r0
 80043a4:	d005      	beq.n	80043b2 <_strtod_l+0x82>
 80043a6:	2e06      	cmp	r6, #6
 80043a8:	d129      	bne.n	80043fe <_strtod_l+0xce>
 80043aa:	2300      	movs	r3, #0
 80043ac:	3501      	adds	r5, #1
 80043ae:	9519      	str	r5, [sp, #100]	; 0x64
 80043b0:	930a      	str	r3, [sp, #40]	; 0x28
 80043b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f040 858a 	bne.w	8004ece <_strtod_l+0xb9e>
 80043ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043bc:	b1d3      	cbz	r3, 80043f4 <_strtod_l+0xc4>
 80043be:	4642      	mov	r2, r8
 80043c0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80043c4:	4610      	mov	r0, r2
 80043c6:	4619      	mov	r1, r3
 80043c8:	b01f      	add	sp, #124	; 0x7c
 80043ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ce:	2a20      	cmp	r2, #32
 80043d0:	d1cd      	bne.n	800436e <_strtod_l+0x3e>
 80043d2:	3301      	adds	r3, #1
 80043d4:	9319      	str	r3, [sp, #100]	; 0x64
 80043d6:	e7bf      	b.n	8004358 <_strtod_l+0x28>
 80043d8:	2a2d      	cmp	r2, #45	; 0x2d
 80043da:	d1c8      	bne.n	800436e <_strtod_l+0x3e>
 80043dc:	2201      	movs	r2, #1
 80043de:	920a      	str	r2, [sp, #40]	; 0x28
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	9219      	str	r2, [sp, #100]	; 0x64
 80043e4:	785b      	ldrb	r3, [r3, #1]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1c3      	bne.n	8004372 <_strtod_l+0x42>
 80043ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80043ec:	9619      	str	r6, [sp, #100]	; 0x64
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f040 856b 	bne.w	8004eca <_strtod_l+0xb9a>
 80043f4:	4642      	mov	r2, r8
 80043f6:	464b      	mov	r3, r9
 80043f8:	e7e4      	b.n	80043c4 <_strtod_l+0x94>
 80043fa:	2200      	movs	r2, #0
 80043fc:	e7ef      	b.n	80043de <_strtod_l+0xae>
 80043fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004400:	b13a      	cbz	r2, 8004412 <_strtod_l+0xe2>
 8004402:	2135      	movs	r1, #53	; 0x35
 8004404:	a81c      	add	r0, sp, #112	; 0x70
 8004406:	f001 fe19 	bl	800603c <__copybits>
 800440a:	4650      	mov	r0, sl
 800440c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800440e:	f001 f9e1 	bl	80057d4 <_Bfree>
 8004412:	3e01      	subs	r6, #1
 8004414:	2e04      	cmp	r6, #4
 8004416:	d806      	bhi.n	8004426 <_strtod_l+0xf6>
 8004418:	e8df f006 	tbb	[pc, r6]
 800441c:	1714030a 	.word	0x1714030a
 8004420:	0a          	.byte	0x0a
 8004421:	00          	.byte	0x00
 8004422:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004426:	0721      	lsls	r1, r4, #28
 8004428:	d5c3      	bpl.n	80043b2 <_strtod_l+0x82>
 800442a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800442e:	e7c0      	b.n	80043b2 <_strtod_l+0x82>
 8004430:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004432:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004436:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800443a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800443e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004442:	e7f0      	b.n	8004426 <_strtod_l+0xf6>
 8004444:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80045c0 <_strtod_l+0x290>
 8004448:	e7ed      	b.n	8004426 <_strtod_l+0xf6>
 800444a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800444e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004452:	e7e8      	b.n	8004426 <_strtod_l+0xf6>
 8004454:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	9219      	str	r2, [sp, #100]	; 0x64
 800445a:	785b      	ldrb	r3, [r3, #1]
 800445c:	2b30      	cmp	r3, #48	; 0x30
 800445e:	d0f9      	beq.n	8004454 <_strtod_l+0x124>
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0a6      	beq.n	80043b2 <_strtod_l+0x82>
 8004464:	2301      	movs	r3, #1
 8004466:	9307      	str	r3, [sp, #28]
 8004468:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800446a:	220a      	movs	r2, #10
 800446c:	9308      	str	r3, [sp, #32]
 800446e:	2300      	movs	r3, #0
 8004470:	469b      	mov	fp, r3
 8004472:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004476:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004478:	7805      	ldrb	r5, [r0, #0]
 800447a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800447e:	b2d9      	uxtb	r1, r3
 8004480:	2909      	cmp	r1, #9
 8004482:	d927      	bls.n	80044d4 <_strtod_l+0x1a4>
 8004484:	4622      	mov	r2, r4
 8004486:	4639      	mov	r1, r7
 8004488:	f002 fa80 	bl	800698c <strncmp>
 800448c:	2800      	cmp	r0, #0
 800448e:	d033      	beq.n	80044f8 <_strtod_l+0x1c8>
 8004490:	2000      	movs	r0, #0
 8004492:	462a      	mov	r2, r5
 8004494:	465c      	mov	r4, fp
 8004496:	4603      	mov	r3, r0
 8004498:	9004      	str	r0, [sp, #16]
 800449a:	2a65      	cmp	r2, #101	; 0x65
 800449c:	d001      	beq.n	80044a2 <_strtod_l+0x172>
 800449e:	2a45      	cmp	r2, #69	; 0x45
 80044a0:	d114      	bne.n	80044cc <_strtod_l+0x19c>
 80044a2:	b91c      	cbnz	r4, 80044ac <_strtod_l+0x17c>
 80044a4:	9a07      	ldr	r2, [sp, #28]
 80044a6:	4302      	orrs	r2, r0
 80044a8:	d09f      	beq.n	80043ea <_strtod_l+0xba>
 80044aa:	2400      	movs	r4, #0
 80044ac:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80044ae:	1c72      	adds	r2, r6, #1
 80044b0:	9219      	str	r2, [sp, #100]	; 0x64
 80044b2:	7872      	ldrb	r2, [r6, #1]
 80044b4:	2a2b      	cmp	r2, #43	; 0x2b
 80044b6:	d079      	beq.n	80045ac <_strtod_l+0x27c>
 80044b8:	2a2d      	cmp	r2, #45	; 0x2d
 80044ba:	f000 8083 	beq.w	80045c4 <_strtod_l+0x294>
 80044be:	2700      	movs	r7, #0
 80044c0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80044c4:	2909      	cmp	r1, #9
 80044c6:	f240 8083 	bls.w	80045d0 <_strtod_l+0x2a0>
 80044ca:	9619      	str	r6, [sp, #100]	; 0x64
 80044cc:	2500      	movs	r5, #0
 80044ce:	e09f      	b.n	8004610 <_strtod_l+0x2e0>
 80044d0:	2300      	movs	r3, #0
 80044d2:	e7c8      	b.n	8004466 <_strtod_l+0x136>
 80044d4:	f1bb 0f08 	cmp.w	fp, #8
 80044d8:	bfd5      	itete	le
 80044da:	9906      	ldrle	r1, [sp, #24]
 80044dc:	9905      	ldrgt	r1, [sp, #20]
 80044de:	fb02 3301 	mlale	r3, r2, r1, r3
 80044e2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80044e6:	f100 0001 	add.w	r0, r0, #1
 80044ea:	bfd4      	ite	le
 80044ec:	9306      	strle	r3, [sp, #24]
 80044ee:	9305      	strgt	r3, [sp, #20]
 80044f0:	f10b 0b01 	add.w	fp, fp, #1
 80044f4:	9019      	str	r0, [sp, #100]	; 0x64
 80044f6:	e7be      	b.n	8004476 <_strtod_l+0x146>
 80044f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80044fa:	191a      	adds	r2, r3, r4
 80044fc:	9219      	str	r2, [sp, #100]	; 0x64
 80044fe:	5d1a      	ldrb	r2, [r3, r4]
 8004500:	f1bb 0f00 	cmp.w	fp, #0
 8004504:	d036      	beq.n	8004574 <_strtod_l+0x244>
 8004506:	465c      	mov	r4, fp
 8004508:	9004      	str	r0, [sp, #16]
 800450a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800450e:	2b09      	cmp	r3, #9
 8004510:	d912      	bls.n	8004538 <_strtod_l+0x208>
 8004512:	2301      	movs	r3, #1
 8004514:	e7c1      	b.n	800449a <_strtod_l+0x16a>
 8004516:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004518:	3001      	adds	r0, #1
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	9219      	str	r2, [sp, #100]	; 0x64
 800451e:	785a      	ldrb	r2, [r3, #1]
 8004520:	2a30      	cmp	r2, #48	; 0x30
 8004522:	d0f8      	beq.n	8004516 <_strtod_l+0x1e6>
 8004524:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004528:	2b08      	cmp	r3, #8
 800452a:	f200 84d5 	bhi.w	8004ed8 <_strtod_l+0xba8>
 800452e:	9004      	str	r0, [sp, #16]
 8004530:	2000      	movs	r0, #0
 8004532:	4604      	mov	r4, r0
 8004534:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004536:	9308      	str	r3, [sp, #32]
 8004538:	3a30      	subs	r2, #48	; 0x30
 800453a:	f100 0301 	add.w	r3, r0, #1
 800453e:	d013      	beq.n	8004568 <_strtod_l+0x238>
 8004540:	9904      	ldr	r1, [sp, #16]
 8004542:	1905      	adds	r5, r0, r4
 8004544:	4419      	add	r1, r3
 8004546:	9104      	str	r1, [sp, #16]
 8004548:	4623      	mov	r3, r4
 800454a:	210a      	movs	r1, #10
 800454c:	42ab      	cmp	r3, r5
 800454e:	d113      	bne.n	8004578 <_strtod_l+0x248>
 8004550:	1823      	adds	r3, r4, r0
 8004552:	2b08      	cmp	r3, #8
 8004554:	f104 0401 	add.w	r4, r4, #1
 8004558:	4404      	add	r4, r0
 800455a:	dc1b      	bgt.n	8004594 <_strtod_l+0x264>
 800455c:	230a      	movs	r3, #10
 800455e:	9906      	ldr	r1, [sp, #24]
 8004560:	fb03 2301 	mla	r3, r3, r1, r2
 8004564:	9306      	str	r3, [sp, #24]
 8004566:	2300      	movs	r3, #0
 8004568:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800456a:	4618      	mov	r0, r3
 800456c:	1c51      	adds	r1, r2, #1
 800456e:	9119      	str	r1, [sp, #100]	; 0x64
 8004570:	7852      	ldrb	r2, [r2, #1]
 8004572:	e7ca      	b.n	800450a <_strtod_l+0x1da>
 8004574:	4658      	mov	r0, fp
 8004576:	e7d3      	b.n	8004520 <_strtod_l+0x1f0>
 8004578:	2b08      	cmp	r3, #8
 800457a:	dc04      	bgt.n	8004586 <_strtod_l+0x256>
 800457c:	9f06      	ldr	r7, [sp, #24]
 800457e:	434f      	muls	r7, r1
 8004580:	9706      	str	r7, [sp, #24]
 8004582:	3301      	adds	r3, #1
 8004584:	e7e2      	b.n	800454c <_strtod_l+0x21c>
 8004586:	1c5f      	adds	r7, r3, #1
 8004588:	2f10      	cmp	r7, #16
 800458a:	bfde      	ittt	le
 800458c:	9f05      	ldrle	r7, [sp, #20]
 800458e:	434f      	mulle	r7, r1
 8004590:	9705      	strle	r7, [sp, #20]
 8004592:	e7f6      	b.n	8004582 <_strtod_l+0x252>
 8004594:	2c10      	cmp	r4, #16
 8004596:	bfdf      	itttt	le
 8004598:	230a      	movle	r3, #10
 800459a:	9905      	ldrle	r1, [sp, #20]
 800459c:	fb03 2301 	mlale	r3, r3, r1, r2
 80045a0:	9305      	strle	r3, [sp, #20]
 80045a2:	e7e0      	b.n	8004566 <_strtod_l+0x236>
 80045a4:	2300      	movs	r3, #0
 80045a6:	9304      	str	r3, [sp, #16]
 80045a8:	2301      	movs	r3, #1
 80045aa:	e77b      	b.n	80044a4 <_strtod_l+0x174>
 80045ac:	2700      	movs	r7, #0
 80045ae:	1cb2      	adds	r2, r6, #2
 80045b0:	9219      	str	r2, [sp, #100]	; 0x64
 80045b2:	78b2      	ldrb	r2, [r6, #2]
 80045b4:	e784      	b.n	80044c0 <_strtod_l+0x190>
 80045b6:	bf00      	nop
 80045b8:	08008938 	.word	0x08008938
 80045bc:	080087bc 	.word	0x080087bc
 80045c0:	7ff00000 	.word	0x7ff00000
 80045c4:	2701      	movs	r7, #1
 80045c6:	e7f2      	b.n	80045ae <_strtod_l+0x27e>
 80045c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80045ca:	1c51      	adds	r1, r2, #1
 80045cc:	9119      	str	r1, [sp, #100]	; 0x64
 80045ce:	7852      	ldrb	r2, [r2, #1]
 80045d0:	2a30      	cmp	r2, #48	; 0x30
 80045d2:	d0f9      	beq.n	80045c8 <_strtod_l+0x298>
 80045d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80045d8:	2908      	cmp	r1, #8
 80045da:	f63f af77 	bhi.w	80044cc <_strtod_l+0x19c>
 80045de:	f04f 0e0a 	mov.w	lr, #10
 80045e2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80045e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80045e8:	9209      	str	r2, [sp, #36]	; 0x24
 80045ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80045ec:	1c51      	adds	r1, r2, #1
 80045ee:	9119      	str	r1, [sp, #100]	; 0x64
 80045f0:	7852      	ldrb	r2, [r2, #1]
 80045f2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80045f6:	2d09      	cmp	r5, #9
 80045f8:	d935      	bls.n	8004666 <_strtod_l+0x336>
 80045fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80045fc:	1b49      	subs	r1, r1, r5
 80045fe:	2908      	cmp	r1, #8
 8004600:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004604:	dc02      	bgt.n	800460c <_strtod_l+0x2dc>
 8004606:	4565      	cmp	r5, ip
 8004608:	bfa8      	it	ge
 800460a:	4665      	movge	r5, ip
 800460c:	b107      	cbz	r7, 8004610 <_strtod_l+0x2e0>
 800460e:	426d      	negs	r5, r5
 8004610:	2c00      	cmp	r4, #0
 8004612:	d14c      	bne.n	80046ae <_strtod_l+0x37e>
 8004614:	9907      	ldr	r1, [sp, #28]
 8004616:	4301      	orrs	r1, r0
 8004618:	f47f aecb 	bne.w	80043b2 <_strtod_l+0x82>
 800461c:	2b00      	cmp	r3, #0
 800461e:	f47f aee4 	bne.w	80043ea <_strtod_l+0xba>
 8004622:	2a69      	cmp	r2, #105	; 0x69
 8004624:	d026      	beq.n	8004674 <_strtod_l+0x344>
 8004626:	dc23      	bgt.n	8004670 <_strtod_l+0x340>
 8004628:	2a49      	cmp	r2, #73	; 0x49
 800462a:	d023      	beq.n	8004674 <_strtod_l+0x344>
 800462c:	2a4e      	cmp	r2, #78	; 0x4e
 800462e:	f47f aedc 	bne.w	80043ea <_strtod_l+0xba>
 8004632:	499d      	ldr	r1, [pc, #628]	; (80048a8 <_strtod_l+0x578>)
 8004634:	a819      	add	r0, sp, #100	; 0x64
 8004636:	f000 ffb1 	bl	800559c <__match>
 800463a:	2800      	cmp	r0, #0
 800463c:	f43f aed5 	beq.w	80043ea <_strtod_l+0xba>
 8004640:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b28      	cmp	r3, #40	; 0x28
 8004646:	d12c      	bne.n	80046a2 <_strtod_l+0x372>
 8004648:	4998      	ldr	r1, [pc, #608]	; (80048ac <_strtod_l+0x57c>)
 800464a:	aa1c      	add	r2, sp, #112	; 0x70
 800464c:	a819      	add	r0, sp, #100	; 0x64
 800464e:	f000 ffb9 	bl	80055c4 <__hexnan>
 8004652:	2805      	cmp	r0, #5
 8004654:	d125      	bne.n	80046a2 <_strtod_l+0x372>
 8004656:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004658:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800465c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004660:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004664:	e6a5      	b.n	80043b2 <_strtod_l+0x82>
 8004666:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800466a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800466e:	e7bc      	b.n	80045ea <_strtod_l+0x2ba>
 8004670:	2a6e      	cmp	r2, #110	; 0x6e
 8004672:	e7dc      	b.n	800462e <_strtod_l+0x2fe>
 8004674:	498e      	ldr	r1, [pc, #568]	; (80048b0 <_strtod_l+0x580>)
 8004676:	a819      	add	r0, sp, #100	; 0x64
 8004678:	f000 ff90 	bl	800559c <__match>
 800467c:	2800      	cmp	r0, #0
 800467e:	f43f aeb4 	beq.w	80043ea <_strtod_l+0xba>
 8004682:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004684:	498b      	ldr	r1, [pc, #556]	; (80048b4 <_strtod_l+0x584>)
 8004686:	3b01      	subs	r3, #1
 8004688:	a819      	add	r0, sp, #100	; 0x64
 800468a:	9319      	str	r3, [sp, #100]	; 0x64
 800468c:	f000 ff86 	bl	800559c <__match>
 8004690:	b910      	cbnz	r0, 8004698 <_strtod_l+0x368>
 8004692:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004694:	3301      	adds	r3, #1
 8004696:	9319      	str	r3, [sp, #100]	; 0x64
 8004698:	f04f 0800 	mov.w	r8, #0
 800469c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80048b8 <_strtod_l+0x588>
 80046a0:	e687      	b.n	80043b2 <_strtod_l+0x82>
 80046a2:	4886      	ldr	r0, [pc, #536]	; (80048bc <_strtod_l+0x58c>)
 80046a4:	f002 f96c 	bl	8006980 <nan>
 80046a8:	4680      	mov	r8, r0
 80046aa:	4689      	mov	r9, r1
 80046ac:	e681      	b.n	80043b2 <_strtod_l+0x82>
 80046ae:	9b04      	ldr	r3, [sp, #16]
 80046b0:	f1bb 0f00 	cmp.w	fp, #0
 80046b4:	bf08      	it	eq
 80046b6:	46a3      	moveq	fp, r4
 80046b8:	1aeb      	subs	r3, r5, r3
 80046ba:	2c10      	cmp	r4, #16
 80046bc:	9806      	ldr	r0, [sp, #24]
 80046be:	4626      	mov	r6, r4
 80046c0:	9307      	str	r3, [sp, #28]
 80046c2:	bfa8      	it	ge
 80046c4:	2610      	movge	r6, #16
 80046c6:	f7fb fe97 	bl	80003f8 <__aeabi_ui2d>
 80046ca:	2c09      	cmp	r4, #9
 80046cc:	4680      	mov	r8, r0
 80046ce:	4689      	mov	r9, r1
 80046d0:	dd13      	ble.n	80046fa <_strtod_l+0x3ca>
 80046d2:	4b7b      	ldr	r3, [pc, #492]	; (80048c0 <_strtod_l+0x590>)
 80046d4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80046d8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80046dc:	f7fb ff06 	bl	80004ec <__aeabi_dmul>
 80046e0:	4680      	mov	r8, r0
 80046e2:	9805      	ldr	r0, [sp, #20]
 80046e4:	4689      	mov	r9, r1
 80046e6:	f7fb fe87 	bl	80003f8 <__aeabi_ui2d>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4640      	mov	r0, r8
 80046f0:	4649      	mov	r1, r9
 80046f2:	f7fb fd45 	bl	8000180 <__adddf3>
 80046f6:	4680      	mov	r8, r0
 80046f8:	4689      	mov	r9, r1
 80046fa:	2c0f      	cmp	r4, #15
 80046fc:	dc36      	bgt.n	800476c <_strtod_l+0x43c>
 80046fe:	9b07      	ldr	r3, [sp, #28]
 8004700:	2b00      	cmp	r3, #0
 8004702:	f43f ae56 	beq.w	80043b2 <_strtod_l+0x82>
 8004706:	dd22      	ble.n	800474e <_strtod_l+0x41e>
 8004708:	2b16      	cmp	r3, #22
 800470a:	dc09      	bgt.n	8004720 <_strtod_l+0x3f0>
 800470c:	496c      	ldr	r1, [pc, #432]	; (80048c0 <_strtod_l+0x590>)
 800470e:	4642      	mov	r2, r8
 8004710:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004714:	464b      	mov	r3, r9
 8004716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800471a:	f7fb fee7 	bl	80004ec <__aeabi_dmul>
 800471e:	e7c3      	b.n	80046a8 <_strtod_l+0x378>
 8004720:	9a07      	ldr	r2, [sp, #28]
 8004722:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004726:	4293      	cmp	r3, r2
 8004728:	db20      	blt.n	800476c <_strtod_l+0x43c>
 800472a:	4d65      	ldr	r5, [pc, #404]	; (80048c0 <_strtod_l+0x590>)
 800472c:	f1c4 040f 	rsb	r4, r4, #15
 8004730:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004734:	4642      	mov	r2, r8
 8004736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800473a:	464b      	mov	r3, r9
 800473c:	f7fb fed6 	bl	80004ec <__aeabi_dmul>
 8004740:	9b07      	ldr	r3, [sp, #28]
 8004742:	1b1c      	subs	r4, r3, r4
 8004744:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004748:	e9d5 2300 	ldrd	r2, r3, [r5]
 800474c:	e7e5      	b.n	800471a <_strtod_l+0x3ea>
 800474e:	9b07      	ldr	r3, [sp, #28]
 8004750:	3316      	adds	r3, #22
 8004752:	db0b      	blt.n	800476c <_strtod_l+0x43c>
 8004754:	9b04      	ldr	r3, [sp, #16]
 8004756:	4640      	mov	r0, r8
 8004758:	1b5d      	subs	r5, r3, r5
 800475a:	4b59      	ldr	r3, [pc, #356]	; (80048c0 <_strtod_l+0x590>)
 800475c:	4649      	mov	r1, r9
 800475e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004762:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004766:	f7fb ffeb 	bl	8000740 <__aeabi_ddiv>
 800476a:	e79d      	b.n	80046a8 <_strtod_l+0x378>
 800476c:	9b07      	ldr	r3, [sp, #28]
 800476e:	1ba6      	subs	r6, r4, r6
 8004770:	441e      	add	r6, r3
 8004772:	2e00      	cmp	r6, #0
 8004774:	dd74      	ble.n	8004860 <_strtod_l+0x530>
 8004776:	f016 030f 	ands.w	r3, r6, #15
 800477a:	d00a      	beq.n	8004792 <_strtod_l+0x462>
 800477c:	4950      	ldr	r1, [pc, #320]	; (80048c0 <_strtod_l+0x590>)
 800477e:	4642      	mov	r2, r8
 8004780:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004788:	464b      	mov	r3, r9
 800478a:	f7fb feaf 	bl	80004ec <__aeabi_dmul>
 800478e:	4680      	mov	r8, r0
 8004790:	4689      	mov	r9, r1
 8004792:	f036 060f 	bics.w	r6, r6, #15
 8004796:	d052      	beq.n	800483e <_strtod_l+0x50e>
 8004798:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800479c:	dd27      	ble.n	80047ee <_strtod_l+0x4be>
 800479e:	f04f 0b00 	mov.w	fp, #0
 80047a2:	f8cd b010 	str.w	fp, [sp, #16]
 80047a6:	f8cd b020 	str.w	fp, [sp, #32]
 80047aa:	f8cd b018 	str.w	fp, [sp, #24]
 80047ae:	2322      	movs	r3, #34	; 0x22
 80047b0:	f04f 0800 	mov.w	r8, #0
 80047b4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80048b8 <_strtod_l+0x588>
 80047b8:	f8ca 3000 	str.w	r3, [sl]
 80047bc:	9b08      	ldr	r3, [sp, #32]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f43f adf7 	beq.w	80043b2 <_strtod_l+0x82>
 80047c4:	4650      	mov	r0, sl
 80047c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80047c8:	f001 f804 	bl	80057d4 <_Bfree>
 80047cc:	4650      	mov	r0, sl
 80047ce:	9906      	ldr	r1, [sp, #24]
 80047d0:	f001 f800 	bl	80057d4 <_Bfree>
 80047d4:	4650      	mov	r0, sl
 80047d6:	9904      	ldr	r1, [sp, #16]
 80047d8:	f000 fffc 	bl	80057d4 <_Bfree>
 80047dc:	4650      	mov	r0, sl
 80047de:	9908      	ldr	r1, [sp, #32]
 80047e0:	f000 fff8 	bl	80057d4 <_Bfree>
 80047e4:	4659      	mov	r1, fp
 80047e6:	4650      	mov	r0, sl
 80047e8:	f000 fff4 	bl	80057d4 <_Bfree>
 80047ec:	e5e1      	b.n	80043b2 <_strtod_l+0x82>
 80047ee:	4b35      	ldr	r3, [pc, #212]	; (80048c4 <_strtod_l+0x594>)
 80047f0:	4640      	mov	r0, r8
 80047f2:	9305      	str	r3, [sp, #20]
 80047f4:	2300      	movs	r3, #0
 80047f6:	4649      	mov	r1, r9
 80047f8:	461f      	mov	r7, r3
 80047fa:	1136      	asrs	r6, r6, #4
 80047fc:	2e01      	cmp	r6, #1
 80047fe:	dc21      	bgt.n	8004844 <_strtod_l+0x514>
 8004800:	b10b      	cbz	r3, 8004806 <_strtod_l+0x4d6>
 8004802:	4680      	mov	r8, r0
 8004804:	4689      	mov	r9, r1
 8004806:	4b2f      	ldr	r3, [pc, #188]	; (80048c4 <_strtod_l+0x594>)
 8004808:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800480c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004810:	4642      	mov	r2, r8
 8004812:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004816:	464b      	mov	r3, r9
 8004818:	f7fb fe68 	bl	80004ec <__aeabi_dmul>
 800481c:	4b26      	ldr	r3, [pc, #152]	; (80048b8 <_strtod_l+0x588>)
 800481e:	460a      	mov	r2, r1
 8004820:	400b      	ands	r3, r1
 8004822:	4929      	ldr	r1, [pc, #164]	; (80048c8 <_strtod_l+0x598>)
 8004824:	4680      	mov	r8, r0
 8004826:	428b      	cmp	r3, r1
 8004828:	d8b9      	bhi.n	800479e <_strtod_l+0x46e>
 800482a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800482e:	428b      	cmp	r3, r1
 8004830:	bf86      	itte	hi
 8004832:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8004836:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80048cc <_strtod_l+0x59c>
 800483a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800483e:	2300      	movs	r3, #0
 8004840:	9305      	str	r3, [sp, #20]
 8004842:	e07f      	b.n	8004944 <_strtod_l+0x614>
 8004844:	07f2      	lsls	r2, r6, #31
 8004846:	d505      	bpl.n	8004854 <_strtod_l+0x524>
 8004848:	9b05      	ldr	r3, [sp, #20]
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	f7fb fe4d 	bl	80004ec <__aeabi_dmul>
 8004852:	2301      	movs	r3, #1
 8004854:	9a05      	ldr	r2, [sp, #20]
 8004856:	3701      	adds	r7, #1
 8004858:	3208      	adds	r2, #8
 800485a:	1076      	asrs	r6, r6, #1
 800485c:	9205      	str	r2, [sp, #20]
 800485e:	e7cd      	b.n	80047fc <_strtod_l+0x4cc>
 8004860:	d0ed      	beq.n	800483e <_strtod_l+0x50e>
 8004862:	4276      	negs	r6, r6
 8004864:	f016 020f 	ands.w	r2, r6, #15
 8004868:	d00a      	beq.n	8004880 <_strtod_l+0x550>
 800486a:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <_strtod_l+0x590>)
 800486c:	4640      	mov	r0, r8
 800486e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004872:	4649      	mov	r1, r9
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f7fb ff62 	bl	8000740 <__aeabi_ddiv>
 800487c:	4680      	mov	r8, r0
 800487e:	4689      	mov	r9, r1
 8004880:	1136      	asrs	r6, r6, #4
 8004882:	d0dc      	beq.n	800483e <_strtod_l+0x50e>
 8004884:	2e1f      	cmp	r6, #31
 8004886:	dd23      	ble.n	80048d0 <_strtod_l+0x5a0>
 8004888:	f04f 0b00 	mov.w	fp, #0
 800488c:	f8cd b010 	str.w	fp, [sp, #16]
 8004890:	f8cd b020 	str.w	fp, [sp, #32]
 8004894:	f8cd b018 	str.w	fp, [sp, #24]
 8004898:	2322      	movs	r3, #34	; 0x22
 800489a:	f04f 0800 	mov.w	r8, #0
 800489e:	f04f 0900 	mov.w	r9, #0
 80048a2:	f8ca 3000 	str.w	r3, [sl]
 80048a6:	e789      	b.n	80047bc <_strtod_l+0x48c>
 80048a8:	080087b9 	.word	0x080087b9
 80048ac:	080087d0 	.word	0x080087d0
 80048b0:	080087b0 	.word	0x080087b0
 80048b4:	080087b3 	.word	0x080087b3
 80048b8:	7ff00000 	.word	0x7ff00000
 80048bc:	080088bf 	.word	0x080088bf
 80048c0:	080089d0 	.word	0x080089d0
 80048c4:	080089a8 	.word	0x080089a8
 80048c8:	7ca00000 	.word	0x7ca00000
 80048cc:	7fefffff 	.word	0x7fefffff
 80048d0:	f016 0310 	ands.w	r3, r6, #16
 80048d4:	bf18      	it	ne
 80048d6:	236a      	movne	r3, #106	; 0x6a
 80048d8:	4640      	mov	r0, r8
 80048da:	9305      	str	r3, [sp, #20]
 80048dc:	4649      	mov	r1, r9
 80048de:	2300      	movs	r3, #0
 80048e0:	4fb0      	ldr	r7, [pc, #704]	; (8004ba4 <_strtod_l+0x874>)
 80048e2:	07f2      	lsls	r2, r6, #31
 80048e4:	d504      	bpl.n	80048f0 <_strtod_l+0x5c0>
 80048e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048ea:	f7fb fdff 	bl	80004ec <__aeabi_dmul>
 80048ee:	2301      	movs	r3, #1
 80048f0:	1076      	asrs	r6, r6, #1
 80048f2:	f107 0708 	add.w	r7, r7, #8
 80048f6:	d1f4      	bne.n	80048e2 <_strtod_l+0x5b2>
 80048f8:	b10b      	cbz	r3, 80048fe <_strtod_l+0x5ce>
 80048fa:	4680      	mov	r8, r0
 80048fc:	4689      	mov	r9, r1
 80048fe:	9b05      	ldr	r3, [sp, #20]
 8004900:	b1c3      	cbz	r3, 8004934 <_strtod_l+0x604>
 8004902:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004906:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800490a:	2b00      	cmp	r3, #0
 800490c:	4649      	mov	r1, r9
 800490e:	dd11      	ble.n	8004934 <_strtod_l+0x604>
 8004910:	2b1f      	cmp	r3, #31
 8004912:	f340 8127 	ble.w	8004b64 <_strtod_l+0x834>
 8004916:	2b34      	cmp	r3, #52	; 0x34
 8004918:	bfd8      	it	le
 800491a:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800491e:	f04f 0800 	mov.w	r8, #0
 8004922:	bfcf      	iteee	gt
 8004924:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004928:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800492c:	fa03 f202 	lslle.w	r2, r3, r2
 8004930:	ea02 0901 	andle.w	r9, r2, r1
 8004934:	2200      	movs	r2, #0
 8004936:	2300      	movs	r3, #0
 8004938:	4640      	mov	r0, r8
 800493a:	4649      	mov	r1, r9
 800493c:	f7fc f83e 	bl	80009bc <__aeabi_dcmpeq>
 8004940:	2800      	cmp	r0, #0
 8004942:	d1a1      	bne.n	8004888 <_strtod_l+0x558>
 8004944:	9b06      	ldr	r3, [sp, #24]
 8004946:	465a      	mov	r2, fp
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	4650      	mov	r0, sl
 800494c:	4623      	mov	r3, r4
 800494e:	9908      	ldr	r1, [sp, #32]
 8004950:	f000 ffa8 	bl	80058a4 <__s2b>
 8004954:	9008      	str	r0, [sp, #32]
 8004956:	2800      	cmp	r0, #0
 8004958:	f43f af21 	beq.w	800479e <_strtod_l+0x46e>
 800495c:	9b04      	ldr	r3, [sp, #16]
 800495e:	f04f 0b00 	mov.w	fp, #0
 8004962:	1b5d      	subs	r5, r3, r5
 8004964:	9b07      	ldr	r3, [sp, #28]
 8004966:	f8cd b010 	str.w	fp, [sp, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	bfb4      	ite	lt
 800496e:	462b      	movlt	r3, r5
 8004970:	2300      	movge	r3, #0
 8004972:	930e      	str	r3, [sp, #56]	; 0x38
 8004974:	9b07      	ldr	r3, [sp, #28]
 8004976:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800497a:	9314      	str	r3, [sp, #80]	; 0x50
 800497c:	9b08      	ldr	r3, [sp, #32]
 800497e:	4650      	mov	r0, sl
 8004980:	6859      	ldr	r1, [r3, #4]
 8004982:	f000 fee7 	bl	8005754 <_Balloc>
 8004986:	9006      	str	r0, [sp, #24]
 8004988:	2800      	cmp	r0, #0
 800498a:	f43f af10 	beq.w	80047ae <_strtod_l+0x47e>
 800498e:	9b08      	ldr	r3, [sp, #32]
 8004990:	300c      	adds	r0, #12
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	f103 010c 	add.w	r1, r3, #12
 8004998:	3202      	adds	r2, #2
 800499a:	0092      	lsls	r2, r2, #2
 800499c:	f000 fec0 	bl	8005720 <memcpy>
 80049a0:	ab1c      	add	r3, sp, #112	; 0x70
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	ab1b      	add	r3, sp, #108	; 0x6c
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	4642      	mov	r2, r8
 80049aa:	464b      	mov	r3, r9
 80049ac:	4650      	mov	r0, sl
 80049ae:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80049b2:	f001 fab9 	bl	8005f28 <__d2b>
 80049b6:	901a      	str	r0, [sp, #104]	; 0x68
 80049b8:	2800      	cmp	r0, #0
 80049ba:	f43f aef8 	beq.w	80047ae <_strtod_l+0x47e>
 80049be:	2101      	movs	r1, #1
 80049c0:	4650      	mov	r0, sl
 80049c2:	f001 f807 	bl	80059d4 <__i2b>
 80049c6:	4603      	mov	r3, r0
 80049c8:	9004      	str	r0, [sp, #16]
 80049ca:	2800      	cmp	r0, #0
 80049cc:	f43f aeef 	beq.w	80047ae <_strtod_l+0x47e>
 80049d0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80049d2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80049d4:	2d00      	cmp	r5, #0
 80049d6:	bfab      	itete	ge
 80049d8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80049da:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80049dc:	18ee      	addge	r6, r5, r3
 80049de:	1b5c      	sublt	r4, r3, r5
 80049e0:	9b05      	ldr	r3, [sp, #20]
 80049e2:	bfa8      	it	ge
 80049e4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80049e6:	eba5 0503 	sub.w	r5, r5, r3
 80049ea:	4415      	add	r5, r2
 80049ec:	4b6e      	ldr	r3, [pc, #440]	; (8004ba8 <_strtod_l+0x878>)
 80049ee:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80049f2:	bfb8      	it	lt
 80049f4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80049f6:	429d      	cmp	r5, r3
 80049f8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80049fc:	f280 80c4 	bge.w	8004b88 <_strtod_l+0x858>
 8004a00:	1b5b      	subs	r3, r3, r5
 8004a02:	2b1f      	cmp	r3, #31
 8004a04:	f04f 0701 	mov.w	r7, #1
 8004a08:	eba2 0203 	sub.w	r2, r2, r3
 8004a0c:	f300 80b1 	bgt.w	8004b72 <_strtod_l+0x842>
 8004a10:	2500      	movs	r5, #0
 8004a12:	fa07 f303 	lsl.w	r3, r7, r3
 8004a16:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a18:	18b7      	adds	r7, r6, r2
 8004a1a:	9b05      	ldr	r3, [sp, #20]
 8004a1c:	42be      	cmp	r6, r7
 8004a1e:	4414      	add	r4, r2
 8004a20:	441c      	add	r4, r3
 8004a22:	4633      	mov	r3, r6
 8004a24:	bfa8      	it	ge
 8004a26:	463b      	movge	r3, r7
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	bfa8      	it	ge
 8004a2c:	4623      	movge	r3, r4
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bfc2      	ittt	gt
 8004a32:	1aff      	subgt	r7, r7, r3
 8004a34:	1ae4      	subgt	r4, r4, r3
 8004a36:	1af6      	subgt	r6, r6, r3
 8004a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	dd17      	ble.n	8004a6e <_strtod_l+0x73e>
 8004a3e:	461a      	mov	r2, r3
 8004a40:	4650      	mov	r0, sl
 8004a42:	9904      	ldr	r1, [sp, #16]
 8004a44:	f001 f884 	bl	8005b50 <__pow5mult>
 8004a48:	9004      	str	r0, [sp, #16]
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	f43f aeaf 	beq.w	80047ae <_strtod_l+0x47e>
 8004a50:	4601      	mov	r1, r0
 8004a52:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004a54:	4650      	mov	r0, sl
 8004a56:	f000 ffd3 	bl	8005a00 <__multiply>
 8004a5a:	9009      	str	r0, [sp, #36]	; 0x24
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	f43f aea6 	beq.w	80047ae <_strtod_l+0x47e>
 8004a62:	4650      	mov	r0, sl
 8004a64:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004a66:	f000 feb5 	bl	80057d4 <_Bfree>
 8004a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a6c:	931a      	str	r3, [sp, #104]	; 0x68
 8004a6e:	2f00      	cmp	r7, #0
 8004a70:	f300 808e 	bgt.w	8004b90 <_strtod_l+0x860>
 8004a74:	9b07      	ldr	r3, [sp, #28]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	dd08      	ble.n	8004a8c <_strtod_l+0x75c>
 8004a7a:	4650      	mov	r0, sl
 8004a7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004a7e:	9906      	ldr	r1, [sp, #24]
 8004a80:	f001 f866 	bl	8005b50 <__pow5mult>
 8004a84:	9006      	str	r0, [sp, #24]
 8004a86:	2800      	cmp	r0, #0
 8004a88:	f43f ae91 	beq.w	80047ae <_strtod_l+0x47e>
 8004a8c:	2c00      	cmp	r4, #0
 8004a8e:	dd08      	ble.n	8004aa2 <_strtod_l+0x772>
 8004a90:	4622      	mov	r2, r4
 8004a92:	4650      	mov	r0, sl
 8004a94:	9906      	ldr	r1, [sp, #24]
 8004a96:	f001 f8b5 	bl	8005c04 <__lshift>
 8004a9a:	9006      	str	r0, [sp, #24]
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	f43f ae86 	beq.w	80047ae <_strtod_l+0x47e>
 8004aa2:	2e00      	cmp	r6, #0
 8004aa4:	dd08      	ble.n	8004ab8 <_strtod_l+0x788>
 8004aa6:	4632      	mov	r2, r6
 8004aa8:	4650      	mov	r0, sl
 8004aaa:	9904      	ldr	r1, [sp, #16]
 8004aac:	f001 f8aa 	bl	8005c04 <__lshift>
 8004ab0:	9004      	str	r0, [sp, #16]
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	f43f ae7b 	beq.w	80047ae <_strtod_l+0x47e>
 8004ab8:	4650      	mov	r0, sl
 8004aba:	9a06      	ldr	r2, [sp, #24]
 8004abc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004abe:	f001 f92d 	bl	8005d1c <__mdiff>
 8004ac2:	4683      	mov	fp, r0
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	f43f ae72 	beq.w	80047ae <_strtod_l+0x47e>
 8004aca:	2400      	movs	r4, #0
 8004acc:	68c3      	ldr	r3, [r0, #12]
 8004ace:	9904      	ldr	r1, [sp, #16]
 8004ad0:	60c4      	str	r4, [r0, #12]
 8004ad2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ad4:	f001 f906 	bl	8005ce4 <__mcmp>
 8004ad8:	42a0      	cmp	r0, r4
 8004ada:	da6b      	bge.n	8004bb4 <_strtod_l+0x884>
 8004adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ade:	ea53 0308 	orrs.w	r3, r3, r8
 8004ae2:	f040 8091 	bne.w	8004c08 <_strtod_l+0x8d8>
 8004ae6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f040 808c 	bne.w	8004c08 <_strtod_l+0x8d8>
 8004af0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004af4:	0d1b      	lsrs	r3, r3, #20
 8004af6:	051b      	lsls	r3, r3, #20
 8004af8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004afc:	f240 8084 	bls.w	8004c08 <_strtod_l+0x8d8>
 8004b00:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004b04:	b91b      	cbnz	r3, 8004b0e <_strtod_l+0x7de>
 8004b06:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	dd7c      	ble.n	8004c08 <_strtod_l+0x8d8>
 8004b0e:	4659      	mov	r1, fp
 8004b10:	2201      	movs	r2, #1
 8004b12:	4650      	mov	r0, sl
 8004b14:	f001 f876 	bl	8005c04 <__lshift>
 8004b18:	9904      	ldr	r1, [sp, #16]
 8004b1a:	4683      	mov	fp, r0
 8004b1c:	f001 f8e2 	bl	8005ce4 <__mcmp>
 8004b20:	2800      	cmp	r0, #0
 8004b22:	dd71      	ble.n	8004c08 <_strtod_l+0x8d8>
 8004b24:	9905      	ldr	r1, [sp, #20]
 8004b26:	464b      	mov	r3, r9
 8004b28:	4a20      	ldr	r2, [pc, #128]	; (8004bac <_strtod_l+0x87c>)
 8004b2a:	2900      	cmp	r1, #0
 8004b2c:	f000 808c 	beq.w	8004c48 <_strtod_l+0x918>
 8004b30:	ea02 0109 	and.w	r1, r2, r9
 8004b34:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004b38:	f300 8086 	bgt.w	8004c48 <_strtod_l+0x918>
 8004b3c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004b40:	f77f aeaa 	ble.w	8004898 <_strtod_l+0x568>
 8004b44:	4640      	mov	r0, r8
 8004b46:	4649      	mov	r1, r9
 8004b48:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <_strtod_l+0x880>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f7fb fcce 	bl	80004ec <__aeabi_dmul>
 8004b50:	460b      	mov	r3, r1
 8004b52:	4303      	orrs	r3, r0
 8004b54:	bf08      	it	eq
 8004b56:	2322      	moveq	r3, #34	; 0x22
 8004b58:	4680      	mov	r8, r0
 8004b5a:	4689      	mov	r9, r1
 8004b5c:	bf08      	it	eq
 8004b5e:	f8ca 3000 	streq.w	r3, [sl]
 8004b62:	e62f      	b.n	80047c4 <_strtod_l+0x494>
 8004b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	ea03 0808 	and.w	r8, r3, r8
 8004b70:	e6e0      	b.n	8004934 <_strtod_l+0x604>
 8004b72:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004b76:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004b7a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004b7e:	35e2      	adds	r5, #226	; 0xe2
 8004b80:	fa07 f505 	lsl.w	r5, r7, r5
 8004b84:	970f      	str	r7, [sp, #60]	; 0x3c
 8004b86:	e747      	b.n	8004a18 <_strtod_l+0x6e8>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	2500      	movs	r5, #0
 8004b8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b8e:	e743      	b.n	8004a18 <_strtod_l+0x6e8>
 8004b90:	463a      	mov	r2, r7
 8004b92:	4650      	mov	r0, sl
 8004b94:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004b96:	f001 f835 	bl	8005c04 <__lshift>
 8004b9a:	901a      	str	r0, [sp, #104]	; 0x68
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	f47f af69 	bne.w	8004a74 <_strtod_l+0x744>
 8004ba2:	e604      	b.n	80047ae <_strtod_l+0x47e>
 8004ba4:	080087e8 	.word	0x080087e8
 8004ba8:	fffffc02 	.word	0xfffffc02
 8004bac:	7ff00000 	.word	0x7ff00000
 8004bb0:	39500000 	.word	0x39500000
 8004bb4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004bb8:	d165      	bne.n	8004c86 <_strtod_l+0x956>
 8004bba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004bbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004bc0:	b35a      	cbz	r2, 8004c1a <_strtod_l+0x8ea>
 8004bc2:	4a99      	ldr	r2, [pc, #612]	; (8004e28 <_strtod_l+0xaf8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d12b      	bne.n	8004c20 <_strtod_l+0x8f0>
 8004bc8:	9b05      	ldr	r3, [sp, #20]
 8004bca:	4641      	mov	r1, r8
 8004bcc:	b303      	cbz	r3, 8004c10 <_strtod_l+0x8e0>
 8004bce:	464a      	mov	r2, r9
 8004bd0:	4b96      	ldr	r3, [pc, #600]	; (8004e2c <_strtod_l+0xafc>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004bd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bdc:	d81b      	bhi.n	8004c16 <_strtod_l+0x8e6>
 8004bde:	0d1b      	lsrs	r3, r3, #20
 8004be0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	4299      	cmp	r1, r3
 8004bea:	d119      	bne.n	8004c20 <_strtod_l+0x8f0>
 8004bec:	4b90      	ldr	r3, [pc, #576]	; (8004e30 <_strtod_l+0xb00>)
 8004bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d102      	bne.n	8004bfa <_strtod_l+0x8ca>
 8004bf4:	3101      	adds	r1, #1
 8004bf6:	f43f adda 	beq.w	80047ae <_strtod_l+0x47e>
 8004bfa:	f04f 0800 	mov.w	r8, #0
 8004bfe:	4b8b      	ldr	r3, [pc, #556]	; (8004e2c <_strtod_l+0xafc>)
 8004c00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c02:	401a      	ands	r2, r3
 8004c04:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004c08:	9b05      	ldr	r3, [sp, #20]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d19a      	bne.n	8004b44 <_strtod_l+0x814>
 8004c0e:	e5d9      	b.n	80047c4 <_strtod_l+0x494>
 8004c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c14:	e7e8      	b.n	8004be8 <_strtod_l+0x8b8>
 8004c16:	4613      	mov	r3, r2
 8004c18:	e7e6      	b.n	8004be8 <_strtod_l+0x8b8>
 8004c1a:	ea53 0308 	orrs.w	r3, r3, r8
 8004c1e:	d081      	beq.n	8004b24 <_strtod_l+0x7f4>
 8004c20:	b1e5      	cbz	r5, 8004c5c <_strtod_l+0x92c>
 8004c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c24:	421d      	tst	r5, r3
 8004c26:	d0ef      	beq.n	8004c08 <_strtod_l+0x8d8>
 8004c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	9a05      	ldr	r2, [sp, #20]
 8004c30:	b1c3      	cbz	r3, 8004c64 <_strtod_l+0x934>
 8004c32:	f7ff fb5b 	bl	80042ec <sulp>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c3e:	f7fb fa9f 	bl	8000180 <__adddf3>
 8004c42:	4680      	mov	r8, r0
 8004c44:	4689      	mov	r9, r1
 8004c46:	e7df      	b.n	8004c08 <_strtod_l+0x8d8>
 8004c48:	4013      	ands	r3, r2
 8004c4a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004c4e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004c52:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004c56:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004c5a:	e7d5      	b.n	8004c08 <_strtod_l+0x8d8>
 8004c5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c5e:	ea13 0f08 	tst.w	r3, r8
 8004c62:	e7e0      	b.n	8004c26 <_strtod_l+0x8f6>
 8004c64:	f7ff fb42 	bl	80042ec <sulp>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c70:	f7fb fa84 	bl	800017c <__aeabi_dsub>
 8004c74:	2200      	movs	r2, #0
 8004c76:	2300      	movs	r3, #0
 8004c78:	4680      	mov	r8, r0
 8004c7a:	4689      	mov	r9, r1
 8004c7c:	f7fb fe9e 	bl	80009bc <__aeabi_dcmpeq>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	d0c1      	beq.n	8004c08 <_strtod_l+0x8d8>
 8004c84:	e608      	b.n	8004898 <_strtod_l+0x568>
 8004c86:	4658      	mov	r0, fp
 8004c88:	9904      	ldr	r1, [sp, #16]
 8004c8a:	f001 f9a9 	bl	8005fe0 <__ratio>
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c94:	4606      	mov	r6, r0
 8004c96:	460f      	mov	r7, r1
 8004c98:	f7fb fea4 	bl	80009e4 <__aeabi_dcmple>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d070      	beq.n	8004d82 <_strtod_l+0xa52>
 8004ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d042      	beq.n	8004d2c <_strtod_l+0x9fc>
 8004ca6:	2600      	movs	r6, #0
 8004ca8:	4f62      	ldr	r7, [pc, #392]	; (8004e34 <_strtod_l+0xb04>)
 8004caa:	4d62      	ldr	r5, [pc, #392]	; (8004e34 <_strtod_l+0xb04>)
 8004cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cb2:	0d1b      	lsrs	r3, r3, #20
 8004cb4:	051b      	lsls	r3, r3, #20
 8004cb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cba:	4b5f      	ldr	r3, [pc, #380]	; (8004e38 <_strtod_l+0xb08>)
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	f040 80c3 	bne.w	8004e48 <_strtod_l+0xb18>
 8004cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc4:	4640      	mov	r0, r8
 8004cc6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004cca:	4649      	mov	r1, r9
 8004ccc:	f001 f8b2 	bl	8005e34 <__ulp>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	4639      	mov	r1, r7
 8004cd8:	f7fb fc08 	bl	80004ec <__aeabi_dmul>
 8004cdc:	4642      	mov	r2, r8
 8004cde:	464b      	mov	r3, r9
 8004ce0:	f7fb fa4e 	bl	8000180 <__adddf3>
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4951      	ldr	r1, [pc, #324]	; (8004e2c <_strtod_l+0xafc>)
 8004ce8:	4a54      	ldr	r2, [pc, #336]	; (8004e3c <_strtod_l+0xb0c>)
 8004cea:	4019      	ands	r1, r3
 8004cec:	4291      	cmp	r1, r2
 8004cee:	4680      	mov	r8, r0
 8004cf0:	d95d      	bls.n	8004dae <_strtod_l+0xa7e>
 8004cf2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004cf4:	4b4e      	ldr	r3, [pc, #312]	; (8004e30 <_strtod_l+0xb00>)
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d103      	bne.n	8004d02 <_strtod_l+0x9d2>
 8004cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	f43f ad56 	beq.w	80047ae <_strtod_l+0x47e>
 8004d02:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004d06:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004e30 <_strtod_l+0xb00>
 8004d0a:	4650      	mov	r0, sl
 8004d0c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004d0e:	f000 fd61 	bl	80057d4 <_Bfree>
 8004d12:	4650      	mov	r0, sl
 8004d14:	9906      	ldr	r1, [sp, #24]
 8004d16:	f000 fd5d 	bl	80057d4 <_Bfree>
 8004d1a:	4650      	mov	r0, sl
 8004d1c:	9904      	ldr	r1, [sp, #16]
 8004d1e:	f000 fd59 	bl	80057d4 <_Bfree>
 8004d22:	4659      	mov	r1, fp
 8004d24:	4650      	mov	r0, sl
 8004d26:	f000 fd55 	bl	80057d4 <_Bfree>
 8004d2a:	e627      	b.n	800497c <_strtod_l+0x64c>
 8004d2c:	f1b8 0f00 	cmp.w	r8, #0
 8004d30:	d119      	bne.n	8004d66 <_strtod_l+0xa36>
 8004d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d38:	b9e3      	cbnz	r3, 8004d74 <_strtod_l+0xa44>
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	4639      	mov	r1, r7
 8004d40:	4b3c      	ldr	r3, [pc, #240]	; (8004e34 <_strtod_l+0xb04>)
 8004d42:	f7fb fe45 	bl	80009d0 <__aeabi_dcmplt>
 8004d46:	b9c8      	cbnz	r0, 8004d7c <_strtod_l+0xa4c>
 8004d48:	2200      	movs	r2, #0
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	4639      	mov	r1, r7
 8004d4e:	4b3c      	ldr	r3, [pc, #240]	; (8004e40 <_strtod_l+0xb10>)
 8004d50:	f7fb fbcc 	bl	80004ec <__aeabi_dmul>
 8004d54:	4604      	mov	r4, r0
 8004d56:	460d      	mov	r5, r1
 8004d58:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004d5c:	9416      	str	r4, [sp, #88]	; 0x58
 8004d5e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004d60:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004d64:	e7a2      	b.n	8004cac <_strtod_l+0x97c>
 8004d66:	f1b8 0f01 	cmp.w	r8, #1
 8004d6a:	d103      	bne.n	8004d74 <_strtod_l+0xa44>
 8004d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f43f ad92 	beq.w	8004898 <_strtod_l+0x568>
 8004d74:	2600      	movs	r6, #0
 8004d76:	2400      	movs	r4, #0
 8004d78:	4f32      	ldr	r7, [pc, #200]	; (8004e44 <_strtod_l+0xb14>)
 8004d7a:	e796      	b.n	8004caa <_strtod_l+0x97a>
 8004d7c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004d7e:	4d30      	ldr	r5, [pc, #192]	; (8004e40 <_strtod_l+0xb10>)
 8004d80:	e7ea      	b.n	8004d58 <_strtod_l+0xa28>
 8004d82:	4b2f      	ldr	r3, [pc, #188]	; (8004e40 <_strtod_l+0xb10>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	4630      	mov	r0, r6
 8004d88:	4639      	mov	r1, r7
 8004d8a:	f7fb fbaf 	bl	80004ec <__aeabi_dmul>
 8004d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d90:	4604      	mov	r4, r0
 8004d92:	460d      	mov	r5, r1
 8004d94:	b933      	cbnz	r3, 8004da4 <_strtod_l+0xa74>
 8004d96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d9a:	9010      	str	r0, [sp, #64]	; 0x40
 8004d9c:	9311      	str	r3, [sp, #68]	; 0x44
 8004d9e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004da2:	e783      	b.n	8004cac <_strtod_l+0x97c>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004dac:	e7f7      	b.n	8004d9e <_strtod_l+0xa6e>
 8004dae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004db2:	9b05      	ldr	r3, [sp, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1a8      	bne.n	8004d0a <_strtod_l+0x9da>
 8004db8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004dbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004dbe:	0d1b      	lsrs	r3, r3, #20
 8004dc0:	051b      	lsls	r3, r3, #20
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d1a1      	bne.n	8004d0a <_strtod_l+0x9da>
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	4629      	mov	r1, r5
 8004dca:	f7fb fe71 	bl	8000ab0 <__aeabi_d2lz>
 8004dce:	f7fb fb5f 	bl	8000490 <__aeabi_l2d>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	4629      	mov	r1, r5
 8004dda:	f7fb f9cf 	bl	800017c <__aeabi_dsub>
 8004dde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004de0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004de4:	ea43 0308 	orr.w	r3, r3, r8
 8004de8:	4313      	orrs	r3, r2
 8004dea:	4604      	mov	r4, r0
 8004dec:	460d      	mov	r5, r1
 8004dee:	d066      	beq.n	8004ebe <_strtod_l+0xb8e>
 8004df0:	a309      	add	r3, pc, #36	; (adr r3, 8004e18 <_strtod_l+0xae8>)
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	f7fb fdeb 	bl	80009d0 <__aeabi_dcmplt>
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	f47f ace2 	bne.w	80047c4 <_strtod_l+0x494>
 8004e00:	a307      	add	r3, pc, #28	; (adr r3, 8004e20 <_strtod_l+0xaf0>)
 8004e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e06:	4620      	mov	r0, r4
 8004e08:	4629      	mov	r1, r5
 8004e0a:	f7fb fdff 	bl	8000a0c <__aeabi_dcmpgt>
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	f43f af7b 	beq.w	8004d0a <_strtod_l+0x9da>
 8004e14:	e4d6      	b.n	80047c4 <_strtod_l+0x494>
 8004e16:	bf00      	nop
 8004e18:	94a03595 	.word	0x94a03595
 8004e1c:	3fdfffff 	.word	0x3fdfffff
 8004e20:	35afe535 	.word	0x35afe535
 8004e24:	3fe00000 	.word	0x3fe00000
 8004e28:	000fffff 	.word	0x000fffff
 8004e2c:	7ff00000 	.word	0x7ff00000
 8004e30:	7fefffff 	.word	0x7fefffff
 8004e34:	3ff00000 	.word	0x3ff00000
 8004e38:	7fe00000 	.word	0x7fe00000
 8004e3c:	7c9fffff 	.word	0x7c9fffff
 8004e40:	3fe00000 	.word	0x3fe00000
 8004e44:	bff00000 	.word	0xbff00000
 8004e48:	9b05      	ldr	r3, [sp, #20]
 8004e4a:	b313      	cbz	r3, 8004e92 <_strtod_l+0xb62>
 8004e4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004e52:	d81e      	bhi.n	8004e92 <_strtod_l+0xb62>
 8004e54:	a326      	add	r3, pc, #152	; (adr r3, 8004ef0 <_strtod_l+0xbc0>)
 8004e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	f7fb fdc1 	bl	80009e4 <__aeabi_dcmple>
 8004e62:	b190      	cbz	r0, 8004e8a <_strtod_l+0xb5a>
 8004e64:	4629      	mov	r1, r5
 8004e66:	4620      	mov	r0, r4
 8004e68:	f7fb fe02 	bl	8000a70 <__aeabi_d2uiz>
 8004e6c:	2801      	cmp	r0, #1
 8004e6e:	bf38      	it	cc
 8004e70:	2001      	movcc	r0, #1
 8004e72:	f7fb fac1 	bl	80003f8 <__aeabi_ui2d>
 8004e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e78:	4604      	mov	r4, r0
 8004e7a:	460d      	mov	r5, r1
 8004e7c:	b9d3      	cbnz	r3, 8004eb4 <_strtod_l+0xb84>
 8004e7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e82:	9012      	str	r0, [sp, #72]	; 0x48
 8004e84:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e86:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004e8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e8c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004e90:	1a9f      	subs	r7, r3, r2
 8004e92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e96:	f000 ffcd 	bl	8005e34 <__ulp>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	4639      	mov	r1, r7
 8004ea2:	f7fb fb23 	bl	80004ec <__aeabi_dmul>
 8004ea6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004eaa:	f7fb f969 	bl	8000180 <__adddf3>
 8004eae:	4680      	mov	r8, r0
 8004eb0:	4689      	mov	r9, r1
 8004eb2:	e77e      	b.n	8004db2 <_strtod_l+0xa82>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004ebc:	e7e3      	b.n	8004e86 <_strtod_l+0xb56>
 8004ebe:	a30e      	add	r3, pc, #56	; (adr r3, 8004ef8 <_strtod_l+0xbc8>)
 8004ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec4:	f7fb fd84 	bl	80009d0 <__aeabi_dcmplt>
 8004ec8:	e7a1      	b.n	8004e0e <_strtod_l+0xade>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	930a      	str	r3, [sp, #40]	; 0x28
 8004ece:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ed0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	f7ff ba71 	b.w	80043ba <_strtod_l+0x8a>
 8004ed8:	2a65      	cmp	r2, #101	; 0x65
 8004eda:	f43f ab63 	beq.w	80045a4 <_strtod_l+0x274>
 8004ede:	2a45      	cmp	r2, #69	; 0x45
 8004ee0:	f43f ab60 	beq.w	80045a4 <_strtod_l+0x274>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f7ff bb95 	b.w	8004614 <_strtod_l+0x2e4>
 8004eea:	bf00      	nop
 8004eec:	f3af 8000 	nop.w
 8004ef0:	ffc00000 	.word	0xffc00000
 8004ef4:	41dfffff 	.word	0x41dfffff
 8004ef8:	94a03595 	.word	0x94a03595
 8004efc:	3fcfffff 	.word	0x3fcfffff

08004f00 <strtod>:
 8004f00:	460a      	mov	r2, r1
 8004f02:	4601      	mov	r1, r0
 8004f04:	4802      	ldr	r0, [pc, #8]	; (8004f10 <strtod+0x10>)
 8004f06:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <strtod+0x14>)
 8004f08:	6800      	ldr	r0, [r0, #0]
 8004f0a:	f7ff ba11 	b.w	8004330 <_strtod_l>
 8004f0e:	bf00      	nop
 8004f10:	20000020 	.word	0x20000020
 8004f14:	20000088 	.word	0x20000088

08004f18 <strtok>:
 8004f18:	4b16      	ldr	r3, [pc, #88]	; (8004f74 <strtok+0x5c>)
 8004f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f1e:	681f      	ldr	r7, [r3, #0]
 8004f20:	4605      	mov	r5, r0
 8004f22:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004f24:	460e      	mov	r6, r1
 8004f26:	b9ec      	cbnz	r4, 8004f64 <strtok+0x4c>
 8004f28:	2050      	movs	r0, #80	; 0x50
 8004f2a:	f7ff f8bb 	bl	80040a4 <malloc>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	65b8      	str	r0, [r7, #88]	; 0x58
 8004f32:	b920      	cbnz	r0, 8004f3e <strtok+0x26>
 8004f34:	2157      	movs	r1, #87	; 0x57
 8004f36:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <strtok+0x60>)
 8004f38:	4810      	ldr	r0, [pc, #64]	; (8004f7c <strtok+0x64>)
 8004f3a:	f000 f849 	bl	8004fd0 <__assert_func>
 8004f3e:	e9c0 4400 	strd	r4, r4, [r0]
 8004f42:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004f46:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004f4a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004f4e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004f52:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004f56:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004f5a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004f5e:	6184      	str	r4, [r0, #24]
 8004f60:	7704      	strb	r4, [r0, #28]
 8004f62:	6244      	str	r4, [r0, #36]	; 0x24
 8004f64:	4631      	mov	r1, r6
 8004f66:	4628      	mov	r0, r5
 8004f68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f70:	f000 b806 	b.w	8004f80 <__strtok_r>
 8004f74:	20000020 	.word	0x20000020
 8004f78:	08008810 	.word	0x08008810
 8004f7c:	08008827 	.word	0x08008827

08004f80 <__strtok_r>:
 8004f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f82:	b908      	cbnz	r0, 8004f88 <__strtok_r+0x8>
 8004f84:	6810      	ldr	r0, [r2, #0]
 8004f86:	b188      	cbz	r0, 8004fac <__strtok_r+0x2c>
 8004f88:	4604      	mov	r4, r0
 8004f8a:	460f      	mov	r7, r1
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004f92:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004f96:	b91e      	cbnz	r6, 8004fa0 <__strtok_r+0x20>
 8004f98:	b965      	cbnz	r5, 8004fb4 <__strtok_r+0x34>
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	6015      	str	r5, [r2, #0]
 8004f9e:	e005      	b.n	8004fac <__strtok_r+0x2c>
 8004fa0:	42b5      	cmp	r5, r6
 8004fa2:	d1f6      	bne.n	8004f92 <__strtok_r+0x12>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1f0      	bne.n	8004f8a <__strtok_r+0xa>
 8004fa8:	6014      	str	r4, [r2, #0]
 8004faa:	7003      	strb	r3, [r0, #0]
 8004fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fae:	461c      	mov	r4, r3
 8004fb0:	e00c      	b.n	8004fcc <__strtok_r+0x4c>
 8004fb2:	b915      	cbnz	r5, 8004fba <__strtok_r+0x3a>
 8004fb4:	460e      	mov	r6, r1
 8004fb6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004fba:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004fbe:	42ab      	cmp	r3, r5
 8004fc0:	d1f7      	bne.n	8004fb2 <__strtok_r+0x32>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f3      	beq.n	8004fae <__strtok_r+0x2e>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004fcc:	6014      	str	r4, [r2, #0]
 8004fce:	e7ed      	b.n	8004fac <__strtok_r+0x2c>

08004fd0 <__assert_func>:
 8004fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004fd2:	4614      	mov	r4, r2
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <__assert_func+0x2c>)
 8004fd8:	4605      	mov	r5, r0
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68d8      	ldr	r0, [r3, #12]
 8004fde:	b14c      	cbz	r4, 8004ff4 <__assert_func+0x24>
 8004fe0:	4b07      	ldr	r3, [pc, #28]	; (8005000 <__assert_func+0x30>)
 8004fe2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004fe6:	9100      	str	r1, [sp, #0]
 8004fe8:	462b      	mov	r3, r5
 8004fea:	4906      	ldr	r1, [pc, #24]	; (8005004 <__assert_func+0x34>)
 8004fec:	f000 f80e 	bl	800500c <fiprintf>
 8004ff0:	f001 fdae 	bl	8006b50 <abort>
 8004ff4:	4b04      	ldr	r3, [pc, #16]	; (8005008 <__assert_func+0x38>)
 8004ff6:	461c      	mov	r4, r3
 8004ff8:	e7f3      	b.n	8004fe2 <__assert_func+0x12>
 8004ffa:	bf00      	nop
 8004ffc:	20000020 	.word	0x20000020
 8005000:	08008884 	.word	0x08008884
 8005004:	08008891 	.word	0x08008891
 8005008:	080088bf 	.word	0x080088bf

0800500c <fiprintf>:
 800500c:	b40e      	push	{r1, r2, r3}
 800500e:	b503      	push	{r0, r1, lr}
 8005010:	4601      	mov	r1, r0
 8005012:	ab03      	add	r3, sp, #12
 8005014:	4805      	ldr	r0, [pc, #20]	; (800502c <fiprintf+0x20>)
 8005016:	f853 2b04 	ldr.w	r2, [r3], #4
 800501a:	6800      	ldr	r0, [r0, #0]
 800501c:	9301      	str	r3, [sp, #4]
 800501e:	f001 f9e9 	bl	80063f4 <_vfiprintf_r>
 8005022:	b002      	add	sp, #8
 8005024:	f85d eb04 	ldr.w	lr, [sp], #4
 8005028:	b003      	add	sp, #12
 800502a:	4770      	bx	lr
 800502c:	20000020 	.word	0x20000020

08005030 <rshift>:
 8005030:	6903      	ldr	r3, [r0, #16]
 8005032:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005036:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800503a:	f100 0414 	add.w	r4, r0, #20
 800503e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005042:	dd46      	ble.n	80050d2 <rshift+0xa2>
 8005044:	f011 011f 	ands.w	r1, r1, #31
 8005048:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800504c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005050:	d10c      	bne.n	800506c <rshift+0x3c>
 8005052:	4629      	mov	r1, r5
 8005054:	f100 0710 	add.w	r7, r0, #16
 8005058:	42b1      	cmp	r1, r6
 800505a:	d335      	bcc.n	80050c8 <rshift+0x98>
 800505c:	1a9b      	subs	r3, r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	1eea      	subs	r2, r5, #3
 8005062:	4296      	cmp	r6, r2
 8005064:	bf38      	it	cc
 8005066:	2300      	movcc	r3, #0
 8005068:	4423      	add	r3, r4
 800506a:	e015      	b.n	8005098 <rshift+0x68>
 800506c:	46a1      	mov	r9, r4
 800506e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005072:	f1c1 0820 	rsb	r8, r1, #32
 8005076:	40cf      	lsrs	r7, r1
 8005078:	f105 0e04 	add.w	lr, r5, #4
 800507c:	4576      	cmp	r6, lr
 800507e:	46f4      	mov	ip, lr
 8005080:	d816      	bhi.n	80050b0 <rshift+0x80>
 8005082:	1a9a      	subs	r2, r3, r2
 8005084:	0092      	lsls	r2, r2, #2
 8005086:	3a04      	subs	r2, #4
 8005088:	3501      	adds	r5, #1
 800508a:	42ae      	cmp	r6, r5
 800508c:	bf38      	it	cc
 800508e:	2200      	movcc	r2, #0
 8005090:	18a3      	adds	r3, r4, r2
 8005092:	50a7      	str	r7, [r4, r2]
 8005094:	b107      	cbz	r7, 8005098 <rshift+0x68>
 8005096:	3304      	adds	r3, #4
 8005098:	42a3      	cmp	r3, r4
 800509a:	eba3 0204 	sub.w	r2, r3, r4
 800509e:	bf08      	it	eq
 80050a0:	2300      	moveq	r3, #0
 80050a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80050a6:	6102      	str	r2, [r0, #16]
 80050a8:	bf08      	it	eq
 80050aa:	6143      	streq	r3, [r0, #20]
 80050ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050b0:	f8dc c000 	ldr.w	ip, [ip]
 80050b4:	fa0c fc08 	lsl.w	ip, ip, r8
 80050b8:	ea4c 0707 	orr.w	r7, ip, r7
 80050bc:	f849 7b04 	str.w	r7, [r9], #4
 80050c0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80050c4:	40cf      	lsrs	r7, r1
 80050c6:	e7d9      	b.n	800507c <rshift+0x4c>
 80050c8:	f851 cb04 	ldr.w	ip, [r1], #4
 80050cc:	f847 cf04 	str.w	ip, [r7, #4]!
 80050d0:	e7c2      	b.n	8005058 <rshift+0x28>
 80050d2:	4623      	mov	r3, r4
 80050d4:	e7e0      	b.n	8005098 <rshift+0x68>

080050d6 <__hexdig_fun>:
 80050d6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80050da:	2b09      	cmp	r3, #9
 80050dc:	d802      	bhi.n	80050e4 <__hexdig_fun+0xe>
 80050de:	3820      	subs	r0, #32
 80050e0:	b2c0      	uxtb	r0, r0
 80050e2:	4770      	bx	lr
 80050e4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80050e8:	2b05      	cmp	r3, #5
 80050ea:	d801      	bhi.n	80050f0 <__hexdig_fun+0x1a>
 80050ec:	3847      	subs	r0, #71	; 0x47
 80050ee:	e7f7      	b.n	80050e0 <__hexdig_fun+0xa>
 80050f0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80050f4:	2b05      	cmp	r3, #5
 80050f6:	d801      	bhi.n	80050fc <__hexdig_fun+0x26>
 80050f8:	3827      	subs	r0, #39	; 0x27
 80050fa:	e7f1      	b.n	80050e0 <__hexdig_fun+0xa>
 80050fc:	2000      	movs	r0, #0
 80050fe:	4770      	bx	lr

08005100 <__gethex>:
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	b08b      	sub	sp, #44	; 0x2c
 8005106:	9305      	str	r3, [sp, #20]
 8005108:	4bb2      	ldr	r3, [pc, #712]	; (80053d4 <__gethex+0x2d4>)
 800510a:	9002      	str	r0, [sp, #8]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	468b      	mov	fp, r1
 8005110:	4618      	mov	r0, r3
 8005112:	4690      	mov	r8, r2
 8005114:	9303      	str	r3, [sp, #12]
 8005116:	f7fb f825 	bl	8000164 <strlen>
 800511a:	4682      	mov	sl, r0
 800511c:	9b03      	ldr	r3, [sp, #12]
 800511e:	f8db 2000 	ldr.w	r2, [fp]
 8005122:	4403      	add	r3, r0
 8005124:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005128:	9306      	str	r3, [sp, #24]
 800512a:	1c93      	adds	r3, r2, #2
 800512c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005130:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005134:	32fe      	adds	r2, #254	; 0xfe
 8005136:	18d1      	adds	r1, r2, r3
 8005138:	461f      	mov	r7, r3
 800513a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800513e:	9101      	str	r1, [sp, #4]
 8005140:	2830      	cmp	r0, #48	; 0x30
 8005142:	d0f8      	beq.n	8005136 <__gethex+0x36>
 8005144:	f7ff ffc7 	bl	80050d6 <__hexdig_fun>
 8005148:	4604      	mov	r4, r0
 800514a:	2800      	cmp	r0, #0
 800514c:	d13a      	bne.n	80051c4 <__gethex+0xc4>
 800514e:	4652      	mov	r2, sl
 8005150:	4638      	mov	r0, r7
 8005152:	9903      	ldr	r1, [sp, #12]
 8005154:	f001 fc1a 	bl	800698c <strncmp>
 8005158:	4605      	mov	r5, r0
 800515a:	2800      	cmp	r0, #0
 800515c:	d166      	bne.n	800522c <__gethex+0x12c>
 800515e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005162:	eb07 060a 	add.w	r6, r7, sl
 8005166:	f7ff ffb6 	bl	80050d6 <__hexdig_fun>
 800516a:	2800      	cmp	r0, #0
 800516c:	d060      	beq.n	8005230 <__gethex+0x130>
 800516e:	4633      	mov	r3, r6
 8005170:	7818      	ldrb	r0, [r3, #0]
 8005172:	461f      	mov	r7, r3
 8005174:	2830      	cmp	r0, #48	; 0x30
 8005176:	f103 0301 	add.w	r3, r3, #1
 800517a:	d0f9      	beq.n	8005170 <__gethex+0x70>
 800517c:	f7ff ffab 	bl	80050d6 <__hexdig_fun>
 8005180:	2301      	movs	r3, #1
 8005182:	fab0 f480 	clz	r4, r0
 8005186:	4635      	mov	r5, r6
 8005188:	0964      	lsrs	r4, r4, #5
 800518a:	9301      	str	r3, [sp, #4]
 800518c:	463a      	mov	r2, r7
 800518e:	4616      	mov	r6, r2
 8005190:	7830      	ldrb	r0, [r6, #0]
 8005192:	3201      	adds	r2, #1
 8005194:	f7ff ff9f 	bl	80050d6 <__hexdig_fun>
 8005198:	2800      	cmp	r0, #0
 800519a:	d1f8      	bne.n	800518e <__gethex+0x8e>
 800519c:	4652      	mov	r2, sl
 800519e:	4630      	mov	r0, r6
 80051a0:	9903      	ldr	r1, [sp, #12]
 80051a2:	f001 fbf3 	bl	800698c <strncmp>
 80051a6:	b980      	cbnz	r0, 80051ca <__gethex+0xca>
 80051a8:	b94d      	cbnz	r5, 80051be <__gethex+0xbe>
 80051aa:	eb06 050a 	add.w	r5, r6, sl
 80051ae:	462a      	mov	r2, r5
 80051b0:	4616      	mov	r6, r2
 80051b2:	7830      	ldrb	r0, [r6, #0]
 80051b4:	3201      	adds	r2, #1
 80051b6:	f7ff ff8e 	bl	80050d6 <__hexdig_fun>
 80051ba:	2800      	cmp	r0, #0
 80051bc:	d1f8      	bne.n	80051b0 <__gethex+0xb0>
 80051be:	1bad      	subs	r5, r5, r6
 80051c0:	00ad      	lsls	r5, r5, #2
 80051c2:	e004      	b.n	80051ce <__gethex+0xce>
 80051c4:	2400      	movs	r4, #0
 80051c6:	4625      	mov	r5, r4
 80051c8:	e7e0      	b.n	800518c <__gethex+0x8c>
 80051ca:	2d00      	cmp	r5, #0
 80051cc:	d1f7      	bne.n	80051be <__gethex+0xbe>
 80051ce:	7833      	ldrb	r3, [r6, #0]
 80051d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80051d4:	2b50      	cmp	r3, #80	; 0x50
 80051d6:	d139      	bne.n	800524c <__gethex+0x14c>
 80051d8:	7873      	ldrb	r3, [r6, #1]
 80051da:	2b2b      	cmp	r3, #43	; 0x2b
 80051dc:	d02a      	beq.n	8005234 <__gethex+0x134>
 80051de:	2b2d      	cmp	r3, #45	; 0x2d
 80051e0:	d02c      	beq.n	800523c <__gethex+0x13c>
 80051e2:	f04f 0900 	mov.w	r9, #0
 80051e6:	1c71      	adds	r1, r6, #1
 80051e8:	7808      	ldrb	r0, [r1, #0]
 80051ea:	f7ff ff74 	bl	80050d6 <__hexdig_fun>
 80051ee:	1e43      	subs	r3, r0, #1
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b18      	cmp	r3, #24
 80051f4:	d82a      	bhi.n	800524c <__gethex+0x14c>
 80051f6:	f1a0 0210 	sub.w	r2, r0, #16
 80051fa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80051fe:	f7ff ff6a 	bl	80050d6 <__hexdig_fun>
 8005202:	1e43      	subs	r3, r0, #1
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b18      	cmp	r3, #24
 8005208:	d91b      	bls.n	8005242 <__gethex+0x142>
 800520a:	f1b9 0f00 	cmp.w	r9, #0
 800520e:	d000      	beq.n	8005212 <__gethex+0x112>
 8005210:	4252      	negs	r2, r2
 8005212:	4415      	add	r5, r2
 8005214:	f8cb 1000 	str.w	r1, [fp]
 8005218:	b1d4      	cbz	r4, 8005250 <__gethex+0x150>
 800521a:	9b01      	ldr	r3, [sp, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	bf14      	ite	ne
 8005220:	2700      	movne	r7, #0
 8005222:	2706      	moveq	r7, #6
 8005224:	4638      	mov	r0, r7
 8005226:	b00b      	add	sp, #44	; 0x2c
 8005228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522c:	463e      	mov	r6, r7
 800522e:	4625      	mov	r5, r4
 8005230:	2401      	movs	r4, #1
 8005232:	e7cc      	b.n	80051ce <__gethex+0xce>
 8005234:	f04f 0900 	mov.w	r9, #0
 8005238:	1cb1      	adds	r1, r6, #2
 800523a:	e7d5      	b.n	80051e8 <__gethex+0xe8>
 800523c:	f04f 0901 	mov.w	r9, #1
 8005240:	e7fa      	b.n	8005238 <__gethex+0x138>
 8005242:	230a      	movs	r3, #10
 8005244:	fb03 0202 	mla	r2, r3, r2, r0
 8005248:	3a10      	subs	r2, #16
 800524a:	e7d6      	b.n	80051fa <__gethex+0xfa>
 800524c:	4631      	mov	r1, r6
 800524e:	e7e1      	b.n	8005214 <__gethex+0x114>
 8005250:	4621      	mov	r1, r4
 8005252:	1bf3      	subs	r3, r6, r7
 8005254:	3b01      	subs	r3, #1
 8005256:	2b07      	cmp	r3, #7
 8005258:	dc0a      	bgt.n	8005270 <__gethex+0x170>
 800525a:	9802      	ldr	r0, [sp, #8]
 800525c:	f000 fa7a 	bl	8005754 <_Balloc>
 8005260:	4604      	mov	r4, r0
 8005262:	b940      	cbnz	r0, 8005276 <__gethex+0x176>
 8005264:	4602      	mov	r2, r0
 8005266:	21de      	movs	r1, #222	; 0xde
 8005268:	4b5b      	ldr	r3, [pc, #364]	; (80053d8 <__gethex+0x2d8>)
 800526a:	485c      	ldr	r0, [pc, #368]	; (80053dc <__gethex+0x2dc>)
 800526c:	f7ff feb0 	bl	8004fd0 <__assert_func>
 8005270:	3101      	adds	r1, #1
 8005272:	105b      	asrs	r3, r3, #1
 8005274:	e7ef      	b.n	8005256 <__gethex+0x156>
 8005276:	f04f 0b00 	mov.w	fp, #0
 800527a:	f100 0914 	add.w	r9, r0, #20
 800527e:	f1ca 0301 	rsb	r3, sl, #1
 8005282:	f8cd 9010 	str.w	r9, [sp, #16]
 8005286:	f8cd b004 	str.w	fp, [sp, #4]
 800528a:	9308      	str	r3, [sp, #32]
 800528c:	42b7      	cmp	r7, r6
 800528e:	d33f      	bcc.n	8005310 <__gethex+0x210>
 8005290:	9f04      	ldr	r7, [sp, #16]
 8005292:	9b01      	ldr	r3, [sp, #4]
 8005294:	f847 3b04 	str.w	r3, [r7], #4
 8005298:	eba7 0709 	sub.w	r7, r7, r9
 800529c:	10bf      	asrs	r7, r7, #2
 800529e:	6127      	str	r7, [r4, #16]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fb49 	bl	8005938 <__hi0bits>
 80052a6:	017f      	lsls	r7, r7, #5
 80052a8:	f8d8 6000 	ldr.w	r6, [r8]
 80052ac:	1a3f      	subs	r7, r7, r0
 80052ae:	42b7      	cmp	r7, r6
 80052b0:	dd62      	ble.n	8005378 <__gethex+0x278>
 80052b2:	1bbf      	subs	r7, r7, r6
 80052b4:	4639      	mov	r1, r7
 80052b6:	4620      	mov	r0, r4
 80052b8:	f000 fee3 	bl	8006082 <__any_on>
 80052bc:	4682      	mov	sl, r0
 80052be:	b1a8      	cbz	r0, 80052ec <__gethex+0x1ec>
 80052c0:	f04f 0a01 	mov.w	sl, #1
 80052c4:	1e7b      	subs	r3, r7, #1
 80052c6:	1159      	asrs	r1, r3, #5
 80052c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80052cc:	f003 021f 	and.w	r2, r3, #31
 80052d0:	fa0a f202 	lsl.w	r2, sl, r2
 80052d4:	420a      	tst	r2, r1
 80052d6:	d009      	beq.n	80052ec <__gethex+0x1ec>
 80052d8:	4553      	cmp	r3, sl
 80052da:	dd05      	ble.n	80052e8 <__gethex+0x1e8>
 80052dc:	4620      	mov	r0, r4
 80052de:	1eb9      	subs	r1, r7, #2
 80052e0:	f000 fecf 	bl	8006082 <__any_on>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d144      	bne.n	8005372 <__gethex+0x272>
 80052e8:	f04f 0a02 	mov.w	sl, #2
 80052ec:	4639      	mov	r1, r7
 80052ee:	4620      	mov	r0, r4
 80052f0:	f7ff fe9e 	bl	8005030 <rshift>
 80052f4:	443d      	add	r5, r7
 80052f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80052fa:	42ab      	cmp	r3, r5
 80052fc:	da4a      	bge.n	8005394 <__gethex+0x294>
 80052fe:	4621      	mov	r1, r4
 8005300:	9802      	ldr	r0, [sp, #8]
 8005302:	f000 fa67 	bl	80057d4 <_Bfree>
 8005306:	2300      	movs	r3, #0
 8005308:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800530a:	27a3      	movs	r7, #163	; 0xa3
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	e789      	b.n	8005224 <__gethex+0x124>
 8005310:	1e73      	subs	r3, r6, #1
 8005312:	9a06      	ldr	r2, [sp, #24]
 8005314:	9307      	str	r3, [sp, #28]
 8005316:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800531a:	4293      	cmp	r3, r2
 800531c:	d019      	beq.n	8005352 <__gethex+0x252>
 800531e:	f1bb 0f20 	cmp.w	fp, #32
 8005322:	d107      	bne.n	8005334 <__gethex+0x234>
 8005324:	9b04      	ldr	r3, [sp, #16]
 8005326:	9a01      	ldr	r2, [sp, #4]
 8005328:	f843 2b04 	str.w	r2, [r3], #4
 800532c:	9304      	str	r3, [sp, #16]
 800532e:	2300      	movs	r3, #0
 8005330:	469b      	mov	fp, r3
 8005332:	9301      	str	r3, [sp, #4]
 8005334:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005338:	f7ff fecd 	bl	80050d6 <__hexdig_fun>
 800533c:	9b01      	ldr	r3, [sp, #4]
 800533e:	f000 000f 	and.w	r0, r0, #15
 8005342:	fa00 f00b 	lsl.w	r0, r0, fp
 8005346:	4303      	orrs	r3, r0
 8005348:	9301      	str	r3, [sp, #4]
 800534a:	f10b 0b04 	add.w	fp, fp, #4
 800534e:	9b07      	ldr	r3, [sp, #28]
 8005350:	e00d      	b.n	800536e <__gethex+0x26e>
 8005352:	9a08      	ldr	r2, [sp, #32]
 8005354:	1e73      	subs	r3, r6, #1
 8005356:	4413      	add	r3, r2
 8005358:	42bb      	cmp	r3, r7
 800535a:	d3e0      	bcc.n	800531e <__gethex+0x21e>
 800535c:	4618      	mov	r0, r3
 800535e:	4652      	mov	r2, sl
 8005360:	9903      	ldr	r1, [sp, #12]
 8005362:	9309      	str	r3, [sp, #36]	; 0x24
 8005364:	f001 fb12 	bl	800698c <strncmp>
 8005368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800536a:	2800      	cmp	r0, #0
 800536c:	d1d7      	bne.n	800531e <__gethex+0x21e>
 800536e:	461e      	mov	r6, r3
 8005370:	e78c      	b.n	800528c <__gethex+0x18c>
 8005372:	f04f 0a03 	mov.w	sl, #3
 8005376:	e7b9      	b.n	80052ec <__gethex+0x1ec>
 8005378:	da09      	bge.n	800538e <__gethex+0x28e>
 800537a:	1bf7      	subs	r7, r6, r7
 800537c:	4621      	mov	r1, r4
 800537e:	463a      	mov	r2, r7
 8005380:	9802      	ldr	r0, [sp, #8]
 8005382:	f000 fc3f 	bl	8005c04 <__lshift>
 8005386:	4604      	mov	r4, r0
 8005388:	1bed      	subs	r5, r5, r7
 800538a:	f100 0914 	add.w	r9, r0, #20
 800538e:	f04f 0a00 	mov.w	sl, #0
 8005392:	e7b0      	b.n	80052f6 <__gethex+0x1f6>
 8005394:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005398:	42a8      	cmp	r0, r5
 800539a:	dd72      	ble.n	8005482 <__gethex+0x382>
 800539c:	1b45      	subs	r5, r0, r5
 800539e:	42ae      	cmp	r6, r5
 80053a0:	dc35      	bgt.n	800540e <__gethex+0x30e>
 80053a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d029      	beq.n	80053fe <__gethex+0x2fe>
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d02b      	beq.n	8005406 <__gethex+0x306>
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d11c      	bne.n	80053ec <__gethex+0x2ec>
 80053b2:	42ae      	cmp	r6, r5
 80053b4:	d11a      	bne.n	80053ec <__gethex+0x2ec>
 80053b6:	2e01      	cmp	r6, #1
 80053b8:	d112      	bne.n	80053e0 <__gethex+0x2e0>
 80053ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80053be:	9a05      	ldr	r2, [sp, #20]
 80053c0:	2762      	movs	r7, #98	; 0x62
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	2301      	movs	r3, #1
 80053c6:	6123      	str	r3, [r4, #16]
 80053c8:	f8c9 3000 	str.w	r3, [r9]
 80053cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80053ce:	601c      	str	r4, [r3, #0]
 80053d0:	e728      	b.n	8005224 <__gethex+0x124>
 80053d2:	bf00      	nop
 80053d4:	08008938 	.word	0x08008938
 80053d8:	080088c0 	.word	0x080088c0
 80053dc:	080088d1 	.word	0x080088d1
 80053e0:	4620      	mov	r0, r4
 80053e2:	1e71      	subs	r1, r6, #1
 80053e4:	f000 fe4d 	bl	8006082 <__any_on>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d1e6      	bne.n	80053ba <__gethex+0x2ba>
 80053ec:	4621      	mov	r1, r4
 80053ee:	9802      	ldr	r0, [sp, #8]
 80053f0:	f000 f9f0 	bl	80057d4 <_Bfree>
 80053f4:	2300      	movs	r3, #0
 80053f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80053f8:	2750      	movs	r7, #80	; 0x50
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	e712      	b.n	8005224 <__gethex+0x124>
 80053fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1f3      	bne.n	80053ec <__gethex+0x2ec>
 8005404:	e7d9      	b.n	80053ba <__gethex+0x2ba>
 8005406:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1d6      	bne.n	80053ba <__gethex+0x2ba>
 800540c:	e7ee      	b.n	80053ec <__gethex+0x2ec>
 800540e:	1e6f      	subs	r7, r5, #1
 8005410:	f1ba 0f00 	cmp.w	sl, #0
 8005414:	d132      	bne.n	800547c <__gethex+0x37c>
 8005416:	b127      	cbz	r7, 8005422 <__gethex+0x322>
 8005418:	4639      	mov	r1, r7
 800541a:	4620      	mov	r0, r4
 800541c:	f000 fe31 	bl	8006082 <__any_on>
 8005420:	4682      	mov	sl, r0
 8005422:	2101      	movs	r1, #1
 8005424:	117b      	asrs	r3, r7, #5
 8005426:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800542a:	f007 071f 	and.w	r7, r7, #31
 800542e:	fa01 f707 	lsl.w	r7, r1, r7
 8005432:	421f      	tst	r7, r3
 8005434:	f04f 0702 	mov.w	r7, #2
 8005438:	4629      	mov	r1, r5
 800543a:	4620      	mov	r0, r4
 800543c:	bf18      	it	ne
 800543e:	f04a 0a02 	orrne.w	sl, sl, #2
 8005442:	1b76      	subs	r6, r6, r5
 8005444:	f7ff fdf4 	bl	8005030 <rshift>
 8005448:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800544c:	f1ba 0f00 	cmp.w	sl, #0
 8005450:	d048      	beq.n	80054e4 <__gethex+0x3e4>
 8005452:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d015      	beq.n	8005486 <__gethex+0x386>
 800545a:	2b03      	cmp	r3, #3
 800545c:	d017      	beq.n	800548e <__gethex+0x38e>
 800545e:	2b01      	cmp	r3, #1
 8005460:	d109      	bne.n	8005476 <__gethex+0x376>
 8005462:	f01a 0f02 	tst.w	sl, #2
 8005466:	d006      	beq.n	8005476 <__gethex+0x376>
 8005468:	f8d9 0000 	ldr.w	r0, [r9]
 800546c:	ea4a 0a00 	orr.w	sl, sl, r0
 8005470:	f01a 0f01 	tst.w	sl, #1
 8005474:	d10e      	bne.n	8005494 <__gethex+0x394>
 8005476:	f047 0710 	orr.w	r7, r7, #16
 800547a:	e033      	b.n	80054e4 <__gethex+0x3e4>
 800547c:	f04f 0a01 	mov.w	sl, #1
 8005480:	e7cf      	b.n	8005422 <__gethex+0x322>
 8005482:	2701      	movs	r7, #1
 8005484:	e7e2      	b.n	800544c <__gethex+0x34c>
 8005486:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005488:	f1c3 0301 	rsb	r3, r3, #1
 800548c:	9315      	str	r3, [sp, #84]	; 0x54
 800548e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0f0      	beq.n	8005476 <__gethex+0x376>
 8005494:	f04f 0c00 	mov.w	ip, #0
 8005498:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800549c:	f104 0314 	add.w	r3, r4, #20
 80054a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80054a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80054ae:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80054b2:	d01c      	beq.n	80054ee <__gethex+0x3ee>
 80054b4:	3201      	adds	r2, #1
 80054b6:	6002      	str	r2, [r0, #0]
 80054b8:	2f02      	cmp	r7, #2
 80054ba:	f104 0314 	add.w	r3, r4, #20
 80054be:	d13d      	bne.n	800553c <__gethex+0x43c>
 80054c0:	f8d8 2000 	ldr.w	r2, [r8]
 80054c4:	3a01      	subs	r2, #1
 80054c6:	42b2      	cmp	r2, r6
 80054c8:	d10a      	bne.n	80054e0 <__gethex+0x3e0>
 80054ca:	2201      	movs	r2, #1
 80054cc:	1171      	asrs	r1, r6, #5
 80054ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80054d2:	f006 061f 	and.w	r6, r6, #31
 80054d6:	fa02 f606 	lsl.w	r6, r2, r6
 80054da:	421e      	tst	r6, r3
 80054dc:	bf18      	it	ne
 80054de:	4617      	movne	r7, r2
 80054e0:	f047 0720 	orr.w	r7, r7, #32
 80054e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054e6:	601c      	str	r4, [r3, #0]
 80054e8:	9b05      	ldr	r3, [sp, #20]
 80054ea:	601d      	str	r5, [r3, #0]
 80054ec:	e69a      	b.n	8005224 <__gethex+0x124>
 80054ee:	4299      	cmp	r1, r3
 80054f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80054f4:	d8d8      	bhi.n	80054a8 <__gethex+0x3a8>
 80054f6:	68a3      	ldr	r3, [r4, #8]
 80054f8:	459b      	cmp	fp, r3
 80054fa:	db17      	blt.n	800552c <__gethex+0x42c>
 80054fc:	6861      	ldr	r1, [r4, #4]
 80054fe:	9802      	ldr	r0, [sp, #8]
 8005500:	3101      	adds	r1, #1
 8005502:	f000 f927 	bl	8005754 <_Balloc>
 8005506:	4681      	mov	r9, r0
 8005508:	b918      	cbnz	r0, 8005512 <__gethex+0x412>
 800550a:	4602      	mov	r2, r0
 800550c:	2184      	movs	r1, #132	; 0x84
 800550e:	4b19      	ldr	r3, [pc, #100]	; (8005574 <__gethex+0x474>)
 8005510:	e6ab      	b.n	800526a <__gethex+0x16a>
 8005512:	6922      	ldr	r2, [r4, #16]
 8005514:	f104 010c 	add.w	r1, r4, #12
 8005518:	3202      	adds	r2, #2
 800551a:	0092      	lsls	r2, r2, #2
 800551c:	300c      	adds	r0, #12
 800551e:	f000 f8ff 	bl	8005720 <memcpy>
 8005522:	4621      	mov	r1, r4
 8005524:	9802      	ldr	r0, [sp, #8]
 8005526:	f000 f955 	bl	80057d4 <_Bfree>
 800552a:	464c      	mov	r4, r9
 800552c:	6923      	ldr	r3, [r4, #16]
 800552e:	1c5a      	adds	r2, r3, #1
 8005530:	6122      	str	r2, [r4, #16]
 8005532:	2201      	movs	r2, #1
 8005534:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005538:	615a      	str	r2, [r3, #20]
 800553a:	e7bd      	b.n	80054b8 <__gethex+0x3b8>
 800553c:	6922      	ldr	r2, [r4, #16]
 800553e:	455a      	cmp	r2, fp
 8005540:	dd0b      	ble.n	800555a <__gethex+0x45a>
 8005542:	2101      	movs	r1, #1
 8005544:	4620      	mov	r0, r4
 8005546:	f7ff fd73 	bl	8005030 <rshift>
 800554a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800554e:	3501      	adds	r5, #1
 8005550:	42ab      	cmp	r3, r5
 8005552:	f6ff aed4 	blt.w	80052fe <__gethex+0x1fe>
 8005556:	2701      	movs	r7, #1
 8005558:	e7c2      	b.n	80054e0 <__gethex+0x3e0>
 800555a:	f016 061f 	ands.w	r6, r6, #31
 800555e:	d0fa      	beq.n	8005556 <__gethex+0x456>
 8005560:	4453      	add	r3, sl
 8005562:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005566:	f000 f9e7 	bl	8005938 <__hi0bits>
 800556a:	f1c6 0620 	rsb	r6, r6, #32
 800556e:	42b0      	cmp	r0, r6
 8005570:	dbe7      	blt.n	8005542 <__gethex+0x442>
 8005572:	e7f0      	b.n	8005556 <__gethex+0x456>
 8005574:	080088c0 	.word	0x080088c0

08005578 <L_shift>:
 8005578:	f1c2 0208 	rsb	r2, r2, #8
 800557c:	0092      	lsls	r2, r2, #2
 800557e:	b570      	push	{r4, r5, r6, lr}
 8005580:	f1c2 0620 	rsb	r6, r2, #32
 8005584:	6843      	ldr	r3, [r0, #4]
 8005586:	6804      	ldr	r4, [r0, #0]
 8005588:	fa03 f506 	lsl.w	r5, r3, r6
 800558c:	432c      	orrs	r4, r5
 800558e:	40d3      	lsrs	r3, r2
 8005590:	6004      	str	r4, [r0, #0]
 8005592:	f840 3f04 	str.w	r3, [r0, #4]!
 8005596:	4288      	cmp	r0, r1
 8005598:	d3f4      	bcc.n	8005584 <L_shift+0xc>
 800559a:	bd70      	pop	{r4, r5, r6, pc}

0800559c <__match>:
 800559c:	b530      	push	{r4, r5, lr}
 800559e:	6803      	ldr	r3, [r0, #0]
 80055a0:	3301      	adds	r3, #1
 80055a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055a6:	b914      	cbnz	r4, 80055ae <__match+0x12>
 80055a8:	6003      	str	r3, [r0, #0]
 80055aa:	2001      	movs	r0, #1
 80055ac:	bd30      	pop	{r4, r5, pc}
 80055ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80055b6:	2d19      	cmp	r5, #25
 80055b8:	bf98      	it	ls
 80055ba:	3220      	addls	r2, #32
 80055bc:	42a2      	cmp	r2, r4
 80055be:	d0f0      	beq.n	80055a2 <__match+0x6>
 80055c0:	2000      	movs	r0, #0
 80055c2:	e7f3      	b.n	80055ac <__match+0x10>

080055c4 <__hexnan>:
 80055c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c8:	2500      	movs	r5, #0
 80055ca:	680b      	ldr	r3, [r1, #0]
 80055cc:	4682      	mov	sl, r0
 80055ce:	115e      	asrs	r6, r3, #5
 80055d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80055d4:	f013 031f 	ands.w	r3, r3, #31
 80055d8:	bf18      	it	ne
 80055da:	3604      	addne	r6, #4
 80055dc:	1f37      	subs	r7, r6, #4
 80055de:	46b9      	mov	r9, r7
 80055e0:	463c      	mov	r4, r7
 80055e2:	46ab      	mov	fp, r5
 80055e4:	b087      	sub	sp, #28
 80055e6:	4690      	mov	r8, r2
 80055e8:	6802      	ldr	r2, [r0, #0]
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	f846 5c04 	str.w	r5, [r6, #-4]
 80055f0:	9502      	str	r5, [sp, #8]
 80055f2:	7851      	ldrb	r1, [r2, #1]
 80055f4:	1c53      	adds	r3, r2, #1
 80055f6:	9303      	str	r3, [sp, #12]
 80055f8:	b341      	cbz	r1, 800564c <__hexnan+0x88>
 80055fa:	4608      	mov	r0, r1
 80055fc:	9205      	str	r2, [sp, #20]
 80055fe:	9104      	str	r1, [sp, #16]
 8005600:	f7ff fd69 	bl	80050d6 <__hexdig_fun>
 8005604:	2800      	cmp	r0, #0
 8005606:	d14f      	bne.n	80056a8 <__hexnan+0xe4>
 8005608:	9904      	ldr	r1, [sp, #16]
 800560a:	9a05      	ldr	r2, [sp, #20]
 800560c:	2920      	cmp	r1, #32
 800560e:	d818      	bhi.n	8005642 <__hexnan+0x7e>
 8005610:	9b02      	ldr	r3, [sp, #8]
 8005612:	459b      	cmp	fp, r3
 8005614:	dd13      	ble.n	800563e <__hexnan+0x7a>
 8005616:	454c      	cmp	r4, r9
 8005618:	d206      	bcs.n	8005628 <__hexnan+0x64>
 800561a:	2d07      	cmp	r5, #7
 800561c:	dc04      	bgt.n	8005628 <__hexnan+0x64>
 800561e:	462a      	mov	r2, r5
 8005620:	4649      	mov	r1, r9
 8005622:	4620      	mov	r0, r4
 8005624:	f7ff ffa8 	bl	8005578 <L_shift>
 8005628:	4544      	cmp	r4, r8
 800562a:	d950      	bls.n	80056ce <__hexnan+0x10a>
 800562c:	2300      	movs	r3, #0
 800562e:	f1a4 0904 	sub.w	r9, r4, #4
 8005632:	f844 3c04 	str.w	r3, [r4, #-4]
 8005636:	461d      	mov	r5, r3
 8005638:	464c      	mov	r4, r9
 800563a:	f8cd b008 	str.w	fp, [sp, #8]
 800563e:	9a03      	ldr	r2, [sp, #12]
 8005640:	e7d7      	b.n	80055f2 <__hexnan+0x2e>
 8005642:	2929      	cmp	r1, #41	; 0x29
 8005644:	d156      	bne.n	80056f4 <__hexnan+0x130>
 8005646:	3202      	adds	r2, #2
 8005648:	f8ca 2000 	str.w	r2, [sl]
 800564c:	f1bb 0f00 	cmp.w	fp, #0
 8005650:	d050      	beq.n	80056f4 <__hexnan+0x130>
 8005652:	454c      	cmp	r4, r9
 8005654:	d206      	bcs.n	8005664 <__hexnan+0xa0>
 8005656:	2d07      	cmp	r5, #7
 8005658:	dc04      	bgt.n	8005664 <__hexnan+0xa0>
 800565a:	462a      	mov	r2, r5
 800565c:	4649      	mov	r1, r9
 800565e:	4620      	mov	r0, r4
 8005660:	f7ff ff8a 	bl	8005578 <L_shift>
 8005664:	4544      	cmp	r4, r8
 8005666:	d934      	bls.n	80056d2 <__hexnan+0x10e>
 8005668:	4623      	mov	r3, r4
 800566a:	f1a8 0204 	sub.w	r2, r8, #4
 800566e:	f853 1b04 	ldr.w	r1, [r3], #4
 8005672:	429f      	cmp	r7, r3
 8005674:	f842 1f04 	str.w	r1, [r2, #4]!
 8005678:	d2f9      	bcs.n	800566e <__hexnan+0xaa>
 800567a:	1b3b      	subs	r3, r7, r4
 800567c:	f023 0303 	bic.w	r3, r3, #3
 8005680:	3304      	adds	r3, #4
 8005682:	3401      	adds	r4, #1
 8005684:	3e03      	subs	r6, #3
 8005686:	42b4      	cmp	r4, r6
 8005688:	bf88      	it	hi
 800568a:	2304      	movhi	r3, #4
 800568c:	2200      	movs	r2, #0
 800568e:	4443      	add	r3, r8
 8005690:	f843 2b04 	str.w	r2, [r3], #4
 8005694:	429f      	cmp	r7, r3
 8005696:	d2fb      	bcs.n	8005690 <__hexnan+0xcc>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	b91b      	cbnz	r3, 80056a4 <__hexnan+0xe0>
 800569c:	4547      	cmp	r7, r8
 800569e:	d127      	bne.n	80056f0 <__hexnan+0x12c>
 80056a0:	2301      	movs	r3, #1
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	2005      	movs	r0, #5
 80056a6:	e026      	b.n	80056f6 <__hexnan+0x132>
 80056a8:	3501      	adds	r5, #1
 80056aa:	2d08      	cmp	r5, #8
 80056ac:	f10b 0b01 	add.w	fp, fp, #1
 80056b0:	dd06      	ble.n	80056c0 <__hexnan+0xfc>
 80056b2:	4544      	cmp	r4, r8
 80056b4:	d9c3      	bls.n	800563e <__hexnan+0x7a>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2501      	movs	r5, #1
 80056ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80056be:	3c04      	subs	r4, #4
 80056c0:	6822      	ldr	r2, [r4, #0]
 80056c2:	f000 000f 	and.w	r0, r0, #15
 80056c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80056ca:	6022      	str	r2, [r4, #0]
 80056cc:	e7b7      	b.n	800563e <__hexnan+0x7a>
 80056ce:	2508      	movs	r5, #8
 80056d0:	e7b5      	b.n	800563e <__hexnan+0x7a>
 80056d2:	9b01      	ldr	r3, [sp, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0df      	beq.n	8005698 <__hexnan+0xd4>
 80056d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056dc:	f1c3 0320 	rsb	r3, r3, #32
 80056e0:	fa22 f303 	lsr.w	r3, r2, r3
 80056e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80056e8:	401a      	ands	r2, r3
 80056ea:	f846 2c04 	str.w	r2, [r6, #-4]
 80056ee:	e7d3      	b.n	8005698 <__hexnan+0xd4>
 80056f0:	3f04      	subs	r7, #4
 80056f2:	e7d1      	b.n	8005698 <__hexnan+0xd4>
 80056f4:	2004      	movs	r0, #4
 80056f6:	b007      	add	sp, #28
 80056f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080056fc <__ascii_mbtowc>:
 80056fc:	b082      	sub	sp, #8
 80056fe:	b901      	cbnz	r1, 8005702 <__ascii_mbtowc+0x6>
 8005700:	a901      	add	r1, sp, #4
 8005702:	b142      	cbz	r2, 8005716 <__ascii_mbtowc+0x1a>
 8005704:	b14b      	cbz	r3, 800571a <__ascii_mbtowc+0x1e>
 8005706:	7813      	ldrb	r3, [r2, #0]
 8005708:	600b      	str	r3, [r1, #0]
 800570a:	7812      	ldrb	r2, [r2, #0]
 800570c:	1e10      	subs	r0, r2, #0
 800570e:	bf18      	it	ne
 8005710:	2001      	movne	r0, #1
 8005712:	b002      	add	sp, #8
 8005714:	4770      	bx	lr
 8005716:	4610      	mov	r0, r2
 8005718:	e7fb      	b.n	8005712 <__ascii_mbtowc+0x16>
 800571a:	f06f 0001 	mvn.w	r0, #1
 800571e:	e7f8      	b.n	8005712 <__ascii_mbtowc+0x16>

08005720 <memcpy>:
 8005720:	440a      	add	r2, r1
 8005722:	4291      	cmp	r1, r2
 8005724:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005728:	d100      	bne.n	800572c <memcpy+0xc>
 800572a:	4770      	bx	lr
 800572c:	b510      	push	{r4, lr}
 800572e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005732:	4291      	cmp	r1, r2
 8005734:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005738:	d1f9      	bne.n	800572e <memcpy+0xe>
 800573a:	bd10      	pop	{r4, pc}

0800573c <__malloc_lock>:
 800573c:	4801      	ldr	r0, [pc, #4]	; (8005744 <__malloc_lock+0x8>)
 800573e:	f001 bbc3 	b.w	8006ec8 <__retarget_lock_acquire_recursive>
 8005742:	bf00      	nop
 8005744:	20000850 	.word	0x20000850

08005748 <__malloc_unlock>:
 8005748:	4801      	ldr	r0, [pc, #4]	; (8005750 <__malloc_unlock+0x8>)
 800574a:	f001 bbbe 	b.w	8006eca <__retarget_lock_release_recursive>
 800574e:	bf00      	nop
 8005750:	20000850 	.word	0x20000850

08005754 <_Balloc>:
 8005754:	b570      	push	{r4, r5, r6, lr}
 8005756:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005758:	4604      	mov	r4, r0
 800575a:	460d      	mov	r5, r1
 800575c:	b976      	cbnz	r6, 800577c <_Balloc+0x28>
 800575e:	2010      	movs	r0, #16
 8005760:	f7fe fca0 	bl	80040a4 <malloc>
 8005764:	4602      	mov	r2, r0
 8005766:	6260      	str	r0, [r4, #36]	; 0x24
 8005768:	b920      	cbnz	r0, 8005774 <_Balloc+0x20>
 800576a:	2166      	movs	r1, #102	; 0x66
 800576c:	4b17      	ldr	r3, [pc, #92]	; (80057cc <_Balloc+0x78>)
 800576e:	4818      	ldr	r0, [pc, #96]	; (80057d0 <_Balloc+0x7c>)
 8005770:	f7ff fc2e 	bl	8004fd0 <__assert_func>
 8005774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005778:	6006      	str	r6, [r0, #0]
 800577a:	60c6      	str	r6, [r0, #12]
 800577c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800577e:	68f3      	ldr	r3, [r6, #12]
 8005780:	b183      	cbz	r3, 80057a4 <_Balloc+0x50>
 8005782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800578a:	b9b8      	cbnz	r0, 80057bc <_Balloc+0x68>
 800578c:	2101      	movs	r1, #1
 800578e:	fa01 f605 	lsl.w	r6, r1, r5
 8005792:	1d72      	adds	r2, r6, #5
 8005794:	4620      	mov	r0, r4
 8005796:	0092      	lsls	r2, r2, #2
 8005798:	f000 fc94 	bl	80060c4 <_calloc_r>
 800579c:	b160      	cbz	r0, 80057b8 <_Balloc+0x64>
 800579e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80057a2:	e00e      	b.n	80057c2 <_Balloc+0x6e>
 80057a4:	2221      	movs	r2, #33	; 0x21
 80057a6:	2104      	movs	r1, #4
 80057a8:	4620      	mov	r0, r4
 80057aa:	f000 fc8b 	bl	80060c4 <_calloc_r>
 80057ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057b0:	60f0      	str	r0, [r6, #12]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e4      	bne.n	8005782 <_Balloc+0x2e>
 80057b8:	2000      	movs	r0, #0
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	6802      	ldr	r2, [r0, #0]
 80057be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80057c2:	2300      	movs	r3, #0
 80057c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80057c8:	e7f7      	b.n	80057ba <_Balloc+0x66>
 80057ca:	bf00      	nop
 80057cc:	08008810 	.word	0x08008810
 80057d0:	0800894c 	.word	0x0800894c

080057d4 <_Bfree>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80057d8:	4605      	mov	r5, r0
 80057da:	460c      	mov	r4, r1
 80057dc:	b976      	cbnz	r6, 80057fc <_Bfree+0x28>
 80057de:	2010      	movs	r0, #16
 80057e0:	f7fe fc60 	bl	80040a4 <malloc>
 80057e4:	4602      	mov	r2, r0
 80057e6:	6268      	str	r0, [r5, #36]	; 0x24
 80057e8:	b920      	cbnz	r0, 80057f4 <_Bfree+0x20>
 80057ea:	218a      	movs	r1, #138	; 0x8a
 80057ec:	4b08      	ldr	r3, [pc, #32]	; (8005810 <_Bfree+0x3c>)
 80057ee:	4809      	ldr	r0, [pc, #36]	; (8005814 <_Bfree+0x40>)
 80057f0:	f7ff fbee 	bl	8004fd0 <__assert_func>
 80057f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057f8:	6006      	str	r6, [r0, #0]
 80057fa:	60c6      	str	r6, [r0, #12]
 80057fc:	b13c      	cbz	r4, 800580e <_Bfree+0x3a>
 80057fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005800:	6862      	ldr	r2, [r4, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005808:	6021      	str	r1, [r4, #0]
 800580a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800580e:	bd70      	pop	{r4, r5, r6, pc}
 8005810:	08008810 	.word	0x08008810
 8005814:	0800894c 	.word	0x0800894c

08005818 <__multadd>:
 8005818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800581c:	4607      	mov	r7, r0
 800581e:	460c      	mov	r4, r1
 8005820:	461e      	mov	r6, r3
 8005822:	2000      	movs	r0, #0
 8005824:	690d      	ldr	r5, [r1, #16]
 8005826:	f101 0c14 	add.w	ip, r1, #20
 800582a:	f8dc 3000 	ldr.w	r3, [ip]
 800582e:	3001      	adds	r0, #1
 8005830:	b299      	uxth	r1, r3
 8005832:	fb02 6101 	mla	r1, r2, r1, r6
 8005836:	0c1e      	lsrs	r6, r3, #16
 8005838:	0c0b      	lsrs	r3, r1, #16
 800583a:	fb02 3306 	mla	r3, r2, r6, r3
 800583e:	b289      	uxth	r1, r1
 8005840:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005844:	4285      	cmp	r5, r0
 8005846:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800584a:	f84c 1b04 	str.w	r1, [ip], #4
 800584e:	dcec      	bgt.n	800582a <__multadd+0x12>
 8005850:	b30e      	cbz	r6, 8005896 <__multadd+0x7e>
 8005852:	68a3      	ldr	r3, [r4, #8]
 8005854:	42ab      	cmp	r3, r5
 8005856:	dc19      	bgt.n	800588c <__multadd+0x74>
 8005858:	6861      	ldr	r1, [r4, #4]
 800585a:	4638      	mov	r0, r7
 800585c:	3101      	adds	r1, #1
 800585e:	f7ff ff79 	bl	8005754 <_Balloc>
 8005862:	4680      	mov	r8, r0
 8005864:	b928      	cbnz	r0, 8005872 <__multadd+0x5a>
 8005866:	4602      	mov	r2, r0
 8005868:	21b5      	movs	r1, #181	; 0xb5
 800586a:	4b0c      	ldr	r3, [pc, #48]	; (800589c <__multadd+0x84>)
 800586c:	480c      	ldr	r0, [pc, #48]	; (80058a0 <__multadd+0x88>)
 800586e:	f7ff fbaf 	bl	8004fd0 <__assert_func>
 8005872:	6922      	ldr	r2, [r4, #16]
 8005874:	f104 010c 	add.w	r1, r4, #12
 8005878:	3202      	adds	r2, #2
 800587a:	0092      	lsls	r2, r2, #2
 800587c:	300c      	adds	r0, #12
 800587e:	f7ff ff4f 	bl	8005720 <memcpy>
 8005882:	4621      	mov	r1, r4
 8005884:	4638      	mov	r0, r7
 8005886:	f7ff ffa5 	bl	80057d4 <_Bfree>
 800588a:	4644      	mov	r4, r8
 800588c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005890:	3501      	adds	r5, #1
 8005892:	615e      	str	r6, [r3, #20]
 8005894:	6125      	str	r5, [r4, #16]
 8005896:	4620      	mov	r0, r4
 8005898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800589c:	080088c0 	.word	0x080088c0
 80058a0:	0800894c 	.word	0x0800894c

080058a4 <__s2b>:
 80058a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058a8:	4615      	mov	r5, r2
 80058aa:	2209      	movs	r2, #9
 80058ac:	461f      	mov	r7, r3
 80058ae:	3308      	adds	r3, #8
 80058b0:	460c      	mov	r4, r1
 80058b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80058b6:	4606      	mov	r6, r0
 80058b8:	2201      	movs	r2, #1
 80058ba:	2100      	movs	r1, #0
 80058bc:	429a      	cmp	r2, r3
 80058be:	db09      	blt.n	80058d4 <__s2b+0x30>
 80058c0:	4630      	mov	r0, r6
 80058c2:	f7ff ff47 	bl	8005754 <_Balloc>
 80058c6:	b940      	cbnz	r0, 80058da <__s2b+0x36>
 80058c8:	4602      	mov	r2, r0
 80058ca:	21ce      	movs	r1, #206	; 0xce
 80058cc:	4b18      	ldr	r3, [pc, #96]	; (8005930 <__s2b+0x8c>)
 80058ce:	4819      	ldr	r0, [pc, #100]	; (8005934 <__s2b+0x90>)
 80058d0:	f7ff fb7e 	bl	8004fd0 <__assert_func>
 80058d4:	0052      	lsls	r2, r2, #1
 80058d6:	3101      	adds	r1, #1
 80058d8:	e7f0      	b.n	80058bc <__s2b+0x18>
 80058da:	9b08      	ldr	r3, [sp, #32]
 80058dc:	2d09      	cmp	r5, #9
 80058de:	6143      	str	r3, [r0, #20]
 80058e0:	f04f 0301 	mov.w	r3, #1
 80058e4:	6103      	str	r3, [r0, #16]
 80058e6:	dd16      	ble.n	8005916 <__s2b+0x72>
 80058e8:	f104 0909 	add.w	r9, r4, #9
 80058ec:	46c8      	mov	r8, r9
 80058ee:	442c      	add	r4, r5
 80058f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80058f4:	4601      	mov	r1, r0
 80058f6:	220a      	movs	r2, #10
 80058f8:	4630      	mov	r0, r6
 80058fa:	3b30      	subs	r3, #48	; 0x30
 80058fc:	f7ff ff8c 	bl	8005818 <__multadd>
 8005900:	45a0      	cmp	r8, r4
 8005902:	d1f5      	bne.n	80058f0 <__s2b+0x4c>
 8005904:	f1a5 0408 	sub.w	r4, r5, #8
 8005908:	444c      	add	r4, r9
 800590a:	1b2d      	subs	r5, r5, r4
 800590c:	1963      	adds	r3, r4, r5
 800590e:	42bb      	cmp	r3, r7
 8005910:	db04      	blt.n	800591c <__s2b+0x78>
 8005912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005916:	2509      	movs	r5, #9
 8005918:	340a      	adds	r4, #10
 800591a:	e7f6      	b.n	800590a <__s2b+0x66>
 800591c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005920:	4601      	mov	r1, r0
 8005922:	220a      	movs	r2, #10
 8005924:	4630      	mov	r0, r6
 8005926:	3b30      	subs	r3, #48	; 0x30
 8005928:	f7ff ff76 	bl	8005818 <__multadd>
 800592c:	e7ee      	b.n	800590c <__s2b+0x68>
 800592e:	bf00      	nop
 8005930:	080088c0 	.word	0x080088c0
 8005934:	0800894c 	.word	0x0800894c

08005938 <__hi0bits>:
 8005938:	0c02      	lsrs	r2, r0, #16
 800593a:	0412      	lsls	r2, r2, #16
 800593c:	4603      	mov	r3, r0
 800593e:	b9ca      	cbnz	r2, 8005974 <__hi0bits+0x3c>
 8005940:	0403      	lsls	r3, r0, #16
 8005942:	2010      	movs	r0, #16
 8005944:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005948:	bf04      	itt	eq
 800594a:	021b      	lsleq	r3, r3, #8
 800594c:	3008      	addeq	r0, #8
 800594e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005952:	bf04      	itt	eq
 8005954:	011b      	lsleq	r3, r3, #4
 8005956:	3004      	addeq	r0, #4
 8005958:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800595c:	bf04      	itt	eq
 800595e:	009b      	lsleq	r3, r3, #2
 8005960:	3002      	addeq	r0, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	db05      	blt.n	8005972 <__hi0bits+0x3a>
 8005966:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800596a:	f100 0001 	add.w	r0, r0, #1
 800596e:	bf08      	it	eq
 8005970:	2020      	moveq	r0, #32
 8005972:	4770      	bx	lr
 8005974:	2000      	movs	r0, #0
 8005976:	e7e5      	b.n	8005944 <__hi0bits+0xc>

08005978 <__lo0bits>:
 8005978:	6803      	ldr	r3, [r0, #0]
 800597a:	4602      	mov	r2, r0
 800597c:	f013 0007 	ands.w	r0, r3, #7
 8005980:	d00b      	beq.n	800599a <__lo0bits+0x22>
 8005982:	07d9      	lsls	r1, r3, #31
 8005984:	d421      	bmi.n	80059ca <__lo0bits+0x52>
 8005986:	0798      	lsls	r0, r3, #30
 8005988:	bf49      	itett	mi
 800598a:	085b      	lsrmi	r3, r3, #1
 800598c:	089b      	lsrpl	r3, r3, #2
 800598e:	2001      	movmi	r0, #1
 8005990:	6013      	strmi	r3, [r2, #0]
 8005992:	bf5c      	itt	pl
 8005994:	2002      	movpl	r0, #2
 8005996:	6013      	strpl	r3, [r2, #0]
 8005998:	4770      	bx	lr
 800599a:	b299      	uxth	r1, r3
 800599c:	b909      	cbnz	r1, 80059a2 <__lo0bits+0x2a>
 800599e:	2010      	movs	r0, #16
 80059a0:	0c1b      	lsrs	r3, r3, #16
 80059a2:	b2d9      	uxtb	r1, r3
 80059a4:	b909      	cbnz	r1, 80059aa <__lo0bits+0x32>
 80059a6:	3008      	adds	r0, #8
 80059a8:	0a1b      	lsrs	r3, r3, #8
 80059aa:	0719      	lsls	r1, r3, #28
 80059ac:	bf04      	itt	eq
 80059ae:	091b      	lsreq	r3, r3, #4
 80059b0:	3004      	addeq	r0, #4
 80059b2:	0799      	lsls	r1, r3, #30
 80059b4:	bf04      	itt	eq
 80059b6:	089b      	lsreq	r3, r3, #2
 80059b8:	3002      	addeq	r0, #2
 80059ba:	07d9      	lsls	r1, r3, #31
 80059bc:	d403      	bmi.n	80059c6 <__lo0bits+0x4e>
 80059be:	085b      	lsrs	r3, r3, #1
 80059c0:	f100 0001 	add.w	r0, r0, #1
 80059c4:	d003      	beq.n	80059ce <__lo0bits+0x56>
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	4770      	bx	lr
 80059ca:	2000      	movs	r0, #0
 80059cc:	4770      	bx	lr
 80059ce:	2020      	movs	r0, #32
 80059d0:	4770      	bx	lr
	...

080059d4 <__i2b>:
 80059d4:	b510      	push	{r4, lr}
 80059d6:	460c      	mov	r4, r1
 80059d8:	2101      	movs	r1, #1
 80059da:	f7ff febb 	bl	8005754 <_Balloc>
 80059de:	4602      	mov	r2, r0
 80059e0:	b928      	cbnz	r0, 80059ee <__i2b+0x1a>
 80059e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80059e6:	4b04      	ldr	r3, [pc, #16]	; (80059f8 <__i2b+0x24>)
 80059e8:	4804      	ldr	r0, [pc, #16]	; (80059fc <__i2b+0x28>)
 80059ea:	f7ff faf1 	bl	8004fd0 <__assert_func>
 80059ee:	2301      	movs	r3, #1
 80059f0:	6144      	str	r4, [r0, #20]
 80059f2:	6103      	str	r3, [r0, #16]
 80059f4:	bd10      	pop	{r4, pc}
 80059f6:	bf00      	nop
 80059f8:	080088c0 	.word	0x080088c0
 80059fc:	0800894c 	.word	0x0800894c

08005a00 <__multiply>:
 8005a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a04:	4691      	mov	r9, r2
 8005a06:	690a      	ldr	r2, [r1, #16]
 8005a08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	bfbe      	ittt	lt
 8005a12:	460b      	movlt	r3, r1
 8005a14:	464c      	movlt	r4, r9
 8005a16:	4699      	movlt	r9, r3
 8005a18:	6927      	ldr	r7, [r4, #16]
 8005a1a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005a1e:	68a3      	ldr	r3, [r4, #8]
 8005a20:	6861      	ldr	r1, [r4, #4]
 8005a22:	eb07 060a 	add.w	r6, r7, sl
 8005a26:	42b3      	cmp	r3, r6
 8005a28:	b085      	sub	sp, #20
 8005a2a:	bfb8      	it	lt
 8005a2c:	3101      	addlt	r1, #1
 8005a2e:	f7ff fe91 	bl	8005754 <_Balloc>
 8005a32:	b930      	cbnz	r0, 8005a42 <__multiply+0x42>
 8005a34:	4602      	mov	r2, r0
 8005a36:	f240 115d 	movw	r1, #349	; 0x15d
 8005a3a:	4b43      	ldr	r3, [pc, #268]	; (8005b48 <__multiply+0x148>)
 8005a3c:	4843      	ldr	r0, [pc, #268]	; (8005b4c <__multiply+0x14c>)
 8005a3e:	f7ff fac7 	bl	8004fd0 <__assert_func>
 8005a42:	f100 0514 	add.w	r5, r0, #20
 8005a46:	462b      	mov	r3, r5
 8005a48:	2200      	movs	r2, #0
 8005a4a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005a4e:	4543      	cmp	r3, r8
 8005a50:	d321      	bcc.n	8005a96 <__multiply+0x96>
 8005a52:	f104 0314 	add.w	r3, r4, #20
 8005a56:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005a5a:	f109 0314 	add.w	r3, r9, #20
 8005a5e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005a62:	9202      	str	r2, [sp, #8]
 8005a64:	1b3a      	subs	r2, r7, r4
 8005a66:	3a15      	subs	r2, #21
 8005a68:	f022 0203 	bic.w	r2, r2, #3
 8005a6c:	3204      	adds	r2, #4
 8005a6e:	f104 0115 	add.w	r1, r4, #21
 8005a72:	428f      	cmp	r7, r1
 8005a74:	bf38      	it	cc
 8005a76:	2204      	movcc	r2, #4
 8005a78:	9201      	str	r2, [sp, #4]
 8005a7a:	9a02      	ldr	r2, [sp, #8]
 8005a7c:	9303      	str	r3, [sp, #12]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d80c      	bhi.n	8005a9c <__multiply+0x9c>
 8005a82:	2e00      	cmp	r6, #0
 8005a84:	dd03      	ble.n	8005a8e <__multiply+0x8e>
 8005a86:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d059      	beq.n	8005b42 <__multiply+0x142>
 8005a8e:	6106      	str	r6, [r0, #16]
 8005a90:	b005      	add	sp, #20
 8005a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a96:	f843 2b04 	str.w	r2, [r3], #4
 8005a9a:	e7d8      	b.n	8005a4e <__multiply+0x4e>
 8005a9c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005aa0:	f1ba 0f00 	cmp.w	sl, #0
 8005aa4:	d023      	beq.n	8005aee <__multiply+0xee>
 8005aa6:	46a9      	mov	r9, r5
 8005aa8:	f04f 0c00 	mov.w	ip, #0
 8005aac:	f104 0e14 	add.w	lr, r4, #20
 8005ab0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005ab4:	f8d9 1000 	ldr.w	r1, [r9]
 8005ab8:	fa1f fb82 	uxth.w	fp, r2
 8005abc:	b289      	uxth	r1, r1
 8005abe:	fb0a 110b 	mla	r1, sl, fp, r1
 8005ac2:	4461      	add	r1, ip
 8005ac4:	f8d9 c000 	ldr.w	ip, [r9]
 8005ac8:	0c12      	lsrs	r2, r2, #16
 8005aca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005ace:	fb0a c202 	mla	r2, sl, r2, ip
 8005ad2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005ad6:	b289      	uxth	r1, r1
 8005ad8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005adc:	4577      	cmp	r7, lr
 8005ade:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ae2:	f849 1b04 	str.w	r1, [r9], #4
 8005ae6:	d8e3      	bhi.n	8005ab0 <__multiply+0xb0>
 8005ae8:	9a01      	ldr	r2, [sp, #4]
 8005aea:	f845 c002 	str.w	ip, [r5, r2]
 8005aee:	9a03      	ldr	r2, [sp, #12]
 8005af0:	3304      	adds	r3, #4
 8005af2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005af6:	f1b9 0f00 	cmp.w	r9, #0
 8005afa:	d020      	beq.n	8005b3e <__multiply+0x13e>
 8005afc:	46ae      	mov	lr, r5
 8005afe:	f04f 0a00 	mov.w	sl, #0
 8005b02:	6829      	ldr	r1, [r5, #0]
 8005b04:	f104 0c14 	add.w	ip, r4, #20
 8005b08:	f8bc b000 	ldrh.w	fp, [ip]
 8005b0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005b10:	b289      	uxth	r1, r1
 8005b12:	fb09 220b 	mla	r2, r9, fp, r2
 8005b16:	4492      	add	sl, r2
 8005b18:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005b1c:	f84e 1b04 	str.w	r1, [lr], #4
 8005b20:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005b24:	f8be 1000 	ldrh.w	r1, [lr]
 8005b28:	0c12      	lsrs	r2, r2, #16
 8005b2a:	fb09 1102 	mla	r1, r9, r2, r1
 8005b2e:	4567      	cmp	r7, ip
 8005b30:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005b34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005b38:	d8e6      	bhi.n	8005b08 <__multiply+0x108>
 8005b3a:	9a01      	ldr	r2, [sp, #4]
 8005b3c:	50a9      	str	r1, [r5, r2]
 8005b3e:	3504      	adds	r5, #4
 8005b40:	e79b      	b.n	8005a7a <__multiply+0x7a>
 8005b42:	3e01      	subs	r6, #1
 8005b44:	e79d      	b.n	8005a82 <__multiply+0x82>
 8005b46:	bf00      	nop
 8005b48:	080088c0 	.word	0x080088c0
 8005b4c:	0800894c 	.word	0x0800894c

08005b50 <__pow5mult>:
 8005b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b54:	4615      	mov	r5, r2
 8005b56:	f012 0203 	ands.w	r2, r2, #3
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	460f      	mov	r7, r1
 8005b5e:	d007      	beq.n	8005b70 <__pow5mult+0x20>
 8005b60:	4c25      	ldr	r4, [pc, #148]	; (8005bf8 <__pow5mult+0xa8>)
 8005b62:	3a01      	subs	r2, #1
 8005b64:	2300      	movs	r3, #0
 8005b66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b6a:	f7ff fe55 	bl	8005818 <__multadd>
 8005b6e:	4607      	mov	r7, r0
 8005b70:	10ad      	asrs	r5, r5, #2
 8005b72:	d03d      	beq.n	8005bf0 <__pow5mult+0xa0>
 8005b74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005b76:	b97c      	cbnz	r4, 8005b98 <__pow5mult+0x48>
 8005b78:	2010      	movs	r0, #16
 8005b7a:	f7fe fa93 	bl	80040a4 <malloc>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	6270      	str	r0, [r6, #36]	; 0x24
 8005b82:	b928      	cbnz	r0, 8005b90 <__pow5mult+0x40>
 8005b84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005b88:	4b1c      	ldr	r3, [pc, #112]	; (8005bfc <__pow5mult+0xac>)
 8005b8a:	481d      	ldr	r0, [pc, #116]	; (8005c00 <__pow5mult+0xb0>)
 8005b8c:	f7ff fa20 	bl	8004fd0 <__assert_func>
 8005b90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b94:	6004      	str	r4, [r0, #0]
 8005b96:	60c4      	str	r4, [r0, #12]
 8005b98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005b9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ba0:	b94c      	cbnz	r4, 8005bb6 <__pow5mult+0x66>
 8005ba2:	f240 2171 	movw	r1, #625	; 0x271
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f7ff ff14 	bl	80059d4 <__i2b>
 8005bac:	2300      	movs	r3, #0
 8005bae:	4604      	mov	r4, r0
 8005bb0:	f8c8 0008 	str.w	r0, [r8, #8]
 8005bb4:	6003      	str	r3, [r0, #0]
 8005bb6:	f04f 0900 	mov.w	r9, #0
 8005bba:	07eb      	lsls	r3, r5, #31
 8005bbc:	d50a      	bpl.n	8005bd4 <__pow5mult+0x84>
 8005bbe:	4639      	mov	r1, r7
 8005bc0:	4622      	mov	r2, r4
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	f7ff ff1c 	bl	8005a00 <__multiply>
 8005bc8:	4680      	mov	r8, r0
 8005bca:	4639      	mov	r1, r7
 8005bcc:	4630      	mov	r0, r6
 8005bce:	f7ff fe01 	bl	80057d4 <_Bfree>
 8005bd2:	4647      	mov	r7, r8
 8005bd4:	106d      	asrs	r5, r5, #1
 8005bd6:	d00b      	beq.n	8005bf0 <__pow5mult+0xa0>
 8005bd8:	6820      	ldr	r0, [r4, #0]
 8005bda:	b938      	cbnz	r0, 8005bec <__pow5mult+0x9c>
 8005bdc:	4622      	mov	r2, r4
 8005bde:	4621      	mov	r1, r4
 8005be0:	4630      	mov	r0, r6
 8005be2:	f7ff ff0d 	bl	8005a00 <__multiply>
 8005be6:	6020      	str	r0, [r4, #0]
 8005be8:	f8c0 9000 	str.w	r9, [r0]
 8005bec:	4604      	mov	r4, r0
 8005bee:	e7e4      	b.n	8005bba <__pow5mult+0x6a>
 8005bf0:	4638      	mov	r0, r7
 8005bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bf6:	bf00      	nop
 8005bf8:	08008a98 	.word	0x08008a98
 8005bfc:	08008810 	.word	0x08008810
 8005c00:	0800894c 	.word	0x0800894c

08005c04 <__lshift>:
 8005c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c08:	460c      	mov	r4, r1
 8005c0a:	4607      	mov	r7, r0
 8005c0c:	4691      	mov	r9, r2
 8005c0e:	6923      	ldr	r3, [r4, #16]
 8005c10:	6849      	ldr	r1, [r1, #4]
 8005c12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c16:	68a3      	ldr	r3, [r4, #8]
 8005c18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c1c:	f108 0601 	add.w	r6, r8, #1
 8005c20:	42b3      	cmp	r3, r6
 8005c22:	db0b      	blt.n	8005c3c <__lshift+0x38>
 8005c24:	4638      	mov	r0, r7
 8005c26:	f7ff fd95 	bl	8005754 <_Balloc>
 8005c2a:	4605      	mov	r5, r0
 8005c2c:	b948      	cbnz	r0, 8005c42 <__lshift+0x3e>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005c34:	4b29      	ldr	r3, [pc, #164]	; (8005cdc <__lshift+0xd8>)
 8005c36:	482a      	ldr	r0, [pc, #168]	; (8005ce0 <__lshift+0xdc>)
 8005c38:	f7ff f9ca 	bl	8004fd0 <__assert_func>
 8005c3c:	3101      	adds	r1, #1
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	e7ee      	b.n	8005c20 <__lshift+0x1c>
 8005c42:	2300      	movs	r3, #0
 8005c44:	f100 0114 	add.w	r1, r0, #20
 8005c48:	f100 0210 	add.w	r2, r0, #16
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	4553      	cmp	r3, sl
 8005c50:	db37      	blt.n	8005cc2 <__lshift+0xbe>
 8005c52:	6920      	ldr	r0, [r4, #16]
 8005c54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c58:	f104 0314 	add.w	r3, r4, #20
 8005c5c:	f019 091f 	ands.w	r9, r9, #31
 8005c60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005c68:	d02f      	beq.n	8005cca <__lshift+0xc6>
 8005c6a:	468a      	mov	sl, r1
 8005c6c:	f04f 0c00 	mov.w	ip, #0
 8005c70:	f1c9 0e20 	rsb	lr, r9, #32
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	fa02 f209 	lsl.w	r2, r2, r9
 8005c7a:	ea42 020c 	orr.w	r2, r2, ip
 8005c7e:	f84a 2b04 	str.w	r2, [sl], #4
 8005c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c86:	4298      	cmp	r0, r3
 8005c88:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005c8c:	d8f2      	bhi.n	8005c74 <__lshift+0x70>
 8005c8e:	1b03      	subs	r3, r0, r4
 8005c90:	3b15      	subs	r3, #21
 8005c92:	f023 0303 	bic.w	r3, r3, #3
 8005c96:	3304      	adds	r3, #4
 8005c98:	f104 0215 	add.w	r2, r4, #21
 8005c9c:	4290      	cmp	r0, r2
 8005c9e:	bf38      	it	cc
 8005ca0:	2304      	movcc	r3, #4
 8005ca2:	f841 c003 	str.w	ip, [r1, r3]
 8005ca6:	f1bc 0f00 	cmp.w	ip, #0
 8005caa:	d001      	beq.n	8005cb0 <__lshift+0xac>
 8005cac:	f108 0602 	add.w	r6, r8, #2
 8005cb0:	3e01      	subs	r6, #1
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	612e      	str	r6, [r5, #16]
 8005cb8:	f7ff fd8c 	bl	80057d4 <_Bfree>
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	e7c1      	b.n	8005c4e <__lshift+0x4a>
 8005cca:	3904      	subs	r1, #4
 8005ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cd0:	4298      	cmp	r0, r3
 8005cd2:	f841 2f04 	str.w	r2, [r1, #4]!
 8005cd6:	d8f9      	bhi.n	8005ccc <__lshift+0xc8>
 8005cd8:	e7ea      	b.n	8005cb0 <__lshift+0xac>
 8005cda:	bf00      	nop
 8005cdc:	080088c0 	.word	0x080088c0
 8005ce0:	0800894c 	.word	0x0800894c

08005ce4 <__mcmp>:
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	690a      	ldr	r2, [r1, #16]
 8005ce8:	6900      	ldr	r0, [r0, #16]
 8005cea:	b530      	push	{r4, r5, lr}
 8005cec:	1a80      	subs	r0, r0, r2
 8005cee:	d10d      	bne.n	8005d0c <__mcmp+0x28>
 8005cf0:	3314      	adds	r3, #20
 8005cf2:	3114      	adds	r1, #20
 8005cf4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005cf8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005cfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d04:	4295      	cmp	r5, r2
 8005d06:	d002      	beq.n	8005d0e <__mcmp+0x2a>
 8005d08:	d304      	bcc.n	8005d14 <__mcmp+0x30>
 8005d0a:	2001      	movs	r0, #1
 8005d0c:	bd30      	pop	{r4, r5, pc}
 8005d0e:	42a3      	cmp	r3, r4
 8005d10:	d3f4      	bcc.n	8005cfc <__mcmp+0x18>
 8005d12:	e7fb      	b.n	8005d0c <__mcmp+0x28>
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d18:	e7f8      	b.n	8005d0c <__mcmp+0x28>
	...

08005d1c <__mdiff>:
 8005d1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d20:	460d      	mov	r5, r1
 8005d22:	4607      	mov	r7, r0
 8005d24:	4611      	mov	r1, r2
 8005d26:	4628      	mov	r0, r5
 8005d28:	4614      	mov	r4, r2
 8005d2a:	f7ff ffdb 	bl	8005ce4 <__mcmp>
 8005d2e:	1e06      	subs	r6, r0, #0
 8005d30:	d111      	bne.n	8005d56 <__mdiff+0x3a>
 8005d32:	4631      	mov	r1, r6
 8005d34:	4638      	mov	r0, r7
 8005d36:	f7ff fd0d 	bl	8005754 <_Balloc>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	b928      	cbnz	r0, 8005d4a <__mdiff+0x2e>
 8005d3e:	f240 2132 	movw	r1, #562	; 0x232
 8005d42:	4b3a      	ldr	r3, [pc, #232]	; (8005e2c <__mdiff+0x110>)
 8005d44:	483a      	ldr	r0, [pc, #232]	; (8005e30 <__mdiff+0x114>)
 8005d46:	f7ff f943 	bl	8004fd0 <__assert_func>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005d50:	4610      	mov	r0, r2
 8005d52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d56:	bfa4      	itt	ge
 8005d58:	4623      	movge	r3, r4
 8005d5a:	462c      	movge	r4, r5
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	6861      	ldr	r1, [r4, #4]
 8005d60:	bfa6      	itte	ge
 8005d62:	461d      	movge	r5, r3
 8005d64:	2600      	movge	r6, #0
 8005d66:	2601      	movlt	r6, #1
 8005d68:	f7ff fcf4 	bl	8005754 <_Balloc>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	b918      	cbnz	r0, 8005d78 <__mdiff+0x5c>
 8005d70:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005d74:	4b2d      	ldr	r3, [pc, #180]	; (8005e2c <__mdiff+0x110>)
 8005d76:	e7e5      	b.n	8005d44 <__mdiff+0x28>
 8005d78:	f102 0814 	add.w	r8, r2, #20
 8005d7c:	46c2      	mov	sl, r8
 8005d7e:	f04f 0c00 	mov.w	ip, #0
 8005d82:	6927      	ldr	r7, [r4, #16]
 8005d84:	60c6      	str	r6, [r0, #12]
 8005d86:	692e      	ldr	r6, [r5, #16]
 8005d88:	f104 0014 	add.w	r0, r4, #20
 8005d8c:	f105 0914 	add.w	r9, r5, #20
 8005d90:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005d94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005d98:	3410      	adds	r4, #16
 8005d9a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005d9e:	f859 3b04 	ldr.w	r3, [r9], #4
 8005da2:	fa1f f18b 	uxth.w	r1, fp
 8005da6:	448c      	add	ip, r1
 8005da8:	b299      	uxth	r1, r3
 8005daa:	0c1b      	lsrs	r3, r3, #16
 8005dac:	ebac 0101 	sub.w	r1, ip, r1
 8005db0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005db4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005db8:	b289      	uxth	r1, r1
 8005dba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005dbe:	454e      	cmp	r6, r9
 8005dc0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005dc4:	f84a 3b04 	str.w	r3, [sl], #4
 8005dc8:	d8e7      	bhi.n	8005d9a <__mdiff+0x7e>
 8005dca:	1b73      	subs	r3, r6, r5
 8005dcc:	3b15      	subs	r3, #21
 8005dce:	f023 0303 	bic.w	r3, r3, #3
 8005dd2:	3515      	adds	r5, #21
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	42ae      	cmp	r6, r5
 8005dd8:	bf38      	it	cc
 8005dda:	2304      	movcc	r3, #4
 8005ddc:	4418      	add	r0, r3
 8005dde:	4443      	add	r3, r8
 8005de0:	461e      	mov	r6, r3
 8005de2:	4605      	mov	r5, r0
 8005de4:	4575      	cmp	r5, lr
 8005de6:	d30e      	bcc.n	8005e06 <__mdiff+0xea>
 8005de8:	f10e 0103 	add.w	r1, lr, #3
 8005dec:	1a09      	subs	r1, r1, r0
 8005dee:	f021 0103 	bic.w	r1, r1, #3
 8005df2:	3803      	subs	r0, #3
 8005df4:	4586      	cmp	lr, r0
 8005df6:	bf38      	it	cc
 8005df8:	2100      	movcc	r1, #0
 8005dfa:	4419      	add	r1, r3
 8005dfc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005e00:	b18b      	cbz	r3, 8005e26 <__mdiff+0x10a>
 8005e02:	6117      	str	r7, [r2, #16]
 8005e04:	e7a4      	b.n	8005d50 <__mdiff+0x34>
 8005e06:	f855 8b04 	ldr.w	r8, [r5], #4
 8005e0a:	fa1f f188 	uxth.w	r1, r8
 8005e0e:	4461      	add	r1, ip
 8005e10:	140c      	asrs	r4, r1, #16
 8005e12:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005e16:	b289      	uxth	r1, r1
 8005e18:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005e1c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005e20:	f846 1b04 	str.w	r1, [r6], #4
 8005e24:	e7de      	b.n	8005de4 <__mdiff+0xc8>
 8005e26:	3f01      	subs	r7, #1
 8005e28:	e7e8      	b.n	8005dfc <__mdiff+0xe0>
 8005e2a:	bf00      	nop
 8005e2c:	080088c0 	.word	0x080088c0
 8005e30:	0800894c 	.word	0x0800894c

08005e34 <__ulp>:
 8005e34:	4b11      	ldr	r3, [pc, #68]	; (8005e7c <__ulp+0x48>)
 8005e36:	400b      	ands	r3, r1
 8005e38:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	dd02      	ble.n	8005e46 <__ulp+0x12>
 8005e40:	2000      	movs	r0, #0
 8005e42:	4619      	mov	r1, r3
 8005e44:	4770      	bx	lr
 8005e46:	425b      	negs	r3, r3
 8005e48:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005e4c:	f04f 0000 	mov.w	r0, #0
 8005e50:	f04f 0100 	mov.w	r1, #0
 8005e54:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005e58:	da04      	bge.n	8005e64 <__ulp+0x30>
 8005e5a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005e5e:	fa43 f102 	asr.w	r1, r3, r2
 8005e62:	4770      	bx	lr
 8005e64:	f1a2 0314 	sub.w	r3, r2, #20
 8005e68:	2b1e      	cmp	r3, #30
 8005e6a:	bfd6      	itet	le
 8005e6c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8005e70:	2301      	movgt	r3, #1
 8005e72:	fa22 f303 	lsrle.w	r3, r2, r3
 8005e76:	4618      	mov	r0, r3
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	7ff00000 	.word	0x7ff00000

08005e80 <__b2d>:
 8005e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e84:	6907      	ldr	r7, [r0, #16]
 8005e86:	f100 0914 	add.w	r9, r0, #20
 8005e8a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8005e8e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8005e92:	f1a7 0804 	sub.w	r8, r7, #4
 8005e96:	4630      	mov	r0, r6
 8005e98:	f7ff fd4e 	bl	8005938 <__hi0bits>
 8005e9c:	f1c0 0320 	rsb	r3, r0, #32
 8005ea0:	280a      	cmp	r0, #10
 8005ea2:	600b      	str	r3, [r1, #0]
 8005ea4:	491f      	ldr	r1, [pc, #124]	; (8005f24 <__b2d+0xa4>)
 8005ea6:	dc17      	bgt.n	8005ed8 <__b2d+0x58>
 8005ea8:	45c1      	cmp	r9, r8
 8005eaa:	bf28      	it	cs
 8005eac:	2200      	movcs	r2, #0
 8005eae:	f1c0 0c0b 	rsb	ip, r0, #11
 8005eb2:	fa26 f30c 	lsr.w	r3, r6, ip
 8005eb6:	bf38      	it	cc
 8005eb8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005ebc:	ea43 0501 	orr.w	r5, r3, r1
 8005ec0:	f100 0315 	add.w	r3, r0, #21
 8005ec4:	fa06 f303 	lsl.w	r3, r6, r3
 8005ec8:	fa22 f20c 	lsr.w	r2, r2, ip
 8005ecc:	ea43 0402 	orr.w	r4, r3, r2
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ed8:	45c1      	cmp	r9, r8
 8005eda:	bf2e      	itee	cs
 8005edc:	2200      	movcs	r2, #0
 8005ede:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005ee2:	f1a7 0808 	subcc.w	r8, r7, #8
 8005ee6:	f1b0 030b 	subs.w	r3, r0, #11
 8005eea:	d016      	beq.n	8005f1a <__b2d+0x9a>
 8005eec:	f1c3 0720 	rsb	r7, r3, #32
 8005ef0:	fa22 f107 	lsr.w	r1, r2, r7
 8005ef4:	45c8      	cmp	r8, r9
 8005ef6:	fa06 f603 	lsl.w	r6, r6, r3
 8005efa:	ea46 0601 	orr.w	r6, r6, r1
 8005efe:	bf94      	ite	ls
 8005f00:	2100      	movls	r1, #0
 8005f02:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8005f06:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8005f0a:	fa02 f003 	lsl.w	r0, r2, r3
 8005f0e:	40f9      	lsrs	r1, r7
 8005f10:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005f14:	ea40 0401 	orr.w	r4, r0, r1
 8005f18:	e7da      	b.n	8005ed0 <__b2d+0x50>
 8005f1a:	4614      	mov	r4, r2
 8005f1c:	ea46 0501 	orr.w	r5, r6, r1
 8005f20:	e7d6      	b.n	8005ed0 <__b2d+0x50>
 8005f22:	bf00      	nop
 8005f24:	3ff00000 	.word	0x3ff00000

08005f28 <__d2b>:
 8005f28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005f32:	4690      	mov	r8, r2
 8005f34:	461d      	mov	r5, r3
 8005f36:	f7ff fc0d 	bl	8005754 <_Balloc>
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	b930      	cbnz	r0, 8005f4c <__d2b+0x24>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	f240 310a 	movw	r1, #778	; 0x30a
 8005f44:	4b24      	ldr	r3, [pc, #144]	; (8005fd8 <__d2b+0xb0>)
 8005f46:	4825      	ldr	r0, [pc, #148]	; (8005fdc <__d2b+0xb4>)
 8005f48:	f7ff f842 	bl	8004fd0 <__assert_func>
 8005f4c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005f50:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005f54:	bb2d      	cbnz	r5, 8005fa2 <__d2b+0x7a>
 8005f56:	9301      	str	r3, [sp, #4]
 8005f58:	f1b8 0300 	subs.w	r3, r8, #0
 8005f5c:	d026      	beq.n	8005fac <__d2b+0x84>
 8005f5e:	4668      	mov	r0, sp
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	f7ff fd09 	bl	8005978 <__lo0bits>
 8005f66:	9900      	ldr	r1, [sp, #0]
 8005f68:	b1f0      	cbz	r0, 8005fa8 <__d2b+0x80>
 8005f6a:	9a01      	ldr	r2, [sp, #4]
 8005f6c:	f1c0 0320 	rsb	r3, r0, #32
 8005f70:	fa02 f303 	lsl.w	r3, r2, r3
 8005f74:	430b      	orrs	r3, r1
 8005f76:	40c2      	lsrs	r2, r0
 8005f78:	6163      	str	r3, [r4, #20]
 8005f7a:	9201      	str	r2, [sp, #4]
 8005f7c:	9b01      	ldr	r3, [sp, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bf14      	ite	ne
 8005f82:	2102      	movne	r1, #2
 8005f84:	2101      	moveq	r1, #1
 8005f86:	61a3      	str	r3, [r4, #24]
 8005f88:	6121      	str	r1, [r4, #16]
 8005f8a:	b1c5      	cbz	r5, 8005fbe <__d2b+0x96>
 8005f8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f90:	4405      	add	r5, r0
 8005f92:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f96:	603d      	str	r5, [r7, #0]
 8005f98:	6030      	str	r0, [r6, #0]
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	b002      	add	sp, #8
 8005f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fa6:	e7d6      	b.n	8005f56 <__d2b+0x2e>
 8005fa8:	6161      	str	r1, [r4, #20]
 8005faa:	e7e7      	b.n	8005f7c <__d2b+0x54>
 8005fac:	a801      	add	r0, sp, #4
 8005fae:	f7ff fce3 	bl	8005978 <__lo0bits>
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	9b01      	ldr	r3, [sp, #4]
 8005fb6:	6121      	str	r1, [r4, #16]
 8005fb8:	6163      	str	r3, [r4, #20]
 8005fba:	3020      	adds	r0, #32
 8005fbc:	e7e5      	b.n	8005f8a <__d2b+0x62>
 8005fbe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005fc2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005fc6:	6038      	str	r0, [r7, #0]
 8005fc8:	6918      	ldr	r0, [r3, #16]
 8005fca:	f7ff fcb5 	bl	8005938 <__hi0bits>
 8005fce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005fd2:	6031      	str	r1, [r6, #0]
 8005fd4:	e7e1      	b.n	8005f9a <__d2b+0x72>
 8005fd6:	bf00      	nop
 8005fd8:	080088c0 	.word	0x080088c0
 8005fdc:	0800894c 	.word	0x0800894c

08005fe0 <__ratio>:
 8005fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	4688      	mov	r8, r1
 8005fe6:	4669      	mov	r1, sp
 8005fe8:	4681      	mov	r9, r0
 8005fea:	f7ff ff49 	bl	8005e80 <__b2d>
 8005fee:	460f      	mov	r7, r1
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	460d      	mov	r5, r1
 8005ff4:	4640      	mov	r0, r8
 8005ff6:	a901      	add	r1, sp, #4
 8005ff8:	f7ff ff42 	bl	8005e80 <__b2d>
 8005ffc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006000:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006004:	468b      	mov	fp, r1
 8006006:	eba3 0c02 	sub.w	ip, r3, r2
 800600a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800600e:	1a9b      	subs	r3, r3, r2
 8006010:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006014:	2b00      	cmp	r3, #0
 8006016:	bfd5      	itete	le
 8006018:	460a      	movle	r2, r1
 800601a:	462a      	movgt	r2, r5
 800601c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006020:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006024:	bfd8      	it	le
 8006026:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800602a:	465b      	mov	r3, fp
 800602c:	4602      	mov	r2, r0
 800602e:	4639      	mov	r1, r7
 8006030:	4620      	mov	r0, r4
 8006032:	f7fa fb85 	bl	8000740 <__aeabi_ddiv>
 8006036:	b003      	add	sp, #12
 8006038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800603c <__copybits>:
 800603c:	3901      	subs	r1, #1
 800603e:	b570      	push	{r4, r5, r6, lr}
 8006040:	1149      	asrs	r1, r1, #5
 8006042:	6914      	ldr	r4, [r2, #16]
 8006044:	3101      	adds	r1, #1
 8006046:	f102 0314 	add.w	r3, r2, #20
 800604a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800604e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006052:	1f05      	subs	r5, r0, #4
 8006054:	42a3      	cmp	r3, r4
 8006056:	d30c      	bcc.n	8006072 <__copybits+0x36>
 8006058:	1aa3      	subs	r3, r4, r2
 800605a:	3b11      	subs	r3, #17
 800605c:	f023 0303 	bic.w	r3, r3, #3
 8006060:	3211      	adds	r2, #17
 8006062:	42a2      	cmp	r2, r4
 8006064:	bf88      	it	hi
 8006066:	2300      	movhi	r3, #0
 8006068:	4418      	add	r0, r3
 800606a:	2300      	movs	r3, #0
 800606c:	4288      	cmp	r0, r1
 800606e:	d305      	bcc.n	800607c <__copybits+0x40>
 8006070:	bd70      	pop	{r4, r5, r6, pc}
 8006072:	f853 6b04 	ldr.w	r6, [r3], #4
 8006076:	f845 6f04 	str.w	r6, [r5, #4]!
 800607a:	e7eb      	b.n	8006054 <__copybits+0x18>
 800607c:	f840 3b04 	str.w	r3, [r0], #4
 8006080:	e7f4      	b.n	800606c <__copybits+0x30>

08006082 <__any_on>:
 8006082:	f100 0214 	add.w	r2, r0, #20
 8006086:	6900      	ldr	r0, [r0, #16]
 8006088:	114b      	asrs	r3, r1, #5
 800608a:	4298      	cmp	r0, r3
 800608c:	b510      	push	{r4, lr}
 800608e:	db11      	blt.n	80060b4 <__any_on+0x32>
 8006090:	dd0a      	ble.n	80060a8 <__any_on+0x26>
 8006092:	f011 011f 	ands.w	r1, r1, #31
 8006096:	d007      	beq.n	80060a8 <__any_on+0x26>
 8006098:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800609c:	fa24 f001 	lsr.w	r0, r4, r1
 80060a0:	fa00 f101 	lsl.w	r1, r0, r1
 80060a4:	428c      	cmp	r4, r1
 80060a6:	d10b      	bne.n	80060c0 <__any_on+0x3e>
 80060a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d803      	bhi.n	80060b8 <__any_on+0x36>
 80060b0:	2000      	movs	r0, #0
 80060b2:	bd10      	pop	{r4, pc}
 80060b4:	4603      	mov	r3, r0
 80060b6:	e7f7      	b.n	80060a8 <__any_on+0x26>
 80060b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80060bc:	2900      	cmp	r1, #0
 80060be:	d0f5      	beq.n	80060ac <__any_on+0x2a>
 80060c0:	2001      	movs	r0, #1
 80060c2:	e7f6      	b.n	80060b2 <__any_on+0x30>

080060c4 <_calloc_r>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	fba1 5402 	umull	r5, r4, r1, r2
 80060ca:	b934      	cbnz	r4, 80060da <_calloc_r+0x16>
 80060cc:	4629      	mov	r1, r5
 80060ce:	f7fe f861 	bl	8004194 <_malloc_r>
 80060d2:	4606      	mov	r6, r0
 80060d4:	b928      	cbnz	r0, 80060e2 <_calloc_r+0x1e>
 80060d6:	4630      	mov	r0, r6
 80060d8:	bd70      	pop	{r4, r5, r6, pc}
 80060da:	220c      	movs	r2, #12
 80060dc:	2600      	movs	r6, #0
 80060de:	6002      	str	r2, [r0, #0]
 80060e0:	e7f9      	b.n	80060d6 <_calloc_r+0x12>
 80060e2:	462a      	mov	r2, r5
 80060e4:	4621      	mov	r1, r4
 80060e6:	f7fd ffe5 	bl	80040b4 <memset>
 80060ea:	e7f4      	b.n	80060d6 <_calloc_r+0x12>

080060ec <__ssputs_r>:
 80060ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f0:	688e      	ldr	r6, [r1, #8]
 80060f2:	4682      	mov	sl, r0
 80060f4:	429e      	cmp	r6, r3
 80060f6:	460c      	mov	r4, r1
 80060f8:	4690      	mov	r8, r2
 80060fa:	461f      	mov	r7, r3
 80060fc:	d838      	bhi.n	8006170 <__ssputs_r+0x84>
 80060fe:	898a      	ldrh	r2, [r1, #12]
 8006100:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006104:	d032      	beq.n	800616c <__ssputs_r+0x80>
 8006106:	6825      	ldr	r5, [r4, #0]
 8006108:	6909      	ldr	r1, [r1, #16]
 800610a:	3301      	adds	r3, #1
 800610c:	eba5 0901 	sub.w	r9, r5, r1
 8006110:	6965      	ldr	r5, [r4, #20]
 8006112:	444b      	add	r3, r9
 8006114:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006118:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800611c:	106d      	asrs	r5, r5, #1
 800611e:	429d      	cmp	r5, r3
 8006120:	bf38      	it	cc
 8006122:	461d      	movcc	r5, r3
 8006124:	0553      	lsls	r3, r2, #21
 8006126:	d531      	bpl.n	800618c <__ssputs_r+0xa0>
 8006128:	4629      	mov	r1, r5
 800612a:	f7fe f833 	bl	8004194 <_malloc_r>
 800612e:	4606      	mov	r6, r0
 8006130:	b950      	cbnz	r0, 8006148 <__ssputs_r+0x5c>
 8006132:	230c      	movs	r3, #12
 8006134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006138:	f8ca 3000 	str.w	r3, [sl]
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006142:	81a3      	strh	r3, [r4, #12]
 8006144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006148:	464a      	mov	r2, r9
 800614a:	6921      	ldr	r1, [r4, #16]
 800614c:	f7ff fae8 	bl	8005720 <memcpy>
 8006150:	89a3      	ldrh	r3, [r4, #12]
 8006152:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615a:	81a3      	strh	r3, [r4, #12]
 800615c:	6126      	str	r6, [r4, #16]
 800615e:	444e      	add	r6, r9
 8006160:	6026      	str	r6, [r4, #0]
 8006162:	463e      	mov	r6, r7
 8006164:	6165      	str	r5, [r4, #20]
 8006166:	eba5 0509 	sub.w	r5, r5, r9
 800616a:	60a5      	str	r5, [r4, #8]
 800616c:	42be      	cmp	r6, r7
 800616e:	d900      	bls.n	8006172 <__ssputs_r+0x86>
 8006170:	463e      	mov	r6, r7
 8006172:	4632      	mov	r2, r6
 8006174:	4641      	mov	r1, r8
 8006176:	6820      	ldr	r0, [r4, #0]
 8006178:	f000 ff1c 	bl	8006fb4 <memmove>
 800617c:	68a3      	ldr	r3, [r4, #8]
 800617e:	2000      	movs	r0, #0
 8006180:	1b9b      	subs	r3, r3, r6
 8006182:	60a3      	str	r3, [r4, #8]
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	4433      	add	r3, r6
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	e7db      	b.n	8006144 <__ssputs_r+0x58>
 800618c:	462a      	mov	r2, r5
 800618e:	f000 ff2b 	bl	8006fe8 <_realloc_r>
 8006192:	4606      	mov	r6, r0
 8006194:	2800      	cmp	r0, #0
 8006196:	d1e1      	bne.n	800615c <__ssputs_r+0x70>
 8006198:	4650      	mov	r0, sl
 800619a:	6921      	ldr	r1, [r4, #16]
 800619c:	f7fd ff92 	bl	80040c4 <_free_r>
 80061a0:	e7c7      	b.n	8006132 <__ssputs_r+0x46>
	...

080061a4 <_svfiprintf_r>:
 80061a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a8:	4698      	mov	r8, r3
 80061aa:	898b      	ldrh	r3, [r1, #12]
 80061ac:	4607      	mov	r7, r0
 80061ae:	061b      	lsls	r3, r3, #24
 80061b0:	460d      	mov	r5, r1
 80061b2:	4614      	mov	r4, r2
 80061b4:	b09d      	sub	sp, #116	; 0x74
 80061b6:	d50e      	bpl.n	80061d6 <_svfiprintf_r+0x32>
 80061b8:	690b      	ldr	r3, [r1, #16]
 80061ba:	b963      	cbnz	r3, 80061d6 <_svfiprintf_r+0x32>
 80061bc:	2140      	movs	r1, #64	; 0x40
 80061be:	f7fd ffe9 	bl	8004194 <_malloc_r>
 80061c2:	6028      	str	r0, [r5, #0]
 80061c4:	6128      	str	r0, [r5, #16]
 80061c6:	b920      	cbnz	r0, 80061d2 <_svfiprintf_r+0x2e>
 80061c8:	230c      	movs	r3, #12
 80061ca:	603b      	str	r3, [r7, #0]
 80061cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061d0:	e0d1      	b.n	8006376 <_svfiprintf_r+0x1d2>
 80061d2:	2340      	movs	r3, #64	; 0x40
 80061d4:	616b      	str	r3, [r5, #20]
 80061d6:	2300      	movs	r3, #0
 80061d8:	9309      	str	r3, [sp, #36]	; 0x24
 80061da:	2320      	movs	r3, #32
 80061dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061e0:	2330      	movs	r3, #48	; 0x30
 80061e2:	f04f 0901 	mov.w	r9, #1
 80061e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80061ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006390 <_svfiprintf_r+0x1ec>
 80061ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061f2:	4623      	mov	r3, r4
 80061f4:	469a      	mov	sl, r3
 80061f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061fa:	b10a      	cbz	r2, 8006200 <_svfiprintf_r+0x5c>
 80061fc:	2a25      	cmp	r2, #37	; 0x25
 80061fe:	d1f9      	bne.n	80061f4 <_svfiprintf_r+0x50>
 8006200:	ebba 0b04 	subs.w	fp, sl, r4
 8006204:	d00b      	beq.n	800621e <_svfiprintf_r+0x7a>
 8006206:	465b      	mov	r3, fp
 8006208:	4622      	mov	r2, r4
 800620a:	4629      	mov	r1, r5
 800620c:	4638      	mov	r0, r7
 800620e:	f7ff ff6d 	bl	80060ec <__ssputs_r>
 8006212:	3001      	adds	r0, #1
 8006214:	f000 80aa 	beq.w	800636c <_svfiprintf_r+0x1c8>
 8006218:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800621a:	445a      	add	r2, fp
 800621c:	9209      	str	r2, [sp, #36]	; 0x24
 800621e:	f89a 3000 	ldrb.w	r3, [sl]
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 80a2 	beq.w	800636c <_svfiprintf_r+0x1c8>
 8006228:	2300      	movs	r3, #0
 800622a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800622e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006232:	f10a 0a01 	add.w	sl, sl, #1
 8006236:	9304      	str	r3, [sp, #16]
 8006238:	9307      	str	r3, [sp, #28]
 800623a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800623e:	931a      	str	r3, [sp, #104]	; 0x68
 8006240:	4654      	mov	r4, sl
 8006242:	2205      	movs	r2, #5
 8006244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006248:	4851      	ldr	r0, [pc, #324]	; (8006390 <_svfiprintf_r+0x1ec>)
 800624a:	f000 fea5 	bl	8006f98 <memchr>
 800624e:	9a04      	ldr	r2, [sp, #16]
 8006250:	b9d8      	cbnz	r0, 800628a <_svfiprintf_r+0xe6>
 8006252:	06d0      	lsls	r0, r2, #27
 8006254:	bf44      	itt	mi
 8006256:	2320      	movmi	r3, #32
 8006258:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800625c:	0711      	lsls	r1, r2, #28
 800625e:	bf44      	itt	mi
 8006260:	232b      	movmi	r3, #43	; 0x2b
 8006262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006266:	f89a 3000 	ldrb.w	r3, [sl]
 800626a:	2b2a      	cmp	r3, #42	; 0x2a
 800626c:	d015      	beq.n	800629a <_svfiprintf_r+0xf6>
 800626e:	4654      	mov	r4, sl
 8006270:	2000      	movs	r0, #0
 8006272:	f04f 0c0a 	mov.w	ip, #10
 8006276:	9a07      	ldr	r2, [sp, #28]
 8006278:	4621      	mov	r1, r4
 800627a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800627e:	3b30      	subs	r3, #48	; 0x30
 8006280:	2b09      	cmp	r3, #9
 8006282:	d94e      	bls.n	8006322 <_svfiprintf_r+0x17e>
 8006284:	b1b0      	cbz	r0, 80062b4 <_svfiprintf_r+0x110>
 8006286:	9207      	str	r2, [sp, #28]
 8006288:	e014      	b.n	80062b4 <_svfiprintf_r+0x110>
 800628a:	eba0 0308 	sub.w	r3, r0, r8
 800628e:	fa09 f303 	lsl.w	r3, r9, r3
 8006292:	4313      	orrs	r3, r2
 8006294:	46a2      	mov	sl, r4
 8006296:	9304      	str	r3, [sp, #16]
 8006298:	e7d2      	b.n	8006240 <_svfiprintf_r+0x9c>
 800629a:	9b03      	ldr	r3, [sp, #12]
 800629c:	1d19      	adds	r1, r3, #4
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	9103      	str	r1, [sp, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	bfbb      	ittet	lt
 80062a6:	425b      	neglt	r3, r3
 80062a8:	f042 0202 	orrlt.w	r2, r2, #2
 80062ac:	9307      	strge	r3, [sp, #28]
 80062ae:	9307      	strlt	r3, [sp, #28]
 80062b0:	bfb8      	it	lt
 80062b2:	9204      	strlt	r2, [sp, #16]
 80062b4:	7823      	ldrb	r3, [r4, #0]
 80062b6:	2b2e      	cmp	r3, #46	; 0x2e
 80062b8:	d10c      	bne.n	80062d4 <_svfiprintf_r+0x130>
 80062ba:	7863      	ldrb	r3, [r4, #1]
 80062bc:	2b2a      	cmp	r3, #42	; 0x2a
 80062be:	d135      	bne.n	800632c <_svfiprintf_r+0x188>
 80062c0:	9b03      	ldr	r3, [sp, #12]
 80062c2:	3402      	adds	r4, #2
 80062c4:	1d1a      	adds	r2, r3, #4
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	9203      	str	r2, [sp, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	bfb8      	it	lt
 80062ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80062d2:	9305      	str	r3, [sp, #20]
 80062d4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006394 <_svfiprintf_r+0x1f0>
 80062d8:	2203      	movs	r2, #3
 80062da:	4650      	mov	r0, sl
 80062dc:	7821      	ldrb	r1, [r4, #0]
 80062de:	f000 fe5b 	bl	8006f98 <memchr>
 80062e2:	b140      	cbz	r0, 80062f6 <_svfiprintf_r+0x152>
 80062e4:	2340      	movs	r3, #64	; 0x40
 80062e6:	eba0 000a 	sub.w	r0, r0, sl
 80062ea:	fa03 f000 	lsl.w	r0, r3, r0
 80062ee:	9b04      	ldr	r3, [sp, #16]
 80062f0:	3401      	adds	r4, #1
 80062f2:	4303      	orrs	r3, r0
 80062f4:	9304      	str	r3, [sp, #16]
 80062f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062fa:	2206      	movs	r2, #6
 80062fc:	4826      	ldr	r0, [pc, #152]	; (8006398 <_svfiprintf_r+0x1f4>)
 80062fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006302:	f000 fe49 	bl	8006f98 <memchr>
 8006306:	2800      	cmp	r0, #0
 8006308:	d038      	beq.n	800637c <_svfiprintf_r+0x1d8>
 800630a:	4b24      	ldr	r3, [pc, #144]	; (800639c <_svfiprintf_r+0x1f8>)
 800630c:	bb1b      	cbnz	r3, 8006356 <_svfiprintf_r+0x1b2>
 800630e:	9b03      	ldr	r3, [sp, #12]
 8006310:	3307      	adds	r3, #7
 8006312:	f023 0307 	bic.w	r3, r3, #7
 8006316:	3308      	adds	r3, #8
 8006318:	9303      	str	r3, [sp, #12]
 800631a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800631c:	4433      	add	r3, r6
 800631e:	9309      	str	r3, [sp, #36]	; 0x24
 8006320:	e767      	b.n	80061f2 <_svfiprintf_r+0x4e>
 8006322:	460c      	mov	r4, r1
 8006324:	2001      	movs	r0, #1
 8006326:	fb0c 3202 	mla	r2, ip, r2, r3
 800632a:	e7a5      	b.n	8006278 <_svfiprintf_r+0xd4>
 800632c:	2300      	movs	r3, #0
 800632e:	f04f 0c0a 	mov.w	ip, #10
 8006332:	4619      	mov	r1, r3
 8006334:	3401      	adds	r4, #1
 8006336:	9305      	str	r3, [sp, #20]
 8006338:	4620      	mov	r0, r4
 800633a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800633e:	3a30      	subs	r2, #48	; 0x30
 8006340:	2a09      	cmp	r2, #9
 8006342:	d903      	bls.n	800634c <_svfiprintf_r+0x1a8>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0c5      	beq.n	80062d4 <_svfiprintf_r+0x130>
 8006348:	9105      	str	r1, [sp, #20]
 800634a:	e7c3      	b.n	80062d4 <_svfiprintf_r+0x130>
 800634c:	4604      	mov	r4, r0
 800634e:	2301      	movs	r3, #1
 8006350:	fb0c 2101 	mla	r1, ip, r1, r2
 8006354:	e7f0      	b.n	8006338 <_svfiprintf_r+0x194>
 8006356:	ab03      	add	r3, sp, #12
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	462a      	mov	r2, r5
 800635c:	4638      	mov	r0, r7
 800635e:	4b10      	ldr	r3, [pc, #64]	; (80063a0 <_svfiprintf_r+0x1fc>)
 8006360:	a904      	add	r1, sp, #16
 8006362:	f3af 8000 	nop.w
 8006366:	1c42      	adds	r2, r0, #1
 8006368:	4606      	mov	r6, r0
 800636a:	d1d6      	bne.n	800631a <_svfiprintf_r+0x176>
 800636c:	89ab      	ldrh	r3, [r5, #12]
 800636e:	065b      	lsls	r3, r3, #25
 8006370:	f53f af2c 	bmi.w	80061cc <_svfiprintf_r+0x28>
 8006374:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006376:	b01d      	add	sp, #116	; 0x74
 8006378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637c:	ab03      	add	r3, sp, #12
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	462a      	mov	r2, r5
 8006382:	4638      	mov	r0, r7
 8006384:	4b06      	ldr	r3, [pc, #24]	; (80063a0 <_svfiprintf_r+0x1fc>)
 8006386:	a904      	add	r1, sp, #16
 8006388:	f000 f9d4 	bl	8006734 <_printf_i>
 800638c:	e7eb      	b.n	8006366 <_svfiprintf_r+0x1c2>
 800638e:	bf00      	nop
 8006390:	08008aa4 	.word	0x08008aa4
 8006394:	08008aaa 	.word	0x08008aaa
 8006398:	08008aae 	.word	0x08008aae
 800639c:	00000000 	.word	0x00000000
 80063a0:	080060ed 	.word	0x080060ed

080063a4 <__sfputc_r>:
 80063a4:	6893      	ldr	r3, [r2, #8]
 80063a6:	b410      	push	{r4}
 80063a8:	3b01      	subs	r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	6093      	str	r3, [r2, #8]
 80063ae:	da07      	bge.n	80063c0 <__sfputc_r+0x1c>
 80063b0:	6994      	ldr	r4, [r2, #24]
 80063b2:	42a3      	cmp	r3, r4
 80063b4:	db01      	blt.n	80063ba <__sfputc_r+0x16>
 80063b6:	290a      	cmp	r1, #10
 80063b8:	d102      	bne.n	80063c0 <__sfputc_r+0x1c>
 80063ba:	bc10      	pop	{r4}
 80063bc:	f000 bafa 	b.w	80069b4 <__swbuf_r>
 80063c0:	6813      	ldr	r3, [r2, #0]
 80063c2:	1c58      	adds	r0, r3, #1
 80063c4:	6010      	str	r0, [r2, #0]
 80063c6:	7019      	strb	r1, [r3, #0]
 80063c8:	4608      	mov	r0, r1
 80063ca:	bc10      	pop	{r4}
 80063cc:	4770      	bx	lr

080063ce <__sfputs_r>:
 80063ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d0:	4606      	mov	r6, r0
 80063d2:	460f      	mov	r7, r1
 80063d4:	4614      	mov	r4, r2
 80063d6:	18d5      	adds	r5, r2, r3
 80063d8:	42ac      	cmp	r4, r5
 80063da:	d101      	bne.n	80063e0 <__sfputs_r+0x12>
 80063dc:	2000      	movs	r0, #0
 80063de:	e007      	b.n	80063f0 <__sfputs_r+0x22>
 80063e0:	463a      	mov	r2, r7
 80063e2:	4630      	mov	r0, r6
 80063e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063e8:	f7ff ffdc 	bl	80063a4 <__sfputc_r>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d1f3      	bne.n	80063d8 <__sfputs_r+0xa>
 80063f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063f4 <_vfiprintf_r>:
 80063f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f8:	460d      	mov	r5, r1
 80063fa:	4614      	mov	r4, r2
 80063fc:	4698      	mov	r8, r3
 80063fe:	4606      	mov	r6, r0
 8006400:	b09d      	sub	sp, #116	; 0x74
 8006402:	b118      	cbz	r0, 800640c <_vfiprintf_r+0x18>
 8006404:	6983      	ldr	r3, [r0, #24]
 8006406:	b90b      	cbnz	r3, 800640c <_vfiprintf_r+0x18>
 8006408:	f000 fcc0 	bl	8006d8c <__sinit>
 800640c:	4b89      	ldr	r3, [pc, #548]	; (8006634 <_vfiprintf_r+0x240>)
 800640e:	429d      	cmp	r5, r3
 8006410:	d11b      	bne.n	800644a <_vfiprintf_r+0x56>
 8006412:	6875      	ldr	r5, [r6, #4]
 8006414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006416:	07d9      	lsls	r1, r3, #31
 8006418:	d405      	bmi.n	8006426 <_vfiprintf_r+0x32>
 800641a:	89ab      	ldrh	r3, [r5, #12]
 800641c:	059a      	lsls	r2, r3, #22
 800641e:	d402      	bmi.n	8006426 <_vfiprintf_r+0x32>
 8006420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006422:	f000 fd51 	bl	8006ec8 <__retarget_lock_acquire_recursive>
 8006426:	89ab      	ldrh	r3, [r5, #12]
 8006428:	071b      	lsls	r3, r3, #28
 800642a:	d501      	bpl.n	8006430 <_vfiprintf_r+0x3c>
 800642c:	692b      	ldr	r3, [r5, #16]
 800642e:	b9eb      	cbnz	r3, 800646c <_vfiprintf_r+0x78>
 8006430:	4629      	mov	r1, r5
 8006432:	4630      	mov	r0, r6
 8006434:	f000 fb1e 	bl	8006a74 <__swsetup_r>
 8006438:	b1c0      	cbz	r0, 800646c <_vfiprintf_r+0x78>
 800643a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800643c:	07dc      	lsls	r4, r3, #31
 800643e:	d50e      	bpl.n	800645e <_vfiprintf_r+0x6a>
 8006440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006444:	b01d      	add	sp, #116	; 0x74
 8006446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644a:	4b7b      	ldr	r3, [pc, #492]	; (8006638 <_vfiprintf_r+0x244>)
 800644c:	429d      	cmp	r5, r3
 800644e:	d101      	bne.n	8006454 <_vfiprintf_r+0x60>
 8006450:	68b5      	ldr	r5, [r6, #8]
 8006452:	e7df      	b.n	8006414 <_vfiprintf_r+0x20>
 8006454:	4b79      	ldr	r3, [pc, #484]	; (800663c <_vfiprintf_r+0x248>)
 8006456:	429d      	cmp	r5, r3
 8006458:	bf08      	it	eq
 800645a:	68f5      	ldreq	r5, [r6, #12]
 800645c:	e7da      	b.n	8006414 <_vfiprintf_r+0x20>
 800645e:	89ab      	ldrh	r3, [r5, #12]
 8006460:	0598      	lsls	r0, r3, #22
 8006462:	d4ed      	bmi.n	8006440 <_vfiprintf_r+0x4c>
 8006464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006466:	f000 fd30 	bl	8006eca <__retarget_lock_release_recursive>
 800646a:	e7e9      	b.n	8006440 <_vfiprintf_r+0x4c>
 800646c:	2300      	movs	r3, #0
 800646e:	9309      	str	r3, [sp, #36]	; 0x24
 8006470:	2320      	movs	r3, #32
 8006472:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006476:	2330      	movs	r3, #48	; 0x30
 8006478:	f04f 0901 	mov.w	r9, #1
 800647c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006480:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006640 <_vfiprintf_r+0x24c>
 8006484:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006488:	4623      	mov	r3, r4
 800648a:	469a      	mov	sl, r3
 800648c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006490:	b10a      	cbz	r2, 8006496 <_vfiprintf_r+0xa2>
 8006492:	2a25      	cmp	r2, #37	; 0x25
 8006494:	d1f9      	bne.n	800648a <_vfiprintf_r+0x96>
 8006496:	ebba 0b04 	subs.w	fp, sl, r4
 800649a:	d00b      	beq.n	80064b4 <_vfiprintf_r+0xc0>
 800649c:	465b      	mov	r3, fp
 800649e:	4622      	mov	r2, r4
 80064a0:	4629      	mov	r1, r5
 80064a2:	4630      	mov	r0, r6
 80064a4:	f7ff ff93 	bl	80063ce <__sfputs_r>
 80064a8:	3001      	adds	r0, #1
 80064aa:	f000 80aa 	beq.w	8006602 <_vfiprintf_r+0x20e>
 80064ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064b0:	445a      	add	r2, fp
 80064b2:	9209      	str	r2, [sp, #36]	; 0x24
 80064b4:	f89a 3000 	ldrb.w	r3, [sl]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 80a2 	beq.w	8006602 <_vfiprintf_r+0x20e>
 80064be:	2300      	movs	r3, #0
 80064c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064c8:	f10a 0a01 	add.w	sl, sl, #1
 80064cc:	9304      	str	r3, [sp, #16]
 80064ce:	9307      	str	r3, [sp, #28]
 80064d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064d4:	931a      	str	r3, [sp, #104]	; 0x68
 80064d6:	4654      	mov	r4, sl
 80064d8:	2205      	movs	r2, #5
 80064da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064de:	4858      	ldr	r0, [pc, #352]	; (8006640 <_vfiprintf_r+0x24c>)
 80064e0:	f000 fd5a 	bl	8006f98 <memchr>
 80064e4:	9a04      	ldr	r2, [sp, #16]
 80064e6:	b9d8      	cbnz	r0, 8006520 <_vfiprintf_r+0x12c>
 80064e8:	06d1      	lsls	r1, r2, #27
 80064ea:	bf44      	itt	mi
 80064ec:	2320      	movmi	r3, #32
 80064ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064f2:	0713      	lsls	r3, r2, #28
 80064f4:	bf44      	itt	mi
 80064f6:	232b      	movmi	r3, #43	; 0x2b
 80064f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006500:	2b2a      	cmp	r3, #42	; 0x2a
 8006502:	d015      	beq.n	8006530 <_vfiprintf_r+0x13c>
 8006504:	4654      	mov	r4, sl
 8006506:	2000      	movs	r0, #0
 8006508:	f04f 0c0a 	mov.w	ip, #10
 800650c:	9a07      	ldr	r2, [sp, #28]
 800650e:	4621      	mov	r1, r4
 8006510:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006514:	3b30      	subs	r3, #48	; 0x30
 8006516:	2b09      	cmp	r3, #9
 8006518:	d94e      	bls.n	80065b8 <_vfiprintf_r+0x1c4>
 800651a:	b1b0      	cbz	r0, 800654a <_vfiprintf_r+0x156>
 800651c:	9207      	str	r2, [sp, #28]
 800651e:	e014      	b.n	800654a <_vfiprintf_r+0x156>
 8006520:	eba0 0308 	sub.w	r3, r0, r8
 8006524:	fa09 f303 	lsl.w	r3, r9, r3
 8006528:	4313      	orrs	r3, r2
 800652a:	46a2      	mov	sl, r4
 800652c:	9304      	str	r3, [sp, #16]
 800652e:	e7d2      	b.n	80064d6 <_vfiprintf_r+0xe2>
 8006530:	9b03      	ldr	r3, [sp, #12]
 8006532:	1d19      	adds	r1, r3, #4
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	9103      	str	r1, [sp, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	bfbb      	ittet	lt
 800653c:	425b      	neglt	r3, r3
 800653e:	f042 0202 	orrlt.w	r2, r2, #2
 8006542:	9307      	strge	r3, [sp, #28]
 8006544:	9307      	strlt	r3, [sp, #28]
 8006546:	bfb8      	it	lt
 8006548:	9204      	strlt	r2, [sp, #16]
 800654a:	7823      	ldrb	r3, [r4, #0]
 800654c:	2b2e      	cmp	r3, #46	; 0x2e
 800654e:	d10c      	bne.n	800656a <_vfiprintf_r+0x176>
 8006550:	7863      	ldrb	r3, [r4, #1]
 8006552:	2b2a      	cmp	r3, #42	; 0x2a
 8006554:	d135      	bne.n	80065c2 <_vfiprintf_r+0x1ce>
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	3402      	adds	r4, #2
 800655a:	1d1a      	adds	r2, r3, #4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	9203      	str	r2, [sp, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	bfb8      	it	lt
 8006564:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006568:	9305      	str	r3, [sp, #20]
 800656a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006644 <_vfiprintf_r+0x250>
 800656e:	2203      	movs	r2, #3
 8006570:	4650      	mov	r0, sl
 8006572:	7821      	ldrb	r1, [r4, #0]
 8006574:	f000 fd10 	bl	8006f98 <memchr>
 8006578:	b140      	cbz	r0, 800658c <_vfiprintf_r+0x198>
 800657a:	2340      	movs	r3, #64	; 0x40
 800657c:	eba0 000a 	sub.w	r0, r0, sl
 8006580:	fa03 f000 	lsl.w	r0, r3, r0
 8006584:	9b04      	ldr	r3, [sp, #16]
 8006586:	3401      	adds	r4, #1
 8006588:	4303      	orrs	r3, r0
 800658a:	9304      	str	r3, [sp, #16]
 800658c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006590:	2206      	movs	r2, #6
 8006592:	482d      	ldr	r0, [pc, #180]	; (8006648 <_vfiprintf_r+0x254>)
 8006594:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006598:	f000 fcfe 	bl	8006f98 <memchr>
 800659c:	2800      	cmp	r0, #0
 800659e:	d03f      	beq.n	8006620 <_vfiprintf_r+0x22c>
 80065a0:	4b2a      	ldr	r3, [pc, #168]	; (800664c <_vfiprintf_r+0x258>)
 80065a2:	bb1b      	cbnz	r3, 80065ec <_vfiprintf_r+0x1f8>
 80065a4:	9b03      	ldr	r3, [sp, #12]
 80065a6:	3307      	adds	r3, #7
 80065a8:	f023 0307 	bic.w	r3, r3, #7
 80065ac:	3308      	adds	r3, #8
 80065ae:	9303      	str	r3, [sp, #12]
 80065b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b2:	443b      	add	r3, r7
 80065b4:	9309      	str	r3, [sp, #36]	; 0x24
 80065b6:	e767      	b.n	8006488 <_vfiprintf_r+0x94>
 80065b8:	460c      	mov	r4, r1
 80065ba:	2001      	movs	r0, #1
 80065bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80065c0:	e7a5      	b.n	800650e <_vfiprintf_r+0x11a>
 80065c2:	2300      	movs	r3, #0
 80065c4:	f04f 0c0a 	mov.w	ip, #10
 80065c8:	4619      	mov	r1, r3
 80065ca:	3401      	adds	r4, #1
 80065cc:	9305      	str	r3, [sp, #20]
 80065ce:	4620      	mov	r0, r4
 80065d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065d4:	3a30      	subs	r2, #48	; 0x30
 80065d6:	2a09      	cmp	r2, #9
 80065d8:	d903      	bls.n	80065e2 <_vfiprintf_r+0x1ee>
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0c5      	beq.n	800656a <_vfiprintf_r+0x176>
 80065de:	9105      	str	r1, [sp, #20]
 80065e0:	e7c3      	b.n	800656a <_vfiprintf_r+0x176>
 80065e2:	4604      	mov	r4, r0
 80065e4:	2301      	movs	r3, #1
 80065e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80065ea:	e7f0      	b.n	80065ce <_vfiprintf_r+0x1da>
 80065ec:	ab03      	add	r3, sp, #12
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	462a      	mov	r2, r5
 80065f2:	4630      	mov	r0, r6
 80065f4:	4b16      	ldr	r3, [pc, #88]	; (8006650 <_vfiprintf_r+0x25c>)
 80065f6:	a904      	add	r1, sp, #16
 80065f8:	f3af 8000 	nop.w
 80065fc:	4607      	mov	r7, r0
 80065fe:	1c78      	adds	r0, r7, #1
 8006600:	d1d6      	bne.n	80065b0 <_vfiprintf_r+0x1bc>
 8006602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006604:	07d9      	lsls	r1, r3, #31
 8006606:	d405      	bmi.n	8006614 <_vfiprintf_r+0x220>
 8006608:	89ab      	ldrh	r3, [r5, #12]
 800660a:	059a      	lsls	r2, r3, #22
 800660c:	d402      	bmi.n	8006614 <_vfiprintf_r+0x220>
 800660e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006610:	f000 fc5b 	bl	8006eca <__retarget_lock_release_recursive>
 8006614:	89ab      	ldrh	r3, [r5, #12]
 8006616:	065b      	lsls	r3, r3, #25
 8006618:	f53f af12 	bmi.w	8006440 <_vfiprintf_r+0x4c>
 800661c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800661e:	e711      	b.n	8006444 <_vfiprintf_r+0x50>
 8006620:	ab03      	add	r3, sp, #12
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	462a      	mov	r2, r5
 8006626:	4630      	mov	r0, r6
 8006628:	4b09      	ldr	r3, [pc, #36]	; (8006650 <_vfiprintf_r+0x25c>)
 800662a:	a904      	add	r1, sp, #16
 800662c:	f000 f882 	bl	8006734 <_printf_i>
 8006630:	e7e4      	b.n	80065fc <_vfiprintf_r+0x208>
 8006632:	bf00      	nop
 8006634:	08008bf8 	.word	0x08008bf8
 8006638:	08008c18 	.word	0x08008c18
 800663c:	08008bd8 	.word	0x08008bd8
 8006640:	08008aa4 	.word	0x08008aa4
 8006644:	08008aaa 	.word	0x08008aaa
 8006648:	08008aae 	.word	0x08008aae
 800664c:	00000000 	.word	0x00000000
 8006650:	080063cf 	.word	0x080063cf

08006654 <_printf_common>:
 8006654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006658:	4616      	mov	r6, r2
 800665a:	4699      	mov	r9, r3
 800665c:	688a      	ldr	r2, [r1, #8]
 800665e:	690b      	ldr	r3, [r1, #16]
 8006660:	4607      	mov	r7, r0
 8006662:	4293      	cmp	r3, r2
 8006664:	bfb8      	it	lt
 8006666:	4613      	movlt	r3, r2
 8006668:	6033      	str	r3, [r6, #0]
 800666a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800666e:	460c      	mov	r4, r1
 8006670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006674:	b10a      	cbz	r2, 800667a <_printf_common+0x26>
 8006676:	3301      	adds	r3, #1
 8006678:	6033      	str	r3, [r6, #0]
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	0699      	lsls	r1, r3, #26
 800667e:	bf42      	ittt	mi
 8006680:	6833      	ldrmi	r3, [r6, #0]
 8006682:	3302      	addmi	r3, #2
 8006684:	6033      	strmi	r3, [r6, #0]
 8006686:	6825      	ldr	r5, [r4, #0]
 8006688:	f015 0506 	ands.w	r5, r5, #6
 800668c:	d106      	bne.n	800669c <_printf_common+0x48>
 800668e:	f104 0a19 	add.w	sl, r4, #25
 8006692:	68e3      	ldr	r3, [r4, #12]
 8006694:	6832      	ldr	r2, [r6, #0]
 8006696:	1a9b      	subs	r3, r3, r2
 8006698:	42ab      	cmp	r3, r5
 800669a:	dc28      	bgt.n	80066ee <_printf_common+0x9a>
 800669c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066a0:	1e13      	subs	r3, r2, #0
 80066a2:	6822      	ldr	r2, [r4, #0]
 80066a4:	bf18      	it	ne
 80066a6:	2301      	movne	r3, #1
 80066a8:	0692      	lsls	r2, r2, #26
 80066aa:	d42d      	bmi.n	8006708 <_printf_common+0xb4>
 80066ac:	4649      	mov	r1, r9
 80066ae:	4638      	mov	r0, r7
 80066b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066b4:	47c0      	blx	r8
 80066b6:	3001      	adds	r0, #1
 80066b8:	d020      	beq.n	80066fc <_printf_common+0xa8>
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	68e5      	ldr	r5, [r4, #12]
 80066be:	f003 0306 	and.w	r3, r3, #6
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	bf18      	it	ne
 80066c6:	2500      	movne	r5, #0
 80066c8:	6832      	ldr	r2, [r6, #0]
 80066ca:	f04f 0600 	mov.w	r6, #0
 80066ce:	68a3      	ldr	r3, [r4, #8]
 80066d0:	bf08      	it	eq
 80066d2:	1aad      	subeq	r5, r5, r2
 80066d4:	6922      	ldr	r2, [r4, #16]
 80066d6:	bf08      	it	eq
 80066d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066dc:	4293      	cmp	r3, r2
 80066de:	bfc4      	itt	gt
 80066e0:	1a9b      	subgt	r3, r3, r2
 80066e2:	18ed      	addgt	r5, r5, r3
 80066e4:	341a      	adds	r4, #26
 80066e6:	42b5      	cmp	r5, r6
 80066e8:	d11a      	bne.n	8006720 <_printf_common+0xcc>
 80066ea:	2000      	movs	r0, #0
 80066ec:	e008      	b.n	8006700 <_printf_common+0xac>
 80066ee:	2301      	movs	r3, #1
 80066f0:	4652      	mov	r2, sl
 80066f2:	4649      	mov	r1, r9
 80066f4:	4638      	mov	r0, r7
 80066f6:	47c0      	blx	r8
 80066f8:	3001      	adds	r0, #1
 80066fa:	d103      	bne.n	8006704 <_printf_common+0xb0>
 80066fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006704:	3501      	adds	r5, #1
 8006706:	e7c4      	b.n	8006692 <_printf_common+0x3e>
 8006708:	2030      	movs	r0, #48	; 0x30
 800670a:	18e1      	adds	r1, r4, r3
 800670c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006716:	4422      	add	r2, r4
 8006718:	3302      	adds	r3, #2
 800671a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800671e:	e7c5      	b.n	80066ac <_printf_common+0x58>
 8006720:	2301      	movs	r3, #1
 8006722:	4622      	mov	r2, r4
 8006724:	4649      	mov	r1, r9
 8006726:	4638      	mov	r0, r7
 8006728:	47c0      	blx	r8
 800672a:	3001      	adds	r0, #1
 800672c:	d0e6      	beq.n	80066fc <_printf_common+0xa8>
 800672e:	3601      	adds	r6, #1
 8006730:	e7d9      	b.n	80066e6 <_printf_common+0x92>
	...

08006734 <_printf_i>:
 8006734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006738:	7e0f      	ldrb	r7, [r1, #24]
 800673a:	4691      	mov	r9, r2
 800673c:	2f78      	cmp	r7, #120	; 0x78
 800673e:	4680      	mov	r8, r0
 8006740:	460c      	mov	r4, r1
 8006742:	469a      	mov	sl, r3
 8006744:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006746:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800674a:	d807      	bhi.n	800675c <_printf_i+0x28>
 800674c:	2f62      	cmp	r7, #98	; 0x62
 800674e:	d80a      	bhi.n	8006766 <_printf_i+0x32>
 8006750:	2f00      	cmp	r7, #0
 8006752:	f000 80d9 	beq.w	8006908 <_printf_i+0x1d4>
 8006756:	2f58      	cmp	r7, #88	; 0x58
 8006758:	f000 80a4 	beq.w	80068a4 <_printf_i+0x170>
 800675c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006764:	e03a      	b.n	80067dc <_printf_i+0xa8>
 8006766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800676a:	2b15      	cmp	r3, #21
 800676c:	d8f6      	bhi.n	800675c <_printf_i+0x28>
 800676e:	a101      	add	r1, pc, #4	; (adr r1, 8006774 <_printf_i+0x40>)
 8006770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006774:	080067cd 	.word	0x080067cd
 8006778:	080067e1 	.word	0x080067e1
 800677c:	0800675d 	.word	0x0800675d
 8006780:	0800675d 	.word	0x0800675d
 8006784:	0800675d 	.word	0x0800675d
 8006788:	0800675d 	.word	0x0800675d
 800678c:	080067e1 	.word	0x080067e1
 8006790:	0800675d 	.word	0x0800675d
 8006794:	0800675d 	.word	0x0800675d
 8006798:	0800675d 	.word	0x0800675d
 800679c:	0800675d 	.word	0x0800675d
 80067a0:	080068ef 	.word	0x080068ef
 80067a4:	08006811 	.word	0x08006811
 80067a8:	080068d1 	.word	0x080068d1
 80067ac:	0800675d 	.word	0x0800675d
 80067b0:	0800675d 	.word	0x0800675d
 80067b4:	08006911 	.word	0x08006911
 80067b8:	0800675d 	.word	0x0800675d
 80067bc:	08006811 	.word	0x08006811
 80067c0:	0800675d 	.word	0x0800675d
 80067c4:	0800675d 	.word	0x0800675d
 80067c8:	080068d9 	.word	0x080068d9
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	1d1a      	adds	r2, r3, #4
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	602a      	str	r2, [r5, #0]
 80067d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067dc:	2301      	movs	r3, #1
 80067de:	e0a4      	b.n	800692a <_printf_i+0x1f6>
 80067e0:	6820      	ldr	r0, [r4, #0]
 80067e2:	6829      	ldr	r1, [r5, #0]
 80067e4:	0606      	lsls	r6, r0, #24
 80067e6:	f101 0304 	add.w	r3, r1, #4
 80067ea:	d50a      	bpl.n	8006802 <_printf_i+0xce>
 80067ec:	680e      	ldr	r6, [r1, #0]
 80067ee:	602b      	str	r3, [r5, #0]
 80067f0:	2e00      	cmp	r6, #0
 80067f2:	da03      	bge.n	80067fc <_printf_i+0xc8>
 80067f4:	232d      	movs	r3, #45	; 0x2d
 80067f6:	4276      	negs	r6, r6
 80067f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067fc:	230a      	movs	r3, #10
 80067fe:	485e      	ldr	r0, [pc, #376]	; (8006978 <_printf_i+0x244>)
 8006800:	e019      	b.n	8006836 <_printf_i+0x102>
 8006802:	680e      	ldr	r6, [r1, #0]
 8006804:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006808:	602b      	str	r3, [r5, #0]
 800680a:	bf18      	it	ne
 800680c:	b236      	sxthne	r6, r6
 800680e:	e7ef      	b.n	80067f0 <_printf_i+0xbc>
 8006810:	682b      	ldr	r3, [r5, #0]
 8006812:	6820      	ldr	r0, [r4, #0]
 8006814:	1d19      	adds	r1, r3, #4
 8006816:	6029      	str	r1, [r5, #0]
 8006818:	0601      	lsls	r1, r0, #24
 800681a:	d501      	bpl.n	8006820 <_printf_i+0xec>
 800681c:	681e      	ldr	r6, [r3, #0]
 800681e:	e002      	b.n	8006826 <_printf_i+0xf2>
 8006820:	0646      	lsls	r6, r0, #25
 8006822:	d5fb      	bpl.n	800681c <_printf_i+0xe8>
 8006824:	881e      	ldrh	r6, [r3, #0]
 8006826:	2f6f      	cmp	r7, #111	; 0x6f
 8006828:	bf0c      	ite	eq
 800682a:	2308      	moveq	r3, #8
 800682c:	230a      	movne	r3, #10
 800682e:	4852      	ldr	r0, [pc, #328]	; (8006978 <_printf_i+0x244>)
 8006830:	2100      	movs	r1, #0
 8006832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006836:	6865      	ldr	r5, [r4, #4]
 8006838:	2d00      	cmp	r5, #0
 800683a:	bfa8      	it	ge
 800683c:	6821      	ldrge	r1, [r4, #0]
 800683e:	60a5      	str	r5, [r4, #8]
 8006840:	bfa4      	itt	ge
 8006842:	f021 0104 	bicge.w	r1, r1, #4
 8006846:	6021      	strge	r1, [r4, #0]
 8006848:	b90e      	cbnz	r6, 800684e <_printf_i+0x11a>
 800684a:	2d00      	cmp	r5, #0
 800684c:	d04d      	beq.n	80068ea <_printf_i+0x1b6>
 800684e:	4615      	mov	r5, r2
 8006850:	fbb6 f1f3 	udiv	r1, r6, r3
 8006854:	fb03 6711 	mls	r7, r3, r1, r6
 8006858:	5dc7      	ldrb	r7, [r0, r7]
 800685a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800685e:	4637      	mov	r7, r6
 8006860:	42bb      	cmp	r3, r7
 8006862:	460e      	mov	r6, r1
 8006864:	d9f4      	bls.n	8006850 <_printf_i+0x11c>
 8006866:	2b08      	cmp	r3, #8
 8006868:	d10b      	bne.n	8006882 <_printf_i+0x14e>
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	07de      	lsls	r6, r3, #31
 800686e:	d508      	bpl.n	8006882 <_printf_i+0x14e>
 8006870:	6923      	ldr	r3, [r4, #16]
 8006872:	6861      	ldr	r1, [r4, #4]
 8006874:	4299      	cmp	r1, r3
 8006876:	bfde      	ittt	le
 8006878:	2330      	movle	r3, #48	; 0x30
 800687a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800687e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006882:	1b52      	subs	r2, r2, r5
 8006884:	6122      	str	r2, [r4, #16]
 8006886:	464b      	mov	r3, r9
 8006888:	4621      	mov	r1, r4
 800688a:	4640      	mov	r0, r8
 800688c:	f8cd a000 	str.w	sl, [sp]
 8006890:	aa03      	add	r2, sp, #12
 8006892:	f7ff fedf 	bl	8006654 <_printf_common>
 8006896:	3001      	adds	r0, #1
 8006898:	d14c      	bne.n	8006934 <_printf_i+0x200>
 800689a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800689e:	b004      	add	sp, #16
 80068a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a4:	4834      	ldr	r0, [pc, #208]	; (8006978 <_printf_i+0x244>)
 80068a6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068aa:	6829      	ldr	r1, [r5, #0]
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80068b2:	6029      	str	r1, [r5, #0]
 80068b4:	061d      	lsls	r5, r3, #24
 80068b6:	d514      	bpl.n	80068e2 <_printf_i+0x1ae>
 80068b8:	07df      	lsls	r7, r3, #31
 80068ba:	bf44      	itt	mi
 80068bc:	f043 0320 	orrmi.w	r3, r3, #32
 80068c0:	6023      	strmi	r3, [r4, #0]
 80068c2:	b91e      	cbnz	r6, 80068cc <_printf_i+0x198>
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	f023 0320 	bic.w	r3, r3, #32
 80068ca:	6023      	str	r3, [r4, #0]
 80068cc:	2310      	movs	r3, #16
 80068ce:	e7af      	b.n	8006830 <_printf_i+0xfc>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	f043 0320 	orr.w	r3, r3, #32
 80068d6:	6023      	str	r3, [r4, #0]
 80068d8:	2378      	movs	r3, #120	; 0x78
 80068da:	4828      	ldr	r0, [pc, #160]	; (800697c <_printf_i+0x248>)
 80068dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068e0:	e7e3      	b.n	80068aa <_printf_i+0x176>
 80068e2:	0659      	lsls	r1, r3, #25
 80068e4:	bf48      	it	mi
 80068e6:	b2b6      	uxthmi	r6, r6
 80068e8:	e7e6      	b.n	80068b8 <_printf_i+0x184>
 80068ea:	4615      	mov	r5, r2
 80068ec:	e7bb      	b.n	8006866 <_printf_i+0x132>
 80068ee:	682b      	ldr	r3, [r5, #0]
 80068f0:	6826      	ldr	r6, [r4, #0]
 80068f2:	1d18      	adds	r0, r3, #4
 80068f4:	6961      	ldr	r1, [r4, #20]
 80068f6:	6028      	str	r0, [r5, #0]
 80068f8:	0635      	lsls	r5, r6, #24
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	d501      	bpl.n	8006902 <_printf_i+0x1ce>
 80068fe:	6019      	str	r1, [r3, #0]
 8006900:	e002      	b.n	8006908 <_printf_i+0x1d4>
 8006902:	0670      	lsls	r0, r6, #25
 8006904:	d5fb      	bpl.n	80068fe <_printf_i+0x1ca>
 8006906:	8019      	strh	r1, [r3, #0]
 8006908:	2300      	movs	r3, #0
 800690a:	4615      	mov	r5, r2
 800690c:	6123      	str	r3, [r4, #16]
 800690e:	e7ba      	b.n	8006886 <_printf_i+0x152>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	2100      	movs	r1, #0
 8006914:	1d1a      	adds	r2, r3, #4
 8006916:	602a      	str	r2, [r5, #0]
 8006918:	681d      	ldr	r5, [r3, #0]
 800691a:	6862      	ldr	r2, [r4, #4]
 800691c:	4628      	mov	r0, r5
 800691e:	f000 fb3b 	bl	8006f98 <memchr>
 8006922:	b108      	cbz	r0, 8006928 <_printf_i+0x1f4>
 8006924:	1b40      	subs	r0, r0, r5
 8006926:	6060      	str	r0, [r4, #4]
 8006928:	6863      	ldr	r3, [r4, #4]
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	2300      	movs	r3, #0
 800692e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006932:	e7a8      	b.n	8006886 <_printf_i+0x152>
 8006934:	462a      	mov	r2, r5
 8006936:	4649      	mov	r1, r9
 8006938:	4640      	mov	r0, r8
 800693a:	6923      	ldr	r3, [r4, #16]
 800693c:	47d0      	blx	sl
 800693e:	3001      	adds	r0, #1
 8006940:	d0ab      	beq.n	800689a <_printf_i+0x166>
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	079b      	lsls	r3, r3, #30
 8006946:	d413      	bmi.n	8006970 <_printf_i+0x23c>
 8006948:	68e0      	ldr	r0, [r4, #12]
 800694a:	9b03      	ldr	r3, [sp, #12]
 800694c:	4298      	cmp	r0, r3
 800694e:	bfb8      	it	lt
 8006950:	4618      	movlt	r0, r3
 8006952:	e7a4      	b.n	800689e <_printf_i+0x16a>
 8006954:	2301      	movs	r3, #1
 8006956:	4632      	mov	r2, r6
 8006958:	4649      	mov	r1, r9
 800695a:	4640      	mov	r0, r8
 800695c:	47d0      	blx	sl
 800695e:	3001      	adds	r0, #1
 8006960:	d09b      	beq.n	800689a <_printf_i+0x166>
 8006962:	3501      	adds	r5, #1
 8006964:	68e3      	ldr	r3, [r4, #12]
 8006966:	9903      	ldr	r1, [sp, #12]
 8006968:	1a5b      	subs	r3, r3, r1
 800696a:	42ab      	cmp	r3, r5
 800696c:	dcf2      	bgt.n	8006954 <_printf_i+0x220>
 800696e:	e7eb      	b.n	8006948 <_printf_i+0x214>
 8006970:	2500      	movs	r5, #0
 8006972:	f104 0619 	add.w	r6, r4, #25
 8006976:	e7f5      	b.n	8006964 <_printf_i+0x230>
 8006978:	08008ab5 	.word	0x08008ab5
 800697c:	08008ac6 	.word	0x08008ac6

08006980 <nan>:
 8006980:	2000      	movs	r0, #0
 8006982:	4901      	ldr	r1, [pc, #4]	; (8006988 <nan+0x8>)
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	7ff80000 	.word	0x7ff80000

0800698c <strncmp>:
 800698c:	4603      	mov	r3, r0
 800698e:	b510      	push	{r4, lr}
 8006990:	b172      	cbz	r2, 80069b0 <strncmp+0x24>
 8006992:	3901      	subs	r1, #1
 8006994:	1884      	adds	r4, r0, r2
 8006996:	f813 0b01 	ldrb.w	r0, [r3], #1
 800699a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800699e:	4290      	cmp	r0, r2
 80069a0:	d101      	bne.n	80069a6 <strncmp+0x1a>
 80069a2:	42a3      	cmp	r3, r4
 80069a4:	d101      	bne.n	80069aa <strncmp+0x1e>
 80069a6:	1a80      	subs	r0, r0, r2
 80069a8:	bd10      	pop	{r4, pc}
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d1f3      	bne.n	8006996 <strncmp+0xa>
 80069ae:	e7fa      	b.n	80069a6 <strncmp+0x1a>
 80069b0:	4610      	mov	r0, r2
 80069b2:	e7f9      	b.n	80069a8 <strncmp+0x1c>

080069b4 <__swbuf_r>:
 80069b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b6:	460e      	mov	r6, r1
 80069b8:	4614      	mov	r4, r2
 80069ba:	4605      	mov	r5, r0
 80069bc:	b118      	cbz	r0, 80069c6 <__swbuf_r+0x12>
 80069be:	6983      	ldr	r3, [r0, #24]
 80069c0:	b90b      	cbnz	r3, 80069c6 <__swbuf_r+0x12>
 80069c2:	f000 f9e3 	bl	8006d8c <__sinit>
 80069c6:	4b21      	ldr	r3, [pc, #132]	; (8006a4c <__swbuf_r+0x98>)
 80069c8:	429c      	cmp	r4, r3
 80069ca:	d12b      	bne.n	8006a24 <__swbuf_r+0x70>
 80069cc:	686c      	ldr	r4, [r5, #4]
 80069ce:	69a3      	ldr	r3, [r4, #24]
 80069d0:	60a3      	str	r3, [r4, #8]
 80069d2:	89a3      	ldrh	r3, [r4, #12]
 80069d4:	071a      	lsls	r2, r3, #28
 80069d6:	d52f      	bpl.n	8006a38 <__swbuf_r+0x84>
 80069d8:	6923      	ldr	r3, [r4, #16]
 80069da:	b36b      	cbz	r3, 8006a38 <__swbuf_r+0x84>
 80069dc:	6923      	ldr	r3, [r4, #16]
 80069de:	6820      	ldr	r0, [r4, #0]
 80069e0:	b2f6      	uxtb	r6, r6
 80069e2:	1ac0      	subs	r0, r0, r3
 80069e4:	6963      	ldr	r3, [r4, #20]
 80069e6:	4637      	mov	r7, r6
 80069e8:	4283      	cmp	r3, r0
 80069ea:	dc04      	bgt.n	80069f6 <__swbuf_r+0x42>
 80069ec:	4621      	mov	r1, r4
 80069ee:	4628      	mov	r0, r5
 80069f0:	f000 f938 	bl	8006c64 <_fflush_r>
 80069f4:	bb30      	cbnz	r0, 8006a44 <__swbuf_r+0x90>
 80069f6:	68a3      	ldr	r3, [r4, #8]
 80069f8:	3001      	adds	r0, #1
 80069fa:	3b01      	subs	r3, #1
 80069fc:	60a3      	str	r3, [r4, #8]
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	6022      	str	r2, [r4, #0]
 8006a04:	701e      	strb	r6, [r3, #0]
 8006a06:	6963      	ldr	r3, [r4, #20]
 8006a08:	4283      	cmp	r3, r0
 8006a0a:	d004      	beq.n	8006a16 <__swbuf_r+0x62>
 8006a0c:	89a3      	ldrh	r3, [r4, #12]
 8006a0e:	07db      	lsls	r3, r3, #31
 8006a10:	d506      	bpl.n	8006a20 <__swbuf_r+0x6c>
 8006a12:	2e0a      	cmp	r6, #10
 8006a14:	d104      	bne.n	8006a20 <__swbuf_r+0x6c>
 8006a16:	4621      	mov	r1, r4
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f000 f923 	bl	8006c64 <_fflush_r>
 8006a1e:	b988      	cbnz	r0, 8006a44 <__swbuf_r+0x90>
 8006a20:	4638      	mov	r0, r7
 8006a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a24:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <__swbuf_r+0x9c>)
 8006a26:	429c      	cmp	r4, r3
 8006a28:	d101      	bne.n	8006a2e <__swbuf_r+0x7a>
 8006a2a:	68ac      	ldr	r4, [r5, #8]
 8006a2c:	e7cf      	b.n	80069ce <__swbuf_r+0x1a>
 8006a2e:	4b09      	ldr	r3, [pc, #36]	; (8006a54 <__swbuf_r+0xa0>)
 8006a30:	429c      	cmp	r4, r3
 8006a32:	bf08      	it	eq
 8006a34:	68ec      	ldreq	r4, [r5, #12]
 8006a36:	e7ca      	b.n	80069ce <__swbuf_r+0x1a>
 8006a38:	4621      	mov	r1, r4
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f000 f81a 	bl	8006a74 <__swsetup_r>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d0cb      	beq.n	80069dc <__swbuf_r+0x28>
 8006a44:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006a48:	e7ea      	b.n	8006a20 <__swbuf_r+0x6c>
 8006a4a:	bf00      	nop
 8006a4c:	08008bf8 	.word	0x08008bf8
 8006a50:	08008c18 	.word	0x08008c18
 8006a54:	08008bd8 	.word	0x08008bd8

08006a58 <__ascii_wctomb>:
 8006a58:	4603      	mov	r3, r0
 8006a5a:	4608      	mov	r0, r1
 8006a5c:	b141      	cbz	r1, 8006a70 <__ascii_wctomb+0x18>
 8006a5e:	2aff      	cmp	r2, #255	; 0xff
 8006a60:	d904      	bls.n	8006a6c <__ascii_wctomb+0x14>
 8006a62:	228a      	movs	r2, #138	; 0x8a
 8006a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	4770      	bx	lr
 8006a6c:	2001      	movs	r0, #1
 8006a6e:	700a      	strb	r2, [r1, #0]
 8006a70:	4770      	bx	lr
	...

08006a74 <__swsetup_r>:
 8006a74:	4b32      	ldr	r3, [pc, #200]	; (8006b40 <__swsetup_r+0xcc>)
 8006a76:	b570      	push	{r4, r5, r6, lr}
 8006a78:	681d      	ldr	r5, [r3, #0]
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	b125      	cbz	r5, 8006a8a <__swsetup_r+0x16>
 8006a80:	69ab      	ldr	r3, [r5, #24]
 8006a82:	b913      	cbnz	r3, 8006a8a <__swsetup_r+0x16>
 8006a84:	4628      	mov	r0, r5
 8006a86:	f000 f981 	bl	8006d8c <__sinit>
 8006a8a:	4b2e      	ldr	r3, [pc, #184]	; (8006b44 <__swsetup_r+0xd0>)
 8006a8c:	429c      	cmp	r4, r3
 8006a8e:	d10f      	bne.n	8006ab0 <__swsetup_r+0x3c>
 8006a90:	686c      	ldr	r4, [r5, #4]
 8006a92:	89a3      	ldrh	r3, [r4, #12]
 8006a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a98:	0719      	lsls	r1, r3, #28
 8006a9a:	d42c      	bmi.n	8006af6 <__swsetup_r+0x82>
 8006a9c:	06dd      	lsls	r5, r3, #27
 8006a9e:	d411      	bmi.n	8006ac4 <__swsetup_r+0x50>
 8006aa0:	2309      	movs	r3, #9
 8006aa2:	6033      	str	r3, [r6, #0]
 8006aa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006aac:	81a3      	strh	r3, [r4, #12]
 8006aae:	e03e      	b.n	8006b2e <__swsetup_r+0xba>
 8006ab0:	4b25      	ldr	r3, [pc, #148]	; (8006b48 <__swsetup_r+0xd4>)
 8006ab2:	429c      	cmp	r4, r3
 8006ab4:	d101      	bne.n	8006aba <__swsetup_r+0x46>
 8006ab6:	68ac      	ldr	r4, [r5, #8]
 8006ab8:	e7eb      	b.n	8006a92 <__swsetup_r+0x1e>
 8006aba:	4b24      	ldr	r3, [pc, #144]	; (8006b4c <__swsetup_r+0xd8>)
 8006abc:	429c      	cmp	r4, r3
 8006abe:	bf08      	it	eq
 8006ac0:	68ec      	ldreq	r4, [r5, #12]
 8006ac2:	e7e6      	b.n	8006a92 <__swsetup_r+0x1e>
 8006ac4:	0758      	lsls	r0, r3, #29
 8006ac6:	d512      	bpl.n	8006aee <__swsetup_r+0x7a>
 8006ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aca:	b141      	cbz	r1, 8006ade <__swsetup_r+0x6a>
 8006acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ad0:	4299      	cmp	r1, r3
 8006ad2:	d002      	beq.n	8006ada <__swsetup_r+0x66>
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f7fd faf5 	bl	80040c4 <_free_r>
 8006ada:	2300      	movs	r3, #0
 8006adc:	6363      	str	r3, [r4, #52]	; 0x34
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ae4:	81a3      	strh	r3, [r4, #12]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	6063      	str	r3, [r4, #4]
 8006aea:	6923      	ldr	r3, [r4, #16]
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	89a3      	ldrh	r3, [r4, #12]
 8006af0:	f043 0308 	orr.w	r3, r3, #8
 8006af4:	81a3      	strh	r3, [r4, #12]
 8006af6:	6923      	ldr	r3, [r4, #16]
 8006af8:	b94b      	cbnz	r3, 8006b0e <__swsetup_r+0x9a>
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b04:	d003      	beq.n	8006b0e <__swsetup_r+0x9a>
 8006b06:	4621      	mov	r1, r4
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f000 fa05 	bl	8006f18 <__smakebuf_r>
 8006b0e:	89a0      	ldrh	r0, [r4, #12]
 8006b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b14:	f010 0301 	ands.w	r3, r0, #1
 8006b18:	d00a      	beq.n	8006b30 <__swsetup_r+0xbc>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60a3      	str	r3, [r4, #8]
 8006b1e:	6963      	ldr	r3, [r4, #20]
 8006b20:	425b      	negs	r3, r3
 8006b22:	61a3      	str	r3, [r4, #24]
 8006b24:	6923      	ldr	r3, [r4, #16]
 8006b26:	b943      	cbnz	r3, 8006b3a <__swsetup_r+0xc6>
 8006b28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b2c:	d1ba      	bne.n	8006aa4 <__swsetup_r+0x30>
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	0781      	lsls	r1, r0, #30
 8006b32:	bf58      	it	pl
 8006b34:	6963      	ldrpl	r3, [r4, #20]
 8006b36:	60a3      	str	r3, [r4, #8]
 8006b38:	e7f4      	b.n	8006b24 <__swsetup_r+0xb0>
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	e7f7      	b.n	8006b2e <__swsetup_r+0xba>
 8006b3e:	bf00      	nop
 8006b40:	20000020 	.word	0x20000020
 8006b44:	08008bf8 	.word	0x08008bf8
 8006b48:	08008c18 	.word	0x08008c18
 8006b4c:	08008bd8 	.word	0x08008bd8

08006b50 <abort>:
 8006b50:	2006      	movs	r0, #6
 8006b52:	b508      	push	{r3, lr}
 8006b54:	f000 faa0 	bl	8007098 <raise>
 8006b58:	2001      	movs	r0, #1
 8006b5a:	f7fa fff0 	bl	8001b3e <_exit>
	...

08006b60 <__sflush_r>:
 8006b60:	898a      	ldrh	r2, [r1, #12]
 8006b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b64:	4605      	mov	r5, r0
 8006b66:	0710      	lsls	r0, r2, #28
 8006b68:	460c      	mov	r4, r1
 8006b6a:	d457      	bmi.n	8006c1c <__sflush_r+0xbc>
 8006b6c:	684b      	ldr	r3, [r1, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	dc04      	bgt.n	8006b7c <__sflush_r+0x1c>
 8006b72:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dc01      	bgt.n	8006b7c <__sflush_r+0x1c>
 8006b78:	2000      	movs	r0, #0
 8006b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b7e:	2e00      	cmp	r6, #0
 8006b80:	d0fa      	beq.n	8006b78 <__sflush_r+0x18>
 8006b82:	2300      	movs	r3, #0
 8006b84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b88:	682f      	ldr	r7, [r5, #0]
 8006b8a:	602b      	str	r3, [r5, #0]
 8006b8c:	d032      	beq.n	8006bf4 <__sflush_r+0x94>
 8006b8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b90:	89a3      	ldrh	r3, [r4, #12]
 8006b92:	075a      	lsls	r2, r3, #29
 8006b94:	d505      	bpl.n	8006ba2 <__sflush_r+0x42>
 8006b96:	6863      	ldr	r3, [r4, #4]
 8006b98:	1ac0      	subs	r0, r0, r3
 8006b9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b9c:	b10b      	cbz	r3, 8006ba2 <__sflush_r+0x42>
 8006b9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ba0:	1ac0      	subs	r0, r0, r3
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ba8:	4628      	mov	r0, r5
 8006baa:	6a21      	ldr	r1, [r4, #32]
 8006bac:	47b0      	blx	r6
 8006bae:	1c43      	adds	r3, r0, #1
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	d106      	bne.n	8006bc2 <__sflush_r+0x62>
 8006bb4:	6829      	ldr	r1, [r5, #0]
 8006bb6:	291d      	cmp	r1, #29
 8006bb8:	d82c      	bhi.n	8006c14 <__sflush_r+0xb4>
 8006bba:	4a29      	ldr	r2, [pc, #164]	; (8006c60 <__sflush_r+0x100>)
 8006bbc:	40ca      	lsrs	r2, r1
 8006bbe:	07d6      	lsls	r6, r2, #31
 8006bc0:	d528      	bpl.n	8006c14 <__sflush_r+0xb4>
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	6062      	str	r2, [r4, #4]
 8006bc6:	6922      	ldr	r2, [r4, #16]
 8006bc8:	04d9      	lsls	r1, r3, #19
 8006bca:	6022      	str	r2, [r4, #0]
 8006bcc:	d504      	bpl.n	8006bd8 <__sflush_r+0x78>
 8006bce:	1c42      	adds	r2, r0, #1
 8006bd0:	d101      	bne.n	8006bd6 <__sflush_r+0x76>
 8006bd2:	682b      	ldr	r3, [r5, #0]
 8006bd4:	b903      	cbnz	r3, 8006bd8 <__sflush_r+0x78>
 8006bd6:	6560      	str	r0, [r4, #84]	; 0x54
 8006bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bda:	602f      	str	r7, [r5, #0]
 8006bdc:	2900      	cmp	r1, #0
 8006bde:	d0cb      	beq.n	8006b78 <__sflush_r+0x18>
 8006be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006be4:	4299      	cmp	r1, r3
 8006be6:	d002      	beq.n	8006bee <__sflush_r+0x8e>
 8006be8:	4628      	mov	r0, r5
 8006bea:	f7fd fa6b 	bl	80040c4 <_free_r>
 8006bee:	2000      	movs	r0, #0
 8006bf0:	6360      	str	r0, [r4, #52]	; 0x34
 8006bf2:	e7c2      	b.n	8006b7a <__sflush_r+0x1a>
 8006bf4:	6a21      	ldr	r1, [r4, #32]
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	47b0      	blx	r6
 8006bfc:	1c41      	adds	r1, r0, #1
 8006bfe:	d1c7      	bne.n	8006b90 <__sflush_r+0x30>
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0c4      	beq.n	8006b90 <__sflush_r+0x30>
 8006c06:	2b1d      	cmp	r3, #29
 8006c08:	d001      	beq.n	8006c0e <__sflush_r+0xae>
 8006c0a:	2b16      	cmp	r3, #22
 8006c0c:	d101      	bne.n	8006c12 <__sflush_r+0xb2>
 8006c0e:	602f      	str	r7, [r5, #0]
 8006c10:	e7b2      	b.n	8006b78 <__sflush_r+0x18>
 8006c12:	89a3      	ldrh	r3, [r4, #12]
 8006c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c18:	81a3      	strh	r3, [r4, #12]
 8006c1a:	e7ae      	b.n	8006b7a <__sflush_r+0x1a>
 8006c1c:	690f      	ldr	r7, [r1, #16]
 8006c1e:	2f00      	cmp	r7, #0
 8006c20:	d0aa      	beq.n	8006b78 <__sflush_r+0x18>
 8006c22:	0793      	lsls	r3, r2, #30
 8006c24:	bf18      	it	ne
 8006c26:	2300      	movne	r3, #0
 8006c28:	680e      	ldr	r6, [r1, #0]
 8006c2a:	bf08      	it	eq
 8006c2c:	694b      	ldreq	r3, [r1, #20]
 8006c2e:	1bf6      	subs	r6, r6, r7
 8006c30:	600f      	str	r7, [r1, #0]
 8006c32:	608b      	str	r3, [r1, #8]
 8006c34:	2e00      	cmp	r6, #0
 8006c36:	dd9f      	ble.n	8006b78 <__sflush_r+0x18>
 8006c38:	4633      	mov	r3, r6
 8006c3a:	463a      	mov	r2, r7
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	6a21      	ldr	r1, [r4, #32]
 8006c40:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006c44:	47e0      	blx	ip
 8006c46:	2800      	cmp	r0, #0
 8006c48:	dc06      	bgt.n	8006c58 <__sflush_r+0xf8>
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c54:	81a3      	strh	r3, [r4, #12]
 8006c56:	e790      	b.n	8006b7a <__sflush_r+0x1a>
 8006c58:	4407      	add	r7, r0
 8006c5a:	1a36      	subs	r6, r6, r0
 8006c5c:	e7ea      	b.n	8006c34 <__sflush_r+0xd4>
 8006c5e:	bf00      	nop
 8006c60:	20400001 	.word	0x20400001

08006c64 <_fflush_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	690b      	ldr	r3, [r1, #16]
 8006c68:	4605      	mov	r5, r0
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	b913      	cbnz	r3, 8006c74 <_fflush_r+0x10>
 8006c6e:	2500      	movs	r5, #0
 8006c70:	4628      	mov	r0, r5
 8006c72:	bd38      	pop	{r3, r4, r5, pc}
 8006c74:	b118      	cbz	r0, 8006c7e <_fflush_r+0x1a>
 8006c76:	6983      	ldr	r3, [r0, #24]
 8006c78:	b90b      	cbnz	r3, 8006c7e <_fflush_r+0x1a>
 8006c7a:	f000 f887 	bl	8006d8c <__sinit>
 8006c7e:	4b14      	ldr	r3, [pc, #80]	; (8006cd0 <_fflush_r+0x6c>)
 8006c80:	429c      	cmp	r4, r3
 8006c82:	d11b      	bne.n	8006cbc <_fflush_r+0x58>
 8006c84:	686c      	ldr	r4, [r5, #4]
 8006c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d0ef      	beq.n	8006c6e <_fflush_r+0xa>
 8006c8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c90:	07d0      	lsls	r0, r2, #31
 8006c92:	d404      	bmi.n	8006c9e <_fflush_r+0x3a>
 8006c94:	0599      	lsls	r1, r3, #22
 8006c96:	d402      	bmi.n	8006c9e <_fflush_r+0x3a>
 8006c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c9a:	f000 f915 	bl	8006ec8 <__retarget_lock_acquire_recursive>
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	f7ff ff5d 	bl	8006b60 <__sflush_r>
 8006ca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ca8:	4605      	mov	r5, r0
 8006caa:	07da      	lsls	r2, r3, #31
 8006cac:	d4e0      	bmi.n	8006c70 <_fflush_r+0xc>
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	059b      	lsls	r3, r3, #22
 8006cb2:	d4dd      	bmi.n	8006c70 <_fflush_r+0xc>
 8006cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cb6:	f000 f908 	bl	8006eca <__retarget_lock_release_recursive>
 8006cba:	e7d9      	b.n	8006c70 <_fflush_r+0xc>
 8006cbc:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <_fflush_r+0x70>)
 8006cbe:	429c      	cmp	r4, r3
 8006cc0:	d101      	bne.n	8006cc6 <_fflush_r+0x62>
 8006cc2:	68ac      	ldr	r4, [r5, #8]
 8006cc4:	e7df      	b.n	8006c86 <_fflush_r+0x22>
 8006cc6:	4b04      	ldr	r3, [pc, #16]	; (8006cd8 <_fflush_r+0x74>)
 8006cc8:	429c      	cmp	r4, r3
 8006cca:	bf08      	it	eq
 8006ccc:	68ec      	ldreq	r4, [r5, #12]
 8006cce:	e7da      	b.n	8006c86 <_fflush_r+0x22>
 8006cd0:	08008bf8 	.word	0x08008bf8
 8006cd4:	08008c18 	.word	0x08008c18
 8006cd8:	08008bd8 	.word	0x08008bd8

08006cdc <std>:
 8006cdc:	2300      	movs	r3, #0
 8006cde:	b510      	push	{r4, lr}
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ce6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cea:	6083      	str	r3, [r0, #8]
 8006cec:	8181      	strh	r1, [r0, #12]
 8006cee:	6643      	str	r3, [r0, #100]	; 0x64
 8006cf0:	81c2      	strh	r2, [r0, #14]
 8006cf2:	6183      	str	r3, [r0, #24]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	2208      	movs	r2, #8
 8006cf8:	305c      	adds	r0, #92	; 0x5c
 8006cfa:	f7fd f9db 	bl	80040b4 <memset>
 8006cfe:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <std+0x38>)
 8006d00:	6224      	str	r4, [r4, #32]
 8006d02:	6263      	str	r3, [r4, #36]	; 0x24
 8006d04:	4b04      	ldr	r3, [pc, #16]	; (8006d18 <std+0x3c>)
 8006d06:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d08:	4b04      	ldr	r3, [pc, #16]	; (8006d1c <std+0x40>)
 8006d0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d0c:	4b04      	ldr	r3, [pc, #16]	; (8006d20 <std+0x44>)
 8006d0e:	6323      	str	r3, [r4, #48]	; 0x30
 8006d10:	bd10      	pop	{r4, pc}
 8006d12:	bf00      	nop
 8006d14:	080070d1 	.word	0x080070d1
 8006d18:	080070f3 	.word	0x080070f3
 8006d1c:	0800712b 	.word	0x0800712b
 8006d20:	0800714f 	.word	0x0800714f

08006d24 <_cleanup_r>:
 8006d24:	4901      	ldr	r1, [pc, #4]	; (8006d2c <_cleanup_r+0x8>)
 8006d26:	f000 b8af 	b.w	8006e88 <_fwalk_reent>
 8006d2a:	bf00      	nop
 8006d2c:	08006c65 	.word	0x08006c65

08006d30 <__sfmoreglue>:
 8006d30:	2268      	movs	r2, #104	; 0x68
 8006d32:	b570      	push	{r4, r5, r6, lr}
 8006d34:	1e4d      	subs	r5, r1, #1
 8006d36:	4355      	muls	r5, r2
 8006d38:	460e      	mov	r6, r1
 8006d3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d3e:	f7fd fa29 	bl	8004194 <_malloc_r>
 8006d42:	4604      	mov	r4, r0
 8006d44:	b140      	cbz	r0, 8006d58 <__sfmoreglue+0x28>
 8006d46:	2100      	movs	r1, #0
 8006d48:	e9c0 1600 	strd	r1, r6, [r0]
 8006d4c:	300c      	adds	r0, #12
 8006d4e:	60a0      	str	r0, [r4, #8]
 8006d50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d54:	f7fd f9ae 	bl	80040b4 <memset>
 8006d58:	4620      	mov	r0, r4
 8006d5a:	bd70      	pop	{r4, r5, r6, pc}

08006d5c <__sfp_lock_acquire>:
 8006d5c:	4801      	ldr	r0, [pc, #4]	; (8006d64 <__sfp_lock_acquire+0x8>)
 8006d5e:	f000 b8b3 	b.w	8006ec8 <__retarget_lock_acquire_recursive>
 8006d62:	bf00      	nop
 8006d64:	20000851 	.word	0x20000851

08006d68 <__sfp_lock_release>:
 8006d68:	4801      	ldr	r0, [pc, #4]	; (8006d70 <__sfp_lock_release+0x8>)
 8006d6a:	f000 b8ae 	b.w	8006eca <__retarget_lock_release_recursive>
 8006d6e:	bf00      	nop
 8006d70:	20000851 	.word	0x20000851

08006d74 <__sinit_lock_acquire>:
 8006d74:	4801      	ldr	r0, [pc, #4]	; (8006d7c <__sinit_lock_acquire+0x8>)
 8006d76:	f000 b8a7 	b.w	8006ec8 <__retarget_lock_acquire_recursive>
 8006d7a:	bf00      	nop
 8006d7c:	20000852 	.word	0x20000852

08006d80 <__sinit_lock_release>:
 8006d80:	4801      	ldr	r0, [pc, #4]	; (8006d88 <__sinit_lock_release+0x8>)
 8006d82:	f000 b8a2 	b.w	8006eca <__retarget_lock_release_recursive>
 8006d86:	bf00      	nop
 8006d88:	20000852 	.word	0x20000852

08006d8c <__sinit>:
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	4604      	mov	r4, r0
 8006d90:	f7ff fff0 	bl	8006d74 <__sinit_lock_acquire>
 8006d94:	69a3      	ldr	r3, [r4, #24]
 8006d96:	b11b      	cbz	r3, 8006da0 <__sinit+0x14>
 8006d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d9c:	f7ff bff0 	b.w	8006d80 <__sinit_lock_release>
 8006da0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006da4:	6523      	str	r3, [r4, #80]	; 0x50
 8006da6:	4b13      	ldr	r3, [pc, #76]	; (8006df4 <__sinit+0x68>)
 8006da8:	4a13      	ldr	r2, [pc, #76]	; (8006df8 <__sinit+0x6c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	62a2      	str	r2, [r4, #40]	; 0x28
 8006dae:	42a3      	cmp	r3, r4
 8006db0:	bf08      	it	eq
 8006db2:	2301      	moveq	r3, #1
 8006db4:	4620      	mov	r0, r4
 8006db6:	bf08      	it	eq
 8006db8:	61a3      	streq	r3, [r4, #24]
 8006dba:	f000 f81f 	bl	8006dfc <__sfp>
 8006dbe:	6060      	str	r0, [r4, #4]
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f000 f81b 	bl	8006dfc <__sfp>
 8006dc6:	60a0      	str	r0, [r4, #8]
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 f817 	bl	8006dfc <__sfp>
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2104      	movs	r1, #4
 8006dd2:	60e0      	str	r0, [r4, #12]
 8006dd4:	6860      	ldr	r0, [r4, #4]
 8006dd6:	f7ff ff81 	bl	8006cdc <std>
 8006dda:	2201      	movs	r2, #1
 8006ddc:	2109      	movs	r1, #9
 8006dde:	68a0      	ldr	r0, [r4, #8]
 8006de0:	f7ff ff7c 	bl	8006cdc <std>
 8006de4:	2202      	movs	r2, #2
 8006de6:	2112      	movs	r1, #18
 8006de8:	68e0      	ldr	r0, [r4, #12]
 8006dea:	f7ff ff77 	bl	8006cdc <std>
 8006dee:	2301      	movs	r3, #1
 8006df0:	61a3      	str	r3, [r4, #24]
 8006df2:	e7d1      	b.n	8006d98 <__sinit+0xc>
 8006df4:	080087ac 	.word	0x080087ac
 8006df8:	08006d25 	.word	0x08006d25

08006dfc <__sfp>:
 8006dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfe:	4607      	mov	r7, r0
 8006e00:	f7ff ffac 	bl	8006d5c <__sfp_lock_acquire>
 8006e04:	4b1e      	ldr	r3, [pc, #120]	; (8006e80 <__sfp+0x84>)
 8006e06:	681e      	ldr	r6, [r3, #0]
 8006e08:	69b3      	ldr	r3, [r6, #24]
 8006e0a:	b913      	cbnz	r3, 8006e12 <__sfp+0x16>
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	f7ff ffbd 	bl	8006d8c <__sinit>
 8006e12:	3648      	adds	r6, #72	; 0x48
 8006e14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	d503      	bpl.n	8006e24 <__sfp+0x28>
 8006e1c:	6833      	ldr	r3, [r6, #0]
 8006e1e:	b30b      	cbz	r3, 8006e64 <__sfp+0x68>
 8006e20:	6836      	ldr	r6, [r6, #0]
 8006e22:	e7f7      	b.n	8006e14 <__sfp+0x18>
 8006e24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e28:	b9d5      	cbnz	r5, 8006e60 <__sfp+0x64>
 8006e2a:	4b16      	ldr	r3, [pc, #88]	; (8006e84 <__sfp+0x88>)
 8006e2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e30:	60e3      	str	r3, [r4, #12]
 8006e32:	6665      	str	r5, [r4, #100]	; 0x64
 8006e34:	f000 f847 	bl	8006ec6 <__retarget_lock_init_recursive>
 8006e38:	f7ff ff96 	bl	8006d68 <__sfp_lock_release>
 8006e3c:	2208      	movs	r2, #8
 8006e3e:	4629      	mov	r1, r5
 8006e40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e48:	6025      	str	r5, [r4, #0]
 8006e4a:	61a5      	str	r5, [r4, #24]
 8006e4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e50:	f7fd f930 	bl	80040b4 <memset>
 8006e54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e60:	3468      	adds	r4, #104	; 0x68
 8006e62:	e7d9      	b.n	8006e18 <__sfp+0x1c>
 8006e64:	2104      	movs	r1, #4
 8006e66:	4638      	mov	r0, r7
 8006e68:	f7ff ff62 	bl	8006d30 <__sfmoreglue>
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	6030      	str	r0, [r6, #0]
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d1d5      	bne.n	8006e20 <__sfp+0x24>
 8006e74:	f7ff ff78 	bl	8006d68 <__sfp_lock_release>
 8006e78:	230c      	movs	r3, #12
 8006e7a:	603b      	str	r3, [r7, #0]
 8006e7c:	e7ee      	b.n	8006e5c <__sfp+0x60>
 8006e7e:	bf00      	nop
 8006e80:	080087ac 	.word	0x080087ac
 8006e84:	ffff0001 	.word	0xffff0001

08006e88 <_fwalk_reent>:
 8006e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e8c:	4606      	mov	r6, r0
 8006e8e:	4688      	mov	r8, r1
 8006e90:	2700      	movs	r7, #0
 8006e92:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e9a:	f1b9 0901 	subs.w	r9, r9, #1
 8006e9e:	d505      	bpl.n	8006eac <_fwalk_reent+0x24>
 8006ea0:	6824      	ldr	r4, [r4, #0]
 8006ea2:	2c00      	cmp	r4, #0
 8006ea4:	d1f7      	bne.n	8006e96 <_fwalk_reent+0xe>
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eac:	89ab      	ldrh	r3, [r5, #12]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d907      	bls.n	8006ec2 <_fwalk_reent+0x3a>
 8006eb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	d003      	beq.n	8006ec2 <_fwalk_reent+0x3a>
 8006eba:	4629      	mov	r1, r5
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	47c0      	blx	r8
 8006ec0:	4307      	orrs	r7, r0
 8006ec2:	3568      	adds	r5, #104	; 0x68
 8006ec4:	e7e9      	b.n	8006e9a <_fwalk_reent+0x12>

08006ec6 <__retarget_lock_init_recursive>:
 8006ec6:	4770      	bx	lr

08006ec8 <__retarget_lock_acquire_recursive>:
 8006ec8:	4770      	bx	lr

08006eca <__retarget_lock_release_recursive>:
 8006eca:	4770      	bx	lr

08006ecc <__swhatbuf_r>:
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	460e      	mov	r6, r1
 8006ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed4:	4614      	mov	r4, r2
 8006ed6:	2900      	cmp	r1, #0
 8006ed8:	461d      	mov	r5, r3
 8006eda:	b096      	sub	sp, #88	; 0x58
 8006edc:	da08      	bge.n	8006ef0 <__swhatbuf_r+0x24>
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ee4:	602a      	str	r2, [r5, #0]
 8006ee6:	061a      	lsls	r2, r3, #24
 8006ee8:	d410      	bmi.n	8006f0c <__swhatbuf_r+0x40>
 8006eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eee:	e00e      	b.n	8006f0e <__swhatbuf_r+0x42>
 8006ef0:	466a      	mov	r2, sp
 8006ef2:	f000 f953 	bl	800719c <_fstat_r>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	dbf1      	blt.n	8006ede <__swhatbuf_r+0x12>
 8006efa:	9a01      	ldr	r2, [sp, #4]
 8006efc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f04:	425a      	negs	r2, r3
 8006f06:	415a      	adcs	r2, r3
 8006f08:	602a      	str	r2, [r5, #0]
 8006f0a:	e7ee      	b.n	8006eea <__swhatbuf_r+0x1e>
 8006f0c:	2340      	movs	r3, #64	; 0x40
 8006f0e:	2000      	movs	r0, #0
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	b016      	add	sp, #88	; 0x58
 8006f14:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f18 <__smakebuf_r>:
 8006f18:	898b      	ldrh	r3, [r1, #12]
 8006f1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f1c:	079d      	lsls	r5, r3, #30
 8006f1e:	4606      	mov	r6, r0
 8006f20:	460c      	mov	r4, r1
 8006f22:	d507      	bpl.n	8006f34 <__smakebuf_r+0x1c>
 8006f24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	6123      	str	r3, [r4, #16]
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	6163      	str	r3, [r4, #20]
 8006f30:	b002      	add	sp, #8
 8006f32:	bd70      	pop	{r4, r5, r6, pc}
 8006f34:	466a      	mov	r2, sp
 8006f36:	ab01      	add	r3, sp, #4
 8006f38:	f7ff ffc8 	bl	8006ecc <__swhatbuf_r>
 8006f3c:	9900      	ldr	r1, [sp, #0]
 8006f3e:	4605      	mov	r5, r0
 8006f40:	4630      	mov	r0, r6
 8006f42:	f7fd f927 	bl	8004194 <_malloc_r>
 8006f46:	b948      	cbnz	r0, 8006f5c <__smakebuf_r+0x44>
 8006f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f4c:	059a      	lsls	r2, r3, #22
 8006f4e:	d4ef      	bmi.n	8006f30 <__smakebuf_r+0x18>
 8006f50:	f023 0303 	bic.w	r3, r3, #3
 8006f54:	f043 0302 	orr.w	r3, r3, #2
 8006f58:	81a3      	strh	r3, [r4, #12]
 8006f5a:	e7e3      	b.n	8006f24 <__smakebuf_r+0xc>
 8006f5c:	4b0d      	ldr	r3, [pc, #52]	; (8006f94 <__smakebuf_r+0x7c>)
 8006f5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f60:	89a3      	ldrh	r3, [r4, #12]
 8006f62:	6020      	str	r0, [r4, #0]
 8006f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f68:	81a3      	strh	r3, [r4, #12]
 8006f6a:	9b00      	ldr	r3, [sp, #0]
 8006f6c:	6120      	str	r0, [r4, #16]
 8006f6e:	6163      	str	r3, [r4, #20]
 8006f70:	9b01      	ldr	r3, [sp, #4]
 8006f72:	b15b      	cbz	r3, 8006f8c <__smakebuf_r+0x74>
 8006f74:	4630      	mov	r0, r6
 8006f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f7a:	f000 f921 	bl	80071c0 <_isatty_r>
 8006f7e:	b128      	cbz	r0, 8006f8c <__smakebuf_r+0x74>
 8006f80:	89a3      	ldrh	r3, [r4, #12]
 8006f82:	f023 0303 	bic.w	r3, r3, #3
 8006f86:	f043 0301 	orr.w	r3, r3, #1
 8006f8a:	81a3      	strh	r3, [r4, #12]
 8006f8c:	89a0      	ldrh	r0, [r4, #12]
 8006f8e:	4305      	orrs	r5, r0
 8006f90:	81a5      	strh	r5, [r4, #12]
 8006f92:	e7cd      	b.n	8006f30 <__smakebuf_r+0x18>
 8006f94:	08006d25 	.word	0x08006d25

08006f98 <memchr>:
 8006f98:	4603      	mov	r3, r0
 8006f9a:	b510      	push	{r4, lr}
 8006f9c:	b2c9      	uxtb	r1, r1
 8006f9e:	4402      	add	r2, r0
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	d101      	bne.n	8006faa <memchr+0x12>
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	e003      	b.n	8006fb2 <memchr+0x1a>
 8006faa:	7804      	ldrb	r4, [r0, #0]
 8006fac:	3301      	adds	r3, #1
 8006fae:	428c      	cmp	r4, r1
 8006fb0:	d1f6      	bne.n	8006fa0 <memchr+0x8>
 8006fb2:	bd10      	pop	{r4, pc}

08006fb4 <memmove>:
 8006fb4:	4288      	cmp	r0, r1
 8006fb6:	b510      	push	{r4, lr}
 8006fb8:	eb01 0402 	add.w	r4, r1, r2
 8006fbc:	d902      	bls.n	8006fc4 <memmove+0x10>
 8006fbe:	4284      	cmp	r4, r0
 8006fc0:	4623      	mov	r3, r4
 8006fc2:	d807      	bhi.n	8006fd4 <memmove+0x20>
 8006fc4:	1e43      	subs	r3, r0, #1
 8006fc6:	42a1      	cmp	r1, r4
 8006fc8:	d008      	beq.n	8006fdc <memmove+0x28>
 8006fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fd2:	e7f8      	b.n	8006fc6 <memmove+0x12>
 8006fd4:	4601      	mov	r1, r0
 8006fd6:	4402      	add	r2, r0
 8006fd8:	428a      	cmp	r2, r1
 8006fda:	d100      	bne.n	8006fde <memmove+0x2a>
 8006fdc:	bd10      	pop	{r4, pc}
 8006fde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fe6:	e7f7      	b.n	8006fd8 <memmove+0x24>

08006fe8 <_realloc_r>:
 8006fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fec:	4680      	mov	r8, r0
 8006fee:	4614      	mov	r4, r2
 8006ff0:	460e      	mov	r6, r1
 8006ff2:	b921      	cbnz	r1, 8006ffe <_realloc_r+0x16>
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffa:	f7fd b8cb 	b.w	8004194 <_malloc_r>
 8006ffe:	b92a      	cbnz	r2, 800700c <_realloc_r+0x24>
 8007000:	f7fd f860 	bl	80040c4 <_free_r>
 8007004:	4625      	mov	r5, r4
 8007006:	4628      	mov	r0, r5
 8007008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800700c:	f000 f8fa 	bl	8007204 <_malloc_usable_size_r>
 8007010:	4284      	cmp	r4, r0
 8007012:	4607      	mov	r7, r0
 8007014:	d802      	bhi.n	800701c <_realloc_r+0x34>
 8007016:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800701a:	d812      	bhi.n	8007042 <_realloc_r+0x5a>
 800701c:	4621      	mov	r1, r4
 800701e:	4640      	mov	r0, r8
 8007020:	f7fd f8b8 	bl	8004194 <_malloc_r>
 8007024:	4605      	mov	r5, r0
 8007026:	2800      	cmp	r0, #0
 8007028:	d0ed      	beq.n	8007006 <_realloc_r+0x1e>
 800702a:	42bc      	cmp	r4, r7
 800702c:	4622      	mov	r2, r4
 800702e:	4631      	mov	r1, r6
 8007030:	bf28      	it	cs
 8007032:	463a      	movcs	r2, r7
 8007034:	f7fe fb74 	bl	8005720 <memcpy>
 8007038:	4631      	mov	r1, r6
 800703a:	4640      	mov	r0, r8
 800703c:	f7fd f842 	bl	80040c4 <_free_r>
 8007040:	e7e1      	b.n	8007006 <_realloc_r+0x1e>
 8007042:	4635      	mov	r5, r6
 8007044:	e7df      	b.n	8007006 <_realloc_r+0x1e>

08007046 <_raise_r>:
 8007046:	291f      	cmp	r1, #31
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4604      	mov	r4, r0
 800704c:	460d      	mov	r5, r1
 800704e:	d904      	bls.n	800705a <_raise_r+0x14>
 8007050:	2316      	movs	r3, #22
 8007052:	6003      	str	r3, [r0, #0]
 8007054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007058:	bd38      	pop	{r3, r4, r5, pc}
 800705a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800705c:	b112      	cbz	r2, 8007064 <_raise_r+0x1e>
 800705e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007062:	b94b      	cbnz	r3, 8007078 <_raise_r+0x32>
 8007064:	4620      	mov	r0, r4
 8007066:	f000 f831 	bl	80070cc <_getpid_r>
 800706a:	462a      	mov	r2, r5
 800706c:	4601      	mov	r1, r0
 800706e:	4620      	mov	r0, r4
 8007070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007074:	f000 b818 	b.w	80070a8 <_kill_r>
 8007078:	2b01      	cmp	r3, #1
 800707a:	d00a      	beq.n	8007092 <_raise_r+0x4c>
 800707c:	1c59      	adds	r1, r3, #1
 800707e:	d103      	bne.n	8007088 <_raise_r+0x42>
 8007080:	2316      	movs	r3, #22
 8007082:	6003      	str	r3, [r0, #0]
 8007084:	2001      	movs	r0, #1
 8007086:	e7e7      	b.n	8007058 <_raise_r+0x12>
 8007088:	2400      	movs	r4, #0
 800708a:	4628      	mov	r0, r5
 800708c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007090:	4798      	blx	r3
 8007092:	2000      	movs	r0, #0
 8007094:	e7e0      	b.n	8007058 <_raise_r+0x12>
	...

08007098 <raise>:
 8007098:	4b02      	ldr	r3, [pc, #8]	; (80070a4 <raise+0xc>)
 800709a:	4601      	mov	r1, r0
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	f7ff bfd2 	b.w	8007046 <_raise_r>
 80070a2:	bf00      	nop
 80070a4:	20000020 	.word	0x20000020

080070a8 <_kill_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	2300      	movs	r3, #0
 80070ac:	4d06      	ldr	r5, [pc, #24]	; (80070c8 <_kill_r+0x20>)
 80070ae:	4604      	mov	r4, r0
 80070b0:	4608      	mov	r0, r1
 80070b2:	4611      	mov	r1, r2
 80070b4:	602b      	str	r3, [r5, #0]
 80070b6:	f7fa fd32 	bl	8001b1e <_kill>
 80070ba:	1c43      	adds	r3, r0, #1
 80070bc:	d102      	bne.n	80070c4 <_kill_r+0x1c>
 80070be:	682b      	ldr	r3, [r5, #0]
 80070c0:	b103      	cbz	r3, 80070c4 <_kill_r+0x1c>
 80070c2:	6023      	str	r3, [r4, #0]
 80070c4:	bd38      	pop	{r3, r4, r5, pc}
 80070c6:	bf00      	nop
 80070c8:	2000084c 	.word	0x2000084c

080070cc <_getpid_r>:
 80070cc:	f7fa bd20 	b.w	8001b10 <_getpid>

080070d0 <__sread>:
 80070d0:	b510      	push	{r4, lr}
 80070d2:	460c      	mov	r4, r1
 80070d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d8:	f000 f89c 	bl	8007214 <_read_r>
 80070dc:	2800      	cmp	r0, #0
 80070de:	bfab      	itete	ge
 80070e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070e2:	89a3      	ldrhlt	r3, [r4, #12]
 80070e4:	181b      	addge	r3, r3, r0
 80070e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070ea:	bfac      	ite	ge
 80070ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80070ee:	81a3      	strhlt	r3, [r4, #12]
 80070f0:	bd10      	pop	{r4, pc}

080070f2 <__swrite>:
 80070f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070f6:	461f      	mov	r7, r3
 80070f8:	898b      	ldrh	r3, [r1, #12]
 80070fa:	4605      	mov	r5, r0
 80070fc:	05db      	lsls	r3, r3, #23
 80070fe:	460c      	mov	r4, r1
 8007100:	4616      	mov	r6, r2
 8007102:	d505      	bpl.n	8007110 <__swrite+0x1e>
 8007104:	2302      	movs	r3, #2
 8007106:	2200      	movs	r2, #0
 8007108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800710c:	f000 f868 	bl	80071e0 <_lseek_r>
 8007110:	89a3      	ldrh	r3, [r4, #12]
 8007112:	4632      	mov	r2, r6
 8007114:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007118:	81a3      	strh	r3, [r4, #12]
 800711a:	4628      	mov	r0, r5
 800711c:	463b      	mov	r3, r7
 800711e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007126:	f000 b817 	b.w	8007158 <_write_r>

0800712a <__sseek>:
 800712a:	b510      	push	{r4, lr}
 800712c:	460c      	mov	r4, r1
 800712e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007132:	f000 f855 	bl	80071e0 <_lseek_r>
 8007136:	1c43      	adds	r3, r0, #1
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	bf15      	itete	ne
 800713c:	6560      	strne	r0, [r4, #84]	; 0x54
 800713e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007142:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007146:	81a3      	strheq	r3, [r4, #12]
 8007148:	bf18      	it	ne
 800714a:	81a3      	strhne	r3, [r4, #12]
 800714c:	bd10      	pop	{r4, pc}

0800714e <__sclose>:
 800714e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007152:	f000 b813 	b.w	800717c <_close_r>
	...

08007158 <_write_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4604      	mov	r4, r0
 800715c:	4608      	mov	r0, r1
 800715e:	4611      	mov	r1, r2
 8007160:	2200      	movs	r2, #0
 8007162:	4d05      	ldr	r5, [pc, #20]	; (8007178 <_write_r+0x20>)
 8007164:	602a      	str	r2, [r5, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	f7fa fd10 	bl	8001b8c <_write>
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	d102      	bne.n	8007176 <_write_r+0x1e>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	b103      	cbz	r3, 8007176 <_write_r+0x1e>
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	bd38      	pop	{r3, r4, r5, pc}
 8007178:	2000084c 	.word	0x2000084c

0800717c <_close_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	2300      	movs	r3, #0
 8007180:	4d05      	ldr	r5, [pc, #20]	; (8007198 <_close_r+0x1c>)
 8007182:	4604      	mov	r4, r0
 8007184:	4608      	mov	r0, r1
 8007186:	602b      	str	r3, [r5, #0]
 8007188:	f7fa fd1c 	bl	8001bc4 <_close>
 800718c:	1c43      	adds	r3, r0, #1
 800718e:	d102      	bne.n	8007196 <_close_r+0x1a>
 8007190:	682b      	ldr	r3, [r5, #0]
 8007192:	b103      	cbz	r3, 8007196 <_close_r+0x1a>
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	bd38      	pop	{r3, r4, r5, pc}
 8007198:	2000084c 	.word	0x2000084c

0800719c <_fstat_r>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	2300      	movs	r3, #0
 80071a0:	4d06      	ldr	r5, [pc, #24]	; (80071bc <_fstat_r+0x20>)
 80071a2:	4604      	mov	r4, r0
 80071a4:	4608      	mov	r0, r1
 80071a6:	4611      	mov	r1, r2
 80071a8:	602b      	str	r3, [r5, #0]
 80071aa:	f7fa fd16 	bl	8001bda <_fstat>
 80071ae:	1c43      	adds	r3, r0, #1
 80071b0:	d102      	bne.n	80071b8 <_fstat_r+0x1c>
 80071b2:	682b      	ldr	r3, [r5, #0]
 80071b4:	b103      	cbz	r3, 80071b8 <_fstat_r+0x1c>
 80071b6:	6023      	str	r3, [r4, #0]
 80071b8:	bd38      	pop	{r3, r4, r5, pc}
 80071ba:	bf00      	nop
 80071bc:	2000084c 	.word	0x2000084c

080071c0 <_isatty_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	2300      	movs	r3, #0
 80071c4:	4d05      	ldr	r5, [pc, #20]	; (80071dc <_isatty_r+0x1c>)
 80071c6:	4604      	mov	r4, r0
 80071c8:	4608      	mov	r0, r1
 80071ca:	602b      	str	r3, [r5, #0]
 80071cc:	f7fa fd14 	bl	8001bf8 <_isatty>
 80071d0:	1c43      	adds	r3, r0, #1
 80071d2:	d102      	bne.n	80071da <_isatty_r+0x1a>
 80071d4:	682b      	ldr	r3, [r5, #0]
 80071d6:	b103      	cbz	r3, 80071da <_isatty_r+0x1a>
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	bd38      	pop	{r3, r4, r5, pc}
 80071dc:	2000084c 	.word	0x2000084c

080071e0 <_lseek_r>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	4604      	mov	r4, r0
 80071e4:	4608      	mov	r0, r1
 80071e6:	4611      	mov	r1, r2
 80071e8:	2200      	movs	r2, #0
 80071ea:	4d05      	ldr	r5, [pc, #20]	; (8007200 <_lseek_r+0x20>)
 80071ec:	602a      	str	r2, [r5, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	f7fa fd0c 	bl	8001c0c <_lseek>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d102      	bne.n	80071fe <_lseek_r+0x1e>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	b103      	cbz	r3, 80071fe <_lseek_r+0x1e>
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	2000084c 	.word	0x2000084c

08007204 <_malloc_usable_size_r>:
 8007204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007208:	1f18      	subs	r0, r3, #4
 800720a:	2b00      	cmp	r3, #0
 800720c:	bfbc      	itt	lt
 800720e:	580b      	ldrlt	r3, [r1, r0]
 8007210:	18c0      	addlt	r0, r0, r3
 8007212:	4770      	bx	lr

08007214 <_read_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4604      	mov	r4, r0
 8007218:	4608      	mov	r0, r1
 800721a:	4611      	mov	r1, r2
 800721c:	2200      	movs	r2, #0
 800721e:	4d05      	ldr	r5, [pc, #20]	; (8007234 <_read_r+0x20>)
 8007220:	602a      	str	r2, [r5, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	f7fa fc95 	bl	8001b52 <_read>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d102      	bne.n	8007232 <_read_r+0x1e>
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	b103      	cbz	r3, 8007232 <_read_r+0x1e>
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	bd38      	pop	{r3, r4, r5, pc}
 8007234:	2000084c 	.word	0x2000084c

08007238 <_init>:
 8007238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723a:	bf00      	nop
 800723c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800723e:	bc08      	pop	{r3}
 8007240:	469e      	mov	lr, r3
 8007242:	4770      	bx	lr

08007244 <_fini>:
 8007244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007246:	bf00      	nop
 8007248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724a:	bc08      	pop	{r3}
 800724c:	469e      	mov	lr, r3
 800724e:	4770      	bx	lr
