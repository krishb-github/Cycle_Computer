
cycleComp_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000882c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002658  08008940  08008940  00018940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af98  0800af98  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800af98  0800af98  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af98  0800af98  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af98  0800af98  0001af98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af9c  0800af9c  0001af9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800afa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  200001f4  0800b194  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000858  0800b194  00020858  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8d7  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f50  00000000  00000000  0002aaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0002ca48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a80  00000000  00000000  0002d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018682  00000000  00000000  0002dff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d83a  00000000  00000000  0004667a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086502  00000000  00000000  00053eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da3b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d4  00000000  00000000  000da408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008924 	.word	0x08008924

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08008924 	.word	0x08008924

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	4605      	mov	r5, r0
 8000d9c:	460c      	mov	r4, r1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2300      	movs	r3, #0
 8000da2:	4628      	mov	r0, r5
 8000da4:	4621      	mov	r1, r4
 8000da6:	f7ff fe13 	bl	80009d0 <__aeabi_dcmplt>
 8000daa:	b928      	cbnz	r0, 8000db8 <__aeabi_d2lz+0x20>
 8000dac:	4628      	mov	r0, r5
 8000dae:	4621      	mov	r1, r4
 8000db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db4:	f000 b80a 	b.w	8000dcc <__aeabi_d2ulz>
 8000db8:	4628      	mov	r0, r5
 8000dba:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000dbe:	f000 f805 	bl	8000dcc <__aeabi_d2ulz>
 8000dc2:	4240      	negs	r0, r0
 8000dc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc8:	bd38      	pop	{r3, r4, r5, pc}
 8000dca:	bf00      	nop

08000dcc <__aeabi_d2ulz>:
 8000dcc:	b5d0      	push	{r4, r6, r7, lr}
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <__aeabi_d2ulz+0x34>)
 8000dd2:	4606      	mov	r6, r0
 8000dd4:	460f      	mov	r7, r1
 8000dd6:	f7ff fb89 	bl	80004ec <__aeabi_dmul>
 8000dda:	f7ff fe5f 	bl	8000a9c <__aeabi_d2uiz>
 8000dde:	4604      	mov	r4, r0
 8000de0:	f7ff fb0a 	bl	80003f8 <__aeabi_ui2d>
 8000de4:	2200      	movs	r2, #0
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <__aeabi_d2ulz+0x38>)
 8000de8:	f7ff fb80 	bl	80004ec <__aeabi_dmul>
 8000dec:	4602      	mov	r2, r0
 8000dee:	460b      	mov	r3, r1
 8000df0:	4630      	mov	r0, r6
 8000df2:	4639      	mov	r1, r7
 8000df4:	f7ff f9c2 	bl	800017c <__aeabi_dsub>
 8000df8:	f7ff fe50 	bl	8000a9c <__aeabi_d2uiz>
 8000dfc:	4621      	mov	r1, r4
 8000dfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000e00:	3df00000 	.word	0x3df00000
 8000e04:	41f00000 	.word	0x41f00000

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t displayCntr = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	75fb      	strb	r3, [r7, #23]
	float tripCnt = 0.0;
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
	char tripStr[9] = "         ";
 8000e18:	4a95      	ldr	r2, [pc, #596]	; (8001070 <main+0x268>)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e1e:	c303      	stmia	r3!, {r0, r1}
 8000e20:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e22:	f001 f98b 	bl	800213c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e26:	f000 f943 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2a:	f000 f9dd 	bl	80011e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e2e:	f000 f983 	bl	8001138 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000e32:	f000 f9af 	bl	8001194 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();  // initialise
 8000e36:	f000 fc49 	bl	80016cc <SSD1306_Init>

  /* USER CODE END 2 */

  nmea_mem_init(&gpsData);
 8000e3a:	488e      	ldr	r0, [pc, #568]	; (8001074 <main+0x26c>)
 8000e3c:	f000 fa31 	bl	80012a2 <nmea_mem_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(updateFlag != 0)
 8000e40:	4b8d      	ldr	r3, [pc, #564]	; (8001078 <main+0x270>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f000 80d4 	beq.w	8000ff2 <main+0x1ea>
	  {
		  tripCnt = tripCnt + ((float)newSpeed/3.6);
 8000e4a:	6938      	ldr	r0, [r7, #16]
 8000e4c:	f7ff faf6 	bl	800043c <__aeabi_f2d>
 8000e50:	4604      	mov	r4, r0
 8000e52:	460d      	mov	r5, r1
 8000e54:	4b89      	ldr	r3, [pc, #548]	; (800107c <main+0x274>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff45 	bl	8000ce8 <__aeabi_ui2f>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff faeb 	bl	800043c <__aeabi_f2d>
 8000e66:	a380      	add	r3, pc, #512	; (adr r3, 8001068 <main+0x260>)
 8000e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6c:	f7ff fc68 	bl	8000740 <__aeabi_ddiv>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4620      	mov	r0, r4
 8000e76:	4629      	mov	r1, r5
 8000e78:	f7ff f982 	bl	8000180 <__adddf3>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	f7ff fe2a 	bl	8000adc <__aeabi_d2f>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	613b      	str	r3, [r7, #16]
		  sprintf(tripStr,"%0.3f",(double)(tripCnt/1000.0));
 8000e8c:	6938      	ldr	r0, [r7, #16]
 8000e8e:	f7ff fad5 	bl	800043c <__aeabi_f2d>
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	4b7a      	ldr	r3, [pc, #488]	; (8001080 <main+0x278>)
 8000e98:	f7ff fc52 	bl	8000740 <__aeabi_ddiv>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	1d38      	adds	r0, r7, #4
 8000ea2:	4978      	ldr	r1, [pc, #480]	; (8001084 <main+0x27c>)
 8000ea4:	f004 f884 	bl	8004fb0 <siprintf>
		  if(displayCntr < 10)
 8000ea8:	7dfb      	ldrb	r3, [r7, #23]
 8000eaa:	2b09      	cmp	r3, #9
 8000eac:	d822      	bhi.n	8000ef4 <main+0xec>
		  {
			  if(displayCntr == 0)
 8000eae:	7dfb      	ldrb	r3, [r7, #23]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <main+0xb0>
				  SSD1306_Clear();
 8000eb4:	f000 fe2d 	bl	8001b12 <SSD1306_Clear>
			  displayCntr++;
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	75fb      	strb	r3, [r7, #23]
			  updateFlag = 0;
 8000ebe:	4b6e      	ldr	r3, [pc, #440]	; (8001078 <main+0x270>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
			  SSD1306_GotoXY (40,25);
 8000ec4:	2119      	movs	r1, #25
 8000ec6:	2028      	movs	r0, #40	; 0x28
 8000ec8:	f000 fd68 	bl	800199c <SSD1306_GotoXY>
			  SSD1306_Puts (gpsData.speed, &Font_16x26, 1);
 8000ecc:	4b69      	ldr	r3, [pc, #420]	; (8001074 <main+0x26c>)
 8000ece:	69db      	ldr	r3, [r3, #28]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	496d      	ldr	r1, [pc, #436]	; (8001088 <main+0x280>)
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fdf7 	bl	8001ac8 <SSD1306_Puts>
			  SSD1306_GotoXY (0,0);
 8000eda:	2100      	movs	r1, #0
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 fd5d 	bl	800199c <SSD1306_GotoXY>
			  SSD1306_Puts (tripStr, &Font_11x18, 1);
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4969      	ldr	r1, [pc, #420]	; (800108c <main+0x284>)
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fded 	bl	8001ac8 <SSD1306_Puts>
			  SSD1306_UpdateScreen();
 8000eee:	f000 fcb1 	bl	8001854 <SSD1306_UpdateScreen>
 8000ef2:	e7a5      	b.n	8000e40 <main+0x38>
		  }
		  else if(displayCntr < 15)
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	2b0e      	cmp	r3, #14
 8000ef8:	d844      	bhi.n	8000f84 <main+0x17c>
		  {
			  if(displayCntr == 10)
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	2b0a      	cmp	r3, #10
 8000efe:	d101      	bne.n	8000f04 <main+0xfc>
			  	  SSD1306_Clear();
 8000f00:	f000 fe07 	bl	8001b12 <SSD1306_Clear>
			  displayCntr++;
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	3301      	adds	r3, #1
 8000f08:	75fb      	strb	r3, [r7, #23]
			  updateFlag = 0;
 8000f0a:	4b5b      	ldr	r3, [pc, #364]	; (8001078 <main+0x270>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
			  SSD1306_GotoXY (0,0);
 8000f10:	2100      	movs	r1, #0
 8000f12:	2000      	movs	r0, #0
 8000f14:	f000 fd42 	bl	800199c <SSD1306_GotoXY>
			  SSD1306_Puts (gpsData.validStatus, &Font_11x18, 1);
 8000f18:	4b56      	ldr	r3, [pc, #344]	; (8001074 <main+0x26c>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	495b      	ldr	r1, [pc, #364]	; (800108c <main+0x284>)
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 fdd1 	bl	8001ac8 <SSD1306_Puts>
			  SSD1306_GotoXY (0,20);
 8000f26:	2114      	movs	r1, #20
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f000 fd37 	bl	800199c <SSD1306_GotoXY>
			  SSD1306_Puts (gpsData.lat, &Font_11x18, 1);
 8000f2e:	4b51      	ldr	r3, [pc, #324]	; (8001074 <main+0x26c>)
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	2201      	movs	r2, #1
 8000f34:	4955      	ldr	r1, [pc, #340]	; (800108c <main+0x284>)
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fdc6 	bl	8001ac8 <SSD1306_Puts>
			  SSD1306_GotoXY (110,20);
 8000f3c:	2114      	movs	r1, #20
 8000f3e:	206e      	movs	r0, #110	; 0x6e
 8000f40:	f000 fd2c 	bl	800199c <SSD1306_GotoXY>
			  SSD1306_Puts (gpsData.latDir, &Font_11x18, 1);
 8000f44:	4b4b      	ldr	r3, [pc, #300]	; (8001074 <main+0x26c>)
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4950      	ldr	r1, [pc, #320]	; (800108c <main+0x284>)
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fdbb 	bl	8001ac8 <SSD1306_Puts>
			  SSD1306_GotoXY (0,38);
 8000f52:	2126      	movs	r1, #38	; 0x26
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 fd21 	bl	800199c <SSD1306_GotoXY>
			  SSD1306_Puts (gpsData.lon, &Font_11x18, 1);
 8000f5a:	4b46      	ldr	r3, [pc, #280]	; (8001074 <main+0x26c>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	494a      	ldr	r1, [pc, #296]	; (800108c <main+0x284>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fdb0 	bl	8001ac8 <SSD1306_Puts>
			  SSD1306_GotoXY (110,38);
 8000f68:	2126      	movs	r1, #38	; 0x26
 8000f6a:	206e      	movs	r0, #110	; 0x6e
 8000f6c:	f000 fd16 	bl	800199c <SSD1306_GotoXY>
			  SSD1306_Puts (gpsData.lonDir, &Font_11x18, 1);
 8000f70:	4b40      	ldr	r3, [pc, #256]	; (8001074 <main+0x26c>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	2201      	movs	r2, #1
 8000f76:	4945      	ldr	r1, [pc, #276]	; (800108c <main+0x284>)
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 fda5 	bl	8001ac8 <SSD1306_Puts>
			  SSD1306_UpdateScreen();
 8000f7e:	f000 fc69 	bl	8001854 <SSD1306_UpdateScreen>
 8000f82:	e75d      	b.n	8000e40 <main+0x38>
		  }
		  else if(displayCntr < 20)
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	2b13      	cmp	r3, #19
 8000f88:	f63f af5a 	bhi.w	8000e40 <main+0x38>
		  {
			  if(displayCntr == 15)
 8000f8c:	7dfb      	ldrb	r3, [r7, #23]
 8000f8e:	2b0f      	cmp	r3, #15
 8000f90:	d101      	bne.n	8000f96 <main+0x18e>
				  SSD1306_Clear();
 8000f92:	f000 fdbe 	bl	8001b12 <SSD1306_Clear>
			  displayCntr++;
 8000f96:	7dfb      	ldrb	r3, [r7, #23]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	75fb      	strb	r3, [r7, #23]
			  updateFlag = 0;
 8000f9c:	4b36      	ldr	r3, [pc, #216]	; (8001078 <main+0x270>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
			  SSD1306_GotoXY (0,0);
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 fcf9 	bl	800199c <SSD1306_GotoXY>
			  SSD1306_Puts ("UTC STAT", &Font_11x18, 1);
 8000faa:	2201      	movs	r2, #1
 8000fac:	4937      	ldr	r1, [pc, #220]	; (800108c <main+0x284>)
 8000fae:	4838      	ldr	r0, [pc, #224]	; (8001090 <main+0x288>)
 8000fb0:	f000 fd8a 	bl	8001ac8 <SSD1306_Puts>
			  SSD1306_GotoXY (0,20);
 8000fb4:	2114      	movs	r1, #20
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 fcf0 	bl	800199c <SSD1306_GotoXY>
			  SSD1306_Puts (gpsData.utcTime, &Font_11x18, 1);
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <main+0x26c>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4932      	ldr	r1, [pc, #200]	; (800108c <main+0x284>)
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fd7f 	bl	8001ac8 <SSD1306_Puts>
			  SSD1306_GotoXY (0,40);
 8000fca:	2128      	movs	r1, #40	; 0x28
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f000 fce5 	bl	800199c <SSD1306_GotoXY>
			  SSD1306_Puts (gpsData.utcDate, &Font_11x18, 1);
 8000fd2:	4b28      	ldr	r3, [pc, #160]	; (8001074 <main+0x26c>)
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	492c      	ldr	r1, [pc, #176]	; (800108c <main+0x284>)
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fd74 	bl	8001ac8 <SSD1306_Puts>
			  SSD1306_UpdateScreen();
 8000fe0:	f000 fc38 	bl	8001854 <SSD1306_UpdateScreen>
			  if(displayCntr >= 20)
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
 8000fe6:	2b13      	cmp	r3, #19
 8000fe8:	f67f af2a 	bls.w	8000e40 <main+0x38>
			  {
				  displayCntr = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	75fb      	strb	r3, [r7, #23]
 8000ff0:	e726      	b.n	8000e40 <main+0x38>
			  }
		  }
	  }
	  else if((rxIntCheck == 1) && (seqCheck != 6))
 8000ff2:	4b28      	ldr	r3, [pc, #160]	; (8001094 <main+0x28c>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d10c      	bne.n	8001014 <main+0x20c>
 8000ffa:	4b27      	ldr	r3, [pc, #156]	; (8001098 <main+0x290>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d008      	beq.n	8001014 <main+0x20c>
	  {
		  rxIntCheck = 0;
 8001002:	4b24      	ldr	r3, [pc, #144]	; (8001094 <main+0x28c>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_IT( &huart1, &rxData, 1);
 8001008:	2201      	movs	r2, #1
 800100a:	4924      	ldr	r1, [pc, #144]	; (800109c <main+0x294>)
 800100c:	4824      	ldr	r0, [pc, #144]	; (80010a0 <main+0x298>)
 800100e:	f002 fe30 	bl	8003c72 <HAL_UART_Receive_IT>
 8001012:	e026      	b.n	8001062 <main+0x25a>
	  }
	  else if((rxIntCheck == 1) && (seqCheck == 6))
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <main+0x28c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	f47f af11 	bne.w	8000e40 <main+0x38>
 800101e:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <main+0x290>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b06      	cmp	r3, #6
 8001024:	f47f af0c 	bne.w	8000e40 <main+0x38>
	  {
		  if(rxInProgress == 0)
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <main+0x29c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d10b      	bne.n	8001048 <main+0x240>
		  {
			  rxIntCheck = 75;
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <main+0x28c>)
 8001032:	224b      	movs	r2, #75	; 0x4b
 8001034:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Receive_IT( &huart1, &gpsBuff[6], 74);
 8001036:	224a      	movs	r2, #74	; 0x4a
 8001038:	491b      	ldr	r1, [pc, #108]	; (80010a8 <main+0x2a0>)
 800103a:	4819      	ldr	r0, [pc, #100]	; (80010a0 <main+0x298>)
 800103c:	f002 fe19 	bl	8003c72 <HAL_UART_Receive_IT>
			  rxInProgress = 1;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <main+0x29c>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	e6fb      	b.n	8000e40 <main+0x38>
		  }
		  else
		  {
			  rxInProgress = 0;
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <main+0x29c>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
			  seqCheck = 0;
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <main+0x290>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
			  nmea_parse(&gpsData, gpsBuff);
 8001054:	4915      	ldr	r1, [pc, #84]	; (80010ac <main+0x2a4>)
 8001056:	4807      	ldr	r0, [pc, #28]	; (8001074 <main+0x26c>)
 8001058:	f000 f96a 	bl	8001330 <nmea_parse>
			  updateFlag = 1;  //Update Screen
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <main+0x270>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
	  if(updateFlag != 0)
 8001062:	e6ed      	b.n	8000e40 <main+0x38>
 8001064:	f3af 8000 	nop.w
 8001068:	cccccccd 	.word	0xcccccccd
 800106c:	400ccccc 	.word	0x400ccccc
 8001070:	08008954 	.word	0x08008954
 8001074:	20000408 	.word	0x20000408
 8001078:	20000430 	.word	0x20000430
 800107c:	20000434 	.word	0x20000434
 8001080:	408f4000 	.word	0x408f4000
 8001084:	08008940 	.word	0x08008940
 8001088:	20000008 	.word	0x20000008
 800108c:	20000000 	.word	0x20000000
 8001090:	08008948 	.word	0x08008948
 8001094:	20000010 	.word	0x20000010
 8001098:	20000431 	.word	0x20000431
 800109c:	20000433 	.word	0x20000433
 80010a0:	20000264 	.word	0x20000264
 80010a4:	20000432 	.word	0x20000432
 80010a8:	200002ae 	.word	0x200002ae
 80010ac:	200002a8 	.word	0x200002a8

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b090      	sub	sp, #64	; 0x40
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	2228      	movs	r2, #40	; 0x28
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f003 fa22 	bl	8004508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e4:	2302      	movs	r3, #2
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80010ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	4618      	mov	r0, r3
 80010fa:	f002 f953 	bl	80033a4 <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001104:	f000 f8c8 	bl	8001298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001108:	230f      	movs	r3, #15
 800110a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110c:	2302      	movs	r3, #2
 800110e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2101      	movs	r1, #1
 8001120:	4618      	mov	r0, r3
 8001122:	f002 fbc1 	bl	80038a8 <HAL_RCC_ClockConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800112c:	f000 f8b4 	bl	8001298 <Error_Handler>
  }
}
 8001130:	bf00      	nop
 8001132:	3740      	adds	r7, #64	; 0x40
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_I2C1_Init+0x50>)
 800113e:	4a13      	ldr	r2, [pc, #76]	; (800118c <MX_I2C1_Init+0x54>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_I2C1_Init+0x50>)
 8001144:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_I2C1_Init+0x58>)
 8001146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_I2C1_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_I2C1_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_I2C1_Init+0x50>)
 8001156:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800115a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <MX_I2C1_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_I2C1_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <MX_I2C1_Init+0x50>)
 8001176:	f001 fb9d 	bl	80028b4 <HAL_I2C_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001180:	f000 f88a 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000210 	.word	0x20000210
 800118c:	40005400 	.word	0x40005400
 8001190:	00061a80 	.word	0x00061a80

08001194 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <MX_USART1_UART_Init+0x50>)
 800119c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011ba:	2204      	movs	r2, #4
 80011bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011cc:	f002 fd04 	bl	8003bd8 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011d6:	f000 f85f 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000264 	.word	0x20000264
 80011e4:	40013800 	.word	0x40013800

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fc:	4b24      	ldr	r3, [pc, #144]	; (8001290 <MX_GPIO_Init+0xa8>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a23      	ldr	r2, [pc, #140]	; (8001290 <MX_GPIO_Init+0xa8>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <MX_GPIO_Init+0xa8>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <MX_GPIO_Init+0xa8>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a1d      	ldr	r2, [pc, #116]	; (8001290 <MX_GPIO_Init+0xa8>)
 800121a:	f043 0320 	orr.w	r3, r3, #32
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <MX_GPIO_Init+0xa8>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_GPIO_Init+0xa8>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a17      	ldr	r2, [pc, #92]	; (8001290 <MX_GPIO_Init+0xa8>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_GPIO_Init+0xa8>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MX_GPIO_Init+0xa8>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a11      	ldr	r2, [pc, #68]	; (8001290 <MX_GPIO_Init+0xa8>)
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_GPIO_Init+0xa8>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001262:	480c      	ldr	r0, [pc, #48]	; (8001294 <MX_GPIO_Init+0xac>)
 8001264:	f001 fb0e 	bl	8002884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800126c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	2301      	movs	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2302      	movs	r3, #2
 8001278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	4619      	mov	r1, r3
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_GPIO_Init+0xac>)
 8001282:	f001 f97b 	bl	800257c <HAL_GPIO_Init>

}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000
 8001294:	40011000 	.word	0x40011000

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <Error_Handler+0x8>

080012a2 <nmea_mem_init>:
#include <stdio.h>

extern uint32_t newSpeed;

void nmea_mem_init(GPS *gps_data)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
	gps_data->headType = malloc(10);
 80012aa:	200a      	movs	r0, #10
 80012ac:	f003 f924 	bl	80044f8 <malloc>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	601a      	str	r2, [r3, #0]
	gps_data->utcTime = malloc(12);
 80012b8:	200c      	movs	r0, #12
 80012ba:	f003 f91d 	bl	80044f8 <malloc>
 80012be:	4603      	mov	r3, r0
 80012c0:	461a      	mov	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	605a      	str	r2, [r3, #4]
	gps_data->validStatus = malloc(10);
 80012c6:	200a      	movs	r0, #10
 80012c8:	f003 f916 	bl	80044f8 <malloc>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	609a      	str	r2, [r3, #8]
	gps_data->lat = malloc(10);
 80012d4:	200a      	movs	r0, #10
 80012d6:	f003 f90f 	bl	80044f8 <malloc>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	60da      	str	r2, [r3, #12]
	gps_data->latDir = malloc(2);
 80012e2:	2002      	movs	r0, #2
 80012e4:	f003 f908 	bl	80044f8 <malloc>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	611a      	str	r2, [r3, #16]
	gps_data->lon = malloc(12);
 80012f0:	200c      	movs	r0, #12
 80012f2:	f003 f901 	bl	80044f8 <malloc>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	615a      	str	r2, [r3, #20]
	gps_data->lonDir = malloc(2);
 80012fe:	2002      	movs	r0, #2
 8001300:	f003 f8fa 	bl	80044f8 <malloc>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	619a      	str	r2, [r3, #24]
	gps_data->speed = malloc(10);
 800130c:	200a      	movs	r0, #10
 800130e:	f003 f8f3 	bl	80044f8 <malloc>
 8001312:	4603      	mov	r3, r0
 8001314:	461a      	mov	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	61da      	str	r2, [r3, #28]
	gps_data->utcDate = malloc(10);
 800131a:	200a      	movs	r0, #10
 800131c:	f003 f8ec 	bl	80044f8 <malloc>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <nmea_parse>:

void nmea_parse(GPS *gps_data, char *buffer)
{
 8001330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001332:	b091      	sub	sp, #68	; 0x44
 8001334:	af04      	add	r7, sp, #16
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
	char *paramVal;
	int i=0;
 800133a:	2300      	movs	r3, #0
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
	double speedkm, course;
	char *tmp;
	uint8_t breakCheck=0;
 800133e:	2300      	movs	r3, #0
 8001340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	paramVal = strtok(buffer, ",");
 8001344:	49a2      	ldr	r1, [pc, #648]	; (80015d0 <nmea_parse+0x2a0>)
 8001346:	6838      	ldr	r0, [r7, #0]
 8001348:	f004 fc72 	bl	8005c30 <strtok>
 800134c:	62f8      	str	r0, [r7, #44]	; 0x2c
	while( paramVal != NULL)
 800134e:	e1ac      	b.n	80016aa <nmea_parse+0x37a>
	{
		switch(i)
 8001350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001352:	2b09      	cmp	r3, #9
 8001354:	f200 819c 	bhi.w	8001690 <nmea_parse+0x360>
 8001358:	a201      	add	r2, pc, #4	; (adr r2, 8001360 <nmea_parse+0x30>)
 800135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135e:	bf00      	nop
 8001360:	08001389 	.word	0x08001389
 8001364:	0800139d 	.word	0x0800139d
 8001368:	08001477 	.word	0x08001477
 800136c:	08001519 	.word	0x08001519
 8001370:	0800152d 	.word	0x0800152d
 8001374:	08001541 	.word	0x08001541
 8001378:	08001555 	.word	0x08001555
 800137c:	08001569 	.word	0x08001569
 8001380:	08001609 	.word	0x08001609
 8001384:	08001647 	.word	0x08001647
		{
			case MSGHEAD:
				strcpy(gps_data->headType, paramVal);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800138e:	4618      	mov	r0, r3
 8001390:	f003 fe2e 	bl	8004ff0 <strcpy>
				i++;
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	3301      	adds	r3, #1
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 800139a:	e17d      	b.n	8001698 <nmea_parse+0x368>

			case UTC_TIME:
				sprintf(gps_data->utcTime, "%c%c:%c%c:%c%c", paramVal[0], paramVal[1], paramVal[2], paramVal[3], paramVal[4], paramVal[5]);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6858      	ldr	r0, [r3, #4]
 80013a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461d      	mov	r5, r3
 80013a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a8:	3301      	adds	r3, #1
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461e      	mov	r6, r3
 80013ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b0:	3302      	adds	r3, #2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b8:	3303      	adds	r3, #3
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c0:	3304      	adds	r3, #4
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461c      	mov	r4, r3
 80013c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c8:	3305      	adds	r3, #5
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	9303      	str	r3, [sp, #12]
 80013ce:	9402      	str	r4, [sp, #8]
 80013d0:	9101      	str	r1, [sp, #4]
 80013d2:	9200      	str	r2, [sp, #0]
 80013d4:	4633      	mov	r3, r6
 80013d6:	462a      	mov	r2, r5
 80013d8:	497e      	ldr	r1, [pc, #504]	; (80015d4 <nmea_parse+0x2a4>)
 80013da:	f003 fde9 	bl	8004fb0 <siprintf>
				//strcpy(gps_data->utcTime, paramVal);
				if(strcmp(paramVal, "V") == 0)
 80013de:	497e      	ldr	r1, [pc, #504]	; (80015d8 <nmea_parse+0x2a8>)
 80013e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013e2:	f7fe feb5 	bl	8000150 <strcmp>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d140      	bne.n	800146e <nmea_parse+0x13e>
				{
					newSpeed = 0;
 80013ec:	4b7b      	ldr	r3, [pc, #492]	; (80015dc <nmea_parse+0x2ac>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
					paramVal = "000000";
 80013f2:	4b7b      	ldr	r3, [pc, #492]	; (80015e0 <nmea_parse+0x2b0>)
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
					sprintf(gps_data->utcTime, "%.6s", paramVal);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013fc:	4979      	ldr	r1, [pc, #484]	; (80015e4 <nmea_parse+0x2b4>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 fdd6 	bl	8004fb0 <siprintf>
					paramVal = "INVALID";
 8001404:	4b78      	ldr	r3, [pc, #480]	; (80015e8 <nmea_parse+0x2b8>)
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
					strcpy(gps_data->lat, paramVal);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800140e:	4618      	mov	r0, r3
 8001410:	f003 fdee 	bl	8004ff0 <strcpy>
					strcpy(gps_data->lon, paramVal);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800141a:	4618      	mov	r0, r3
 800141c:	f003 fde8 	bl	8004ff0 <strcpy>
					paramVal = "!";
 8001420:	4b72      	ldr	r3, [pc, #456]	; (80015ec <nmea_parse+0x2bc>)
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
					strcpy(gps_data->latDir, paramVal);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800142a:	4618      	mov	r0, r3
 800142c:	f003 fde0 	bl	8004ff0 <strcpy>
					strcpy(gps_data->lonDir, paramVal);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001436:	4618      	mov	r0, r3
 8001438:	f003 fdda 	bl	8004ff0 <strcpy>
					sprintf(gps_data->validStatus, "NO LOCK");
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	496b      	ldr	r1, [pc, #428]	; (80015f0 <nmea_parse+0x2c0>)
 8001442:	4618      	mov	r0, r3
 8001444:	f003 fdb4 	bl	8004fb0 <siprintf>
					paramVal = "000";
 8001448:	4b6a      	ldr	r3, [pc, #424]	; (80015f4 <nmea_parse+0x2c4>)
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
					strcpy(gps_data->speed, paramVal);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001452:	4618      	mov	r0, r3
 8001454:	f003 fdcc 	bl	8004ff0 <strcpy>
					paramVal = "XXXXXX";
 8001458:	4b67      	ldr	r3, [pc, #412]	; (80015f8 <nmea_parse+0x2c8>)
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
					strcpy(gps_data->utcDate, paramVal);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001462:	4618      	mov	r0, r3
 8001464:	f003 fdc4 	bl	8004ff0 <strcpy>

					breakCheck = 1;
 8001468:	2301      	movs	r3, #1
 800146a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				i++;
 800146e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001470:	3301      	adds	r3, #1
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8001474:	e110      	b.n	8001698 <nmea_parse+0x368>

			case VALIDSTATUS:
				if(strcmp(paramVal, "A") == 0)
 8001476:	4961      	ldr	r1, [pc, #388]	; (80015fc <nmea_parse+0x2cc>)
 8001478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800147a:	f7fe fe69 	bl	8000150 <strcmp>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d106      	bne.n	8001492 <nmea_parse+0x162>
					sprintf(gps_data->validStatus, " LOCKED");
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	495d      	ldr	r1, [pc, #372]	; (8001600 <nmea_parse+0x2d0>)
 800148a:	4618      	mov	r0, r3
 800148c:	f003 fd90 	bl	8004fb0 <siprintf>
 8001490:	e03e      	b.n	8001510 <nmea_parse+0x1e0>
				else if(strcmp(paramVal, "V") == 0)
 8001492:	4951      	ldr	r1, [pc, #324]	; (80015d8 <nmea_parse+0x2a8>)
 8001494:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001496:	f7fe fe5b 	bl	8000150 <strcmp>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d137      	bne.n	8001510 <nmea_parse+0x1e0>
				{
					newSpeed = 0;
 80014a0:	4b4e      	ldr	r3, [pc, #312]	; (80015dc <nmea_parse+0x2ac>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
					paramVal = "INVALID";
 80014a6:	4b50      	ldr	r3, [pc, #320]	; (80015e8 <nmea_parse+0x2b8>)
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
					strcpy(gps_data->lat, paramVal);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014b0:	4618      	mov	r0, r3
 80014b2:	f003 fd9d 	bl	8004ff0 <strcpy>
					strcpy(gps_data->lon, paramVal);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 fd97 	bl	8004ff0 <strcpy>
					paramVal = "!";
 80014c2:	4b4a      	ldr	r3, [pc, #296]	; (80015ec <nmea_parse+0x2bc>)
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
					strcpy(gps_data->latDir, paramVal);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014cc:	4618      	mov	r0, r3
 80014ce:	f003 fd8f 	bl	8004ff0 <strcpy>
					strcpy(gps_data->lonDir, paramVal);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 fd89 	bl	8004ff0 <strcpy>
					sprintf(gps_data->validStatus, "NO LOCK");
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	4943      	ldr	r1, [pc, #268]	; (80015f0 <nmea_parse+0x2c0>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f003 fd63 	bl	8004fb0 <siprintf>
					paramVal = "000";
 80014ea:	4b42      	ldr	r3, [pc, #264]	; (80015f4 <nmea_parse+0x2c4>)
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					strcpy(gps_data->speed, paramVal);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014f4:	4618      	mov	r0, r3
 80014f6:	f003 fd7b 	bl	8004ff0 <strcpy>
					paramVal = "XXXXXX";
 80014fa:	4b3f      	ldr	r3, [pc, #252]	; (80015f8 <nmea_parse+0x2c8>)
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					strcpy(gps_data->utcDate, paramVal);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001504:	4618      	mov	r0, r3
 8001506:	f003 fd73 	bl	8004ff0 <strcpy>

					breakCheck = 1;
 800150a:	2301      	movs	r3, #1
 800150c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				i++;
 8001510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001512:	3301      	adds	r3, #1
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8001516:	e0bf      	b.n	8001698 <nmea_parse+0x368>

			case LAT:
				strcpy(gps_data->lat, paramVal);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800151e:	4618      	mov	r0, r3
 8001520:	f003 fd66 	bl	8004ff0 <strcpy>
				i++;
 8001524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001526:	3301      	adds	r3, #1
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 800152a:	e0b5      	b.n	8001698 <nmea_parse+0x368>

			case LATDIR:
				strcpy(gps_data->latDir, paramVal);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001532:	4618      	mov	r0, r3
 8001534:	f003 fd5c 	bl	8004ff0 <strcpy>
				i++;
 8001538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153a:	3301      	adds	r3, #1
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 800153e:	e0ab      	b.n	8001698 <nmea_parse+0x368>

			case LONG:
				strcpy(gps_data->lon, paramVal);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001546:	4618      	mov	r0, r3
 8001548:	f003 fd52 	bl	8004ff0 <strcpy>
				i++;
 800154c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154e:	3301      	adds	r3, #1
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8001552:	e0a1      	b.n	8001698 <nmea_parse+0x368>

			case LONGDIR:
				strcpy(gps_data->lonDir, paramVal);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800155a:	4618      	mov	r0, r3
 800155c:	f003 fd48 	bl	8004ff0 <strcpy>
				i++;
 8001560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001562:	3301      	adds	r3, #1
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8001566:	e097      	b.n	8001698 <nmea_parse+0x368>

			case SPEED:
				speedkm = strtod(paramVal, &tmp);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001570:	f004 fb52 	bl	8005c18 <strtod>
 8001574:	e9c7 0104 	strd	r0, r1, [r7, #16]
				speedkm = (double)speedkm * 1.852;
 8001578:	a313      	add	r3, pc, #76	; (adr r3, 80015c8 <nmea_parse+0x298>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001582:	f7fe ffb3 	bl	80004ec <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	e9c7 2304 	strd	r2, r3, [r7, #16]
				newSpeed = speedkm;
 800158e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001592:	f7ff fa83 	bl	8000a9c <__aeabi_d2uiz>
 8001596:	4603      	mov	r3, r0
 8001598:	4a10      	ldr	r2, [pc, #64]	; (80015dc <nmea_parse+0x2ac>)
 800159a:	6013      	str	r3, [r2, #0]
				sprintf(paramVal, "%03d", (int)speedkm);
 800159c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015a0:	f7ff fa54 	bl	8000a4c <__aeabi_d2iz>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4916      	ldr	r1, [pc, #88]	; (8001604 <nmea_parse+0x2d4>)
 80015aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015ac:	f003 fd00 	bl	8004fb0 <siprintf>
				strcpy(gps_data->speed, paramVal);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 fd1a 	bl	8004ff0 <strcpy>
				i++;
 80015bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015be:	3301      	adds	r3, #1
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 80015c2:	e069      	b.n	8001698 <nmea_parse+0x368>
 80015c4:	f3af 8000 	nop.w
 80015c8:	c083126f 	.word	0xc083126f
 80015cc:	3ffda1ca 	.word	0x3ffda1ca
 80015d0:	08008960 	.word	0x08008960
 80015d4:	08008964 	.word	0x08008964
 80015d8:	08008974 	.word	0x08008974
 80015dc:	20000434 	.word	0x20000434
 80015e0:	08008978 	.word	0x08008978
 80015e4:	08008980 	.word	0x08008980
 80015e8:	08008988 	.word	0x08008988
 80015ec:	08008990 	.word	0x08008990
 80015f0:	08008994 	.word	0x08008994
 80015f4:	0800899c 	.word	0x0800899c
 80015f8:	080089a0 	.word	0x080089a0
 80015fc:	080089a8 	.word	0x080089a8
 8001600:	080089ac 	.word	0x080089ac
 8001604:	080089b4 	.word	0x080089b4

			case COURSE:
				course = strtod(paramVal, &tmp);
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	4619      	mov	r1, r3
 800160e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001610:	f004 fb02 	bl	8005c18 <strtod>
 8001614:	e9c7 0106 	strd	r0, r1, [r7, #24]
				if(course >= 010100)
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <nmea_parse+0x390>)
 800161e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001622:	f7ff f9e9 	bl	80009f8 <__aeabi_dcmpge>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d008      	beq.n	800163e <nmea_parse+0x30e>
				{
					strcpy(gps_data->utcDate, paramVal);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001632:	4618      	mov	r0, r3
 8001634:	f003 fcdc 	bl	8004ff0 <strcpy>
					breakCheck = 1;
 8001638:	2301      	movs	r3, #1
 800163a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				i++;
 800163e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001640:	3301      	adds	r3, #1
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8001644:	e028      	b.n	8001698 <nmea_parse+0x368>

			case DATE:
				sprintf(gps_data->utcDate, "%c%c-%c%c-%c%c", paramVal[0], paramVal[1], paramVal[2], paramVal[3], paramVal[4], paramVal[5]);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800164a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461d      	mov	r5, r3
 8001650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001652:	3301      	adds	r3, #1
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461e      	mov	r6, r3
 8001658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165a:	3302      	adds	r3, #2
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001662:	3303      	adds	r3, #3
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	4619      	mov	r1, r3
 8001668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166a:	3304      	adds	r3, #4
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461c      	mov	r4, r3
 8001670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001672:	3305      	adds	r3, #5
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	9303      	str	r3, [sp, #12]
 8001678:	9402      	str	r4, [sp, #8]
 800167a:	9101      	str	r1, [sp, #4]
 800167c:	9200      	str	r2, [sp, #0]
 800167e:	4633      	mov	r3, r6
 8001680:	462a      	mov	r2, r5
 8001682:	4910      	ldr	r1, [pc, #64]	; (80016c4 <nmea_parse+0x394>)
 8001684:	f003 fc94 	bl	8004fb0 <siprintf>
				//strcpy(gps_data->utcDate, paramVal);
				i++;
 8001688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168a:	3301      	adds	r3, #1
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 800168e:	e003      	b.n	8001698 <nmea_parse+0x368>

			default:
				i++;
 8001690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001692:	3301      	adds	r3, #1
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8001696:	bf00      	nop

		}
		paramVal = strtok(NULL, ",");
 8001698:	490b      	ldr	r1, [pc, #44]	; (80016c8 <nmea_parse+0x398>)
 800169a:	2000      	movs	r0, #0
 800169c:	f004 fac8 	bl	8005c30 <strtok>
 80016a0:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(breakCheck == 1)
 80016a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d004      	beq.n	80016b4 <nmea_parse+0x384>
	while( paramVal != NULL)
 80016aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f47f ae4f 	bne.w	8001350 <nmea_parse+0x20>
			break;
	}
}
 80016b2:	e000      	b.n	80016b6 <nmea_parse+0x386>
			break;
 80016b4:	bf00      	nop
}
 80016b6:	bf00      	nop
 80016b8:	3734      	adds	r7, #52	; 0x34
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016be:	bf00      	nop
 80016c0:	40b04000 	.word	0x40b04000
 80016c4:	080089bc 	.word	0x080089bc
 80016c8:	08008960 	.word	0x08008960

080016cc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80016d2:	f000 fa27 	bl	8001b24 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80016d6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80016da:	2201      	movs	r2, #1
 80016dc:	2178      	movs	r1, #120	; 0x78
 80016de:	485b      	ldr	r0, [pc, #364]	; (800184c <SSD1306_Init+0x180>)
 80016e0:	f001 fb2a 	bl	8002d38 <HAL_I2C_IsDeviceReady>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e0a9      	b.n	8001842 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80016ee:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80016f2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016f4:	e002      	b.n	80016fc <SSD1306_Init+0x30>
		p--;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f9      	bne.n	80016f6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001702:	22ae      	movs	r2, #174	; 0xae
 8001704:	2100      	movs	r1, #0
 8001706:	2078      	movs	r0, #120	; 0x78
 8001708:	f000 fa86 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800170c:	2220      	movs	r2, #32
 800170e:	2100      	movs	r1, #0
 8001710:	2078      	movs	r0, #120	; 0x78
 8001712:	f000 fa81 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001716:	2210      	movs	r2, #16
 8001718:	2100      	movs	r1, #0
 800171a:	2078      	movs	r0, #120	; 0x78
 800171c:	f000 fa7c 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001720:	22b0      	movs	r2, #176	; 0xb0
 8001722:	2100      	movs	r1, #0
 8001724:	2078      	movs	r0, #120	; 0x78
 8001726:	f000 fa77 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800172a:	22c8      	movs	r2, #200	; 0xc8
 800172c:	2100      	movs	r1, #0
 800172e:	2078      	movs	r0, #120	; 0x78
 8001730:	f000 fa72 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	2078      	movs	r0, #120	; 0x78
 800173a:	f000 fa6d 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800173e:	2210      	movs	r2, #16
 8001740:	2100      	movs	r1, #0
 8001742:	2078      	movs	r0, #120	; 0x78
 8001744:	f000 fa68 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001748:	2240      	movs	r2, #64	; 0x40
 800174a:	2100      	movs	r1, #0
 800174c:	2078      	movs	r0, #120	; 0x78
 800174e:	f000 fa63 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001752:	2281      	movs	r2, #129	; 0x81
 8001754:	2100      	movs	r1, #0
 8001756:	2078      	movs	r0, #120	; 0x78
 8001758:	f000 fa5e 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800175c:	22ff      	movs	r2, #255	; 0xff
 800175e:	2100      	movs	r1, #0
 8001760:	2078      	movs	r0, #120	; 0x78
 8001762:	f000 fa59 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001766:	22a1      	movs	r2, #161	; 0xa1
 8001768:	2100      	movs	r1, #0
 800176a:	2078      	movs	r0, #120	; 0x78
 800176c:	f000 fa54 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001770:	22a6      	movs	r2, #166	; 0xa6
 8001772:	2100      	movs	r1, #0
 8001774:	2078      	movs	r0, #120	; 0x78
 8001776:	f000 fa4f 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800177a:	22a8      	movs	r2, #168	; 0xa8
 800177c:	2100      	movs	r1, #0
 800177e:	2078      	movs	r0, #120	; 0x78
 8001780:	f000 fa4a 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001784:	223f      	movs	r2, #63	; 0x3f
 8001786:	2100      	movs	r1, #0
 8001788:	2078      	movs	r0, #120	; 0x78
 800178a:	f000 fa45 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800178e:	22a4      	movs	r2, #164	; 0xa4
 8001790:	2100      	movs	r1, #0
 8001792:	2078      	movs	r0, #120	; 0x78
 8001794:	f000 fa40 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001798:	22d3      	movs	r2, #211	; 0xd3
 800179a:	2100      	movs	r1, #0
 800179c:	2078      	movs	r0, #120	; 0x78
 800179e:	f000 fa3b 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	2078      	movs	r0, #120	; 0x78
 80017a8:	f000 fa36 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80017ac:	22d5      	movs	r2, #213	; 0xd5
 80017ae:	2100      	movs	r1, #0
 80017b0:	2078      	movs	r0, #120	; 0x78
 80017b2:	f000 fa31 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80017b6:	22f0      	movs	r2, #240	; 0xf0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2078      	movs	r0, #120	; 0x78
 80017bc:	f000 fa2c 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80017c0:	22d9      	movs	r2, #217	; 0xd9
 80017c2:	2100      	movs	r1, #0
 80017c4:	2078      	movs	r0, #120	; 0x78
 80017c6:	f000 fa27 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80017ca:	2222      	movs	r2, #34	; 0x22
 80017cc:	2100      	movs	r1, #0
 80017ce:	2078      	movs	r0, #120	; 0x78
 80017d0:	f000 fa22 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80017d4:	22da      	movs	r2, #218	; 0xda
 80017d6:	2100      	movs	r1, #0
 80017d8:	2078      	movs	r0, #120	; 0x78
 80017da:	f000 fa1d 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80017de:	2212      	movs	r2, #18
 80017e0:	2100      	movs	r1, #0
 80017e2:	2078      	movs	r0, #120	; 0x78
 80017e4:	f000 fa18 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80017e8:	22db      	movs	r2, #219	; 0xdb
 80017ea:	2100      	movs	r1, #0
 80017ec:	2078      	movs	r0, #120	; 0x78
 80017ee:	f000 fa13 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80017f2:	2220      	movs	r2, #32
 80017f4:	2100      	movs	r1, #0
 80017f6:	2078      	movs	r0, #120	; 0x78
 80017f8:	f000 fa0e 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80017fc:	228d      	movs	r2, #141	; 0x8d
 80017fe:	2100      	movs	r1, #0
 8001800:	2078      	movs	r0, #120	; 0x78
 8001802:	f000 fa09 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001806:	2214      	movs	r2, #20
 8001808:	2100      	movs	r1, #0
 800180a:	2078      	movs	r0, #120	; 0x78
 800180c:	f000 fa04 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001810:	22af      	movs	r2, #175	; 0xaf
 8001812:	2100      	movs	r1, #0
 8001814:	2078      	movs	r0, #120	; 0x78
 8001816:	f000 f9ff 	bl	8001c18 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800181a:	222e      	movs	r2, #46	; 0x2e
 800181c:	2100      	movs	r1, #0
 800181e:	2078      	movs	r0, #120	; 0x78
 8001820:	f000 f9fa 	bl	8001c18 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001824:	2000      	movs	r0, #0
 8001826:	f000 f843 	bl	80018b0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800182a:	f000 f813 	bl	8001854 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <SSD1306_Init+0x184>)
 8001830:	2200      	movs	r2, #0
 8001832:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <SSD1306_Init+0x184>)
 8001836:	2200      	movs	r2, #0
 8001838:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <SSD1306_Init+0x184>)
 800183c:	2201      	movs	r2, #1
 800183e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001840:	2301      	movs	r3, #1
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000210 	.word	0x20000210
 8001850:	20000838 	.word	0x20000838

08001854 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800185a:	2300      	movs	r3, #0
 800185c:	71fb      	strb	r3, [r7, #7]
 800185e:	e01d      	b.n	800189c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	3b50      	subs	r3, #80	; 0x50
 8001864:	b2db      	uxtb	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	2100      	movs	r1, #0
 800186a:	2078      	movs	r0, #120	; 0x78
 800186c:	f000 f9d4 	bl	8001c18 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	2078      	movs	r0, #120	; 0x78
 8001876:	f000 f9cf 	bl	8001c18 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800187a:	2210      	movs	r2, #16
 800187c:	2100      	movs	r1, #0
 800187e:	2078      	movs	r0, #120	; 0x78
 8001880:	f000 f9ca 	bl	8001c18 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	01db      	lsls	r3, r3, #7
 8001888:	4a08      	ldr	r2, [pc, #32]	; (80018ac <SSD1306_UpdateScreen+0x58>)
 800188a:	441a      	add	r2, r3
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	2140      	movs	r1, #64	; 0x40
 8001890:	2078      	movs	r0, #120	; 0x78
 8001892:	f000 f95b 	bl	8001b4c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	3301      	adds	r3, #1
 800189a:	71fb      	strb	r3, [r7, #7]
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2b07      	cmp	r3, #7
 80018a0:	d9de      	bls.n	8001860 <SSD1306_UpdateScreen+0xc>
	}
}
 80018a2:	bf00      	nop
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000438 	.word	0x20000438

080018b0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <SSD1306_Fill+0x14>
 80018c0:	2300      	movs	r3, #0
 80018c2:	e000      	b.n	80018c6 <SSD1306_Fill+0x16>
 80018c4:	23ff      	movs	r3, #255	; 0xff
 80018c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ca:	4619      	mov	r1, r3
 80018cc:	4803      	ldr	r0, [pc, #12]	; (80018dc <SSD1306_Fill+0x2c>)
 80018ce:	f002 fe1b 	bl	8004508 <memset>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000438 	.word	0x20000438

080018e0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
 80018ea:	460b      	mov	r3, r1
 80018ec:	80bb      	strh	r3, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	70fb      	strb	r3, [r7, #3]
	if (
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	2b7f      	cmp	r3, #127	; 0x7f
 80018f6:	d848      	bhi.n	800198a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80018f8:	88bb      	ldrh	r3, [r7, #4]
 80018fa:	2b3f      	cmp	r3, #63	; 0x3f
 80018fc:	d845      	bhi.n	800198a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80018fe:	4b25      	ldr	r3, [pc, #148]	; (8001994 <SSD1306_DrawPixel+0xb4>)
 8001900:	791b      	ldrb	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	2b00      	cmp	r3, #0
 800190a:	bf0c      	ite	eq
 800190c:	2301      	moveq	r3, #1
 800190e:	2300      	movne	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d11a      	bne.n	8001950 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800191a:	88fa      	ldrh	r2, [r7, #6]
 800191c:	88bb      	ldrh	r3, [r7, #4]
 800191e:	08db      	lsrs	r3, r3, #3
 8001920:	b298      	uxth	r0, r3
 8001922:	4603      	mov	r3, r0
 8001924:	01db      	lsls	r3, r3, #7
 8001926:	4413      	add	r3, r2
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <SSD1306_DrawPixel+0xb8>)
 800192a:	5cd3      	ldrb	r3, [r2, r3]
 800192c:	b25a      	sxtb	r2, r3
 800192e:	88bb      	ldrh	r3, [r7, #4]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	2101      	movs	r1, #1
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	b25b      	sxtb	r3, r3
 800193c:	4313      	orrs	r3, r2
 800193e:	b259      	sxtb	r1, r3
 8001940:	88fa      	ldrh	r2, [r7, #6]
 8001942:	4603      	mov	r3, r0
 8001944:	01db      	lsls	r3, r3, #7
 8001946:	4413      	add	r3, r2
 8001948:	b2c9      	uxtb	r1, r1
 800194a:	4a13      	ldr	r2, [pc, #76]	; (8001998 <SSD1306_DrawPixel+0xb8>)
 800194c:	54d1      	strb	r1, [r2, r3]
 800194e:	e01d      	b.n	800198c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001950:	88fa      	ldrh	r2, [r7, #6]
 8001952:	88bb      	ldrh	r3, [r7, #4]
 8001954:	08db      	lsrs	r3, r3, #3
 8001956:	b298      	uxth	r0, r3
 8001958:	4603      	mov	r3, r0
 800195a:	01db      	lsls	r3, r3, #7
 800195c:	4413      	add	r3, r2
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <SSD1306_DrawPixel+0xb8>)
 8001960:	5cd3      	ldrb	r3, [r2, r3]
 8001962:	b25a      	sxtb	r2, r3
 8001964:	88bb      	ldrh	r3, [r7, #4]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	2101      	movs	r1, #1
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	b25b      	sxtb	r3, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	b25b      	sxtb	r3, r3
 8001976:	4013      	ands	r3, r2
 8001978:	b259      	sxtb	r1, r3
 800197a:	88fa      	ldrh	r2, [r7, #6]
 800197c:	4603      	mov	r3, r0
 800197e:	01db      	lsls	r3, r3, #7
 8001980:	4413      	add	r3, r2
 8001982:	b2c9      	uxtb	r1, r1
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <SSD1306_DrawPixel+0xb8>)
 8001986:	54d1      	strb	r1, [r2, r3]
 8001988:	e000      	b.n	800198c <SSD1306_DrawPixel+0xac>
		return;
 800198a:	bf00      	nop
	}
}
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000838 	.word	0x20000838
 8001998:	20000438 	.word	0x20000438

0800199c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	460a      	mov	r2, r1
 80019a6:	80fb      	strh	r3, [r7, #6]
 80019a8:	4613      	mov	r3, r2
 80019aa:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80019ac:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <SSD1306_GotoXY+0x28>)
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80019b2:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <SSD1306_GotoXY+0x28>)
 80019b4:	88bb      	ldrh	r3, [r7, #4]
 80019b6:	8053      	strh	r3, [r2, #2]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000838 	.word	0x20000838

080019c8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
 80019d4:	4613      	mov	r3, r2
 80019d6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80019d8:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <SSD1306_Putc+0xfc>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	4413      	add	r3, r2
	if (
 80019e4:	2b7f      	cmp	r3, #127	; 0x7f
 80019e6:	dc07      	bgt.n	80019f8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80019e8:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <SSD1306_Putc+0xfc>)
 80019ea:	885b      	ldrh	r3, [r3, #2]
 80019ec:	461a      	mov	r2, r3
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	785b      	ldrb	r3, [r3, #1]
 80019f2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80019f4:	2b3f      	cmp	r3, #63	; 0x3f
 80019f6:	dd01      	ble.n	80019fc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	e05e      	b.n	8001aba <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	e04b      	b.n	8001a9a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	3b20      	subs	r3, #32
 8001a0a:	6839      	ldr	r1, [r7, #0]
 8001a0c:	7849      	ldrb	r1, [r1, #1]
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4619      	mov	r1, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	440b      	add	r3, r1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	e030      	b.n	8001a88 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d010      	beq.n	8001a58 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001a36:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <SSD1306_Putc+0xfc>)
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	4413      	add	r3, r2
 8001a40:	b298      	uxth	r0, r3
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <SSD1306_Putc+0xfc>)
 8001a44:	885a      	ldrh	r2, [r3, #2]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	79ba      	ldrb	r2, [r7, #6]
 8001a50:	4619      	mov	r1, r3
 8001a52:	f7ff ff45 	bl	80018e0 <SSD1306_DrawPixel>
 8001a56:	e014      	b.n	8001a82 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001a58:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <SSD1306_Putc+0xfc>)
 8001a5a:	881a      	ldrh	r2, [r3, #0]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	4413      	add	r3, r2
 8001a62:	b298      	uxth	r0, r3
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <SSD1306_Putc+0xfc>)
 8001a66:	885a      	ldrh	r2, [r3, #2]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b299      	uxth	r1, r3
 8001a70:	79bb      	ldrb	r3, [r7, #6]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	bf0c      	ite	eq
 8001a76:	2301      	moveq	r3, #1
 8001a78:	2300      	movne	r3, #0
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	f7ff ff2f 	bl	80018e0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	3301      	adds	r3, #1
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d3c8      	bcc.n	8001a26 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	785b      	ldrb	r3, [r3, #1]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d3ad      	bcc.n	8001a02 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <SSD1306_Putc+0xfc>)
 8001aa8:	881a      	ldrh	r2, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <SSD1306_Putc+0xfc>)
 8001ab6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000838 	.word	0x20000838

08001ac8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001ad6:	e012      	b.n	8001afe <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	79fa      	ldrb	r2, [r7, #7]
 8001ade:	68b9      	ldr	r1, [r7, #8]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff71 	bl	80019c8 <SSD1306_Putc>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d002      	beq.n	8001af8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	e008      	b.n	8001b0a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3301      	adds	r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1e8      	bne.n	8001ad8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	781b      	ldrb	r3, [r3, #0]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff feca 	bl	80018b0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001b1c:	f7ff fe9a 	bl	8001854 <SSD1306_UpdateScreen>
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <ssd1306_I2C_Init+0x24>)
 8001b2c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b2e:	e002      	b.n	8001b36 <ssd1306_I2C_Init+0x12>
		p--;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f9      	bne.n	8001b30 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	0003d090 	.word	0x0003d090

08001b4c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b0c7      	sub	sp, #284	; 0x11c
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	4604      	mov	r4, r0
 8001b54:	4608      	mov	r0, r1
 8001b56:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001b5a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001b5e:	600a      	str	r2, [r1, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b66:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001b6a:	4622      	mov	r2, r4
 8001b6c:	701a      	strb	r2, [r3, #0]
 8001b6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b72:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001b76:	4602      	mov	r2, r0
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b82:	460a      	mov	r2, r1
 8001b84:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001b86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b8e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b92:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001b96:	7812      	ldrb	r2, [r2, #0]
 8001b98:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001ba0:	e015      	b.n	8001bce <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001ba2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ba6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001baa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	441a      	add	r2, r3
 8001bb2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	7811      	ldrb	r1, [r2, #0]
 8001bba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001bbe:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001bc2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001bc4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001bc8:	3301      	adds	r3, #1
 8001bca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001bce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001bd8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001bdc:	8812      	ldrh	r2, [r2, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d8df      	bhi.n	8001ba2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001be2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001be6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b299      	uxth	r1, r3
 8001bee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bf2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	f107 020c 	add.w	r2, r7, #12
 8001c00:	200a      	movs	r0, #10
 8001c02:	9000      	str	r0, [sp, #0]
 8001c04:	4803      	ldr	r0, [pc, #12]	; (8001c14 <ssd1306_I2C_WriteMulti+0xc8>)
 8001c06:	f000 ff99 	bl	8002b3c <HAL_I2C_Master_Transmit>
}
 8001c0a:	bf00      	nop
 8001c0c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}
 8001c14:	20000210 	.word	0x20000210

08001c18 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
 8001c22:	460b      	mov	r3, r1
 8001c24:	71bb      	strb	r3, [r7, #6]
 8001c26:	4613      	mov	r3, r2
 8001c28:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001c2a:	79bb      	ldrb	r3, [r7, #6]
 8001c2c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001c2e:	797b      	ldrb	r3, [r7, #5]
 8001c30:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	b299      	uxth	r1, r3
 8001c36:	f107 020c 	add.w	r2, r7, #12
 8001c3a:	230a      	movs	r3, #10
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	2302      	movs	r3, #2
 8001c40:	4803      	ldr	r0, [pc, #12]	; (8001c50 <ssd1306_I2C_Write+0x38>)
 8001c42:	f000 ff7b 	bl	8002b3c <HAL_I2C_Master_Transmit>
}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000210 	.word	0x20000210

08001c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_MspInit+0x40>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <HAL_MspInit+0x40>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6193      	str	r3, [r2, #24]
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_MspInit+0x40>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_MspInit+0x40>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_MspInit+0x40>)
 8001c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	61d3      	str	r3, [r2, #28]
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_MspInit+0x40>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	40021000 	.word	0x40021000

08001c98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <HAL_I2C_MspInit+0x70>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d123      	bne.n	8001d00 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_I2C_MspInit+0x74>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a13      	ldr	r2, [pc, #76]	; (8001d0c <HAL_I2C_MspInit+0x74>)
 8001cbe:	f043 0308 	orr.w	r3, r3, #8
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_I2C_MspInit+0x74>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cd0:	23c0      	movs	r3, #192	; 0xc0
 8001cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd4:	2312      	movs	r3, #18
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480b      	ldr	r0, [pc, #44]	; (8001d10 <HAL_I2C_MspInit+0x78>)
 8001ce4:	f000 fc4a 	bl	800257c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_I2C_MspInit+0x74>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <HAL_I2C_MspInit+0x74>)
 8001cee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cf2:	61d3      	str	r3, [r2, #28]
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_I2C_MspInit+0x74>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d00:	bf00      	nop
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40005400 	.word	0x40005400
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010c00 	.word	0x40010c00

08001d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a20      	ldr	r2, [pc, #128]	; (8001db0 <HAL_UART_MspInit+0x9c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d139      	bne.n	8001da8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d34:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <HAL_UART_MspInit+0xa0>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4a1e      	ldr	r2, [pc, #120]	; (8001db4 <HAL_UART_MspInit+0xa0>)
 8001d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <HAL_UART_MspInit+0xa0>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_UART_MspInit+0xa0>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <HAL_UART_MspInit+0xa0>)
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	6193      	str	r3, [r2, #24]
 8001d58:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <HAL_UART_MspInit+0xa0>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 0310 	add.w	r3, r7, #16
 8001d76:	4619      	mov	r1, r3
 8001d78:	480f      	ldr	r0, [pc, #60]	; (8001db8 <HAL_UART_MspInit+0xa4>)
 8001d7a:	f000 fbff 	bl	800257c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	f107 0310 	add.w	r3, r7, #16
 8001d90:	4619      	mov	r1, r3
 8001d92:	4809      	ldr	r0, [pc, #36]	; (8001db8 <HAL_UART_MspInit+0xa4>)
 8001d94:	f000 fbf2 	bl	800257c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2025      	movs	r0, #37	; 0x25
 8001d9e:	f000 fb06 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001da2:	2025      	movs	r0, #37	; 0x25
 8001da4:	f000 fb1f 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001da8:	bf00      	nop
 8001daa:	3720      	adds	r7, #32
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40013800 	.word	0x40013800
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40010800 	.word	0x40010800

08001dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <NMI_Handler+0x4>

08001dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <HardFault_Handler+0x4>

08001dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <MemManage_Handler+0x4>

08001dce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <BusFault_Handler+0x4>

08001dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <UsageFault_Handler+0x4>

08001dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr

08001de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e02:	f000 f9e1 	bl	80021c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e10:	484f      	ldr	r0, [pc, #316]	; (8001f50 <USART1_IRQHandler+0x144>)
 8001e12:	f001 ff5f 	bl	8003cd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if((seqCheck == 0) && (rxData == '$'))
 8001e16:	4b4f      	ldr	r3, [pc, #316]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d111      	bne.n	8001e42 <USART1_IRQHandler+0x36>
 8001e1e:	4b4e      	ldr	r3, [pc, #312]	; (8001f58 <USART1_IRQHandler+0x14c>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b24      	cmp	r3, #36	; 0x24
 8001e24:	d10d      	bne.n	8001e42 <USART1_IRQHandler+0x36>
  {
	  gpsBuff[seqCheck] = rxData;
 8001e26:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4b4a      	ldr	r3, [pc, #296]	; (8001f58 <USART1_IRQHandler+0x14c>)
 8001e2e:	7819      	ldrb	r1, [r3, #0]
 8001e30:	4b4a      	ldr	r3, [pc, #296]	; (8001f5c <USART1_IRQHandler+0x150>)
 8001e32:	5499      	strb	r1, [r3, r2]
	  seqCheck = 1;
 8001e34:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
	  rxIntCheck = 1;
 8001e3a:	4b49      	ldr	r3, [pc, #292]	; (8001f60 <USART1_IRQHandler+0x154>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
 8001e40:	e083      	b.n	8001f4a <USART1_IRQHandler+0x13e>
  }
   else if((seqCheck == 1) && (rxData == 'G'))
 8001e42:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d111      	bne.n	8001e6e <USART1_IRQHandler+0x62>
 8001e4a:	4b43      	ldr	r3, [pc, #268]	; (8001f58 <USART1_IRQHandler+0x14c>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b47      	cmp	r3, #71	; 0x47
 8001e50:	d10d      	bne.n	8001e6e <USART1_IRQHandler+0x62>
  {
	  gpsBuff[seqCheck] = rxData;
 8001e52:	4b40      	ldr	r3, [pc, #256]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <USART1_IRQHandler+0x14c>)
 8001e5a:	7819      	ldrb	r1, [r3, #0]
 8001e5c:	4b3f      	ldr	r3, [pc, #252]	; (8001f5c <USART1_IRQHandler+0x150>)
 8001e5e:	5499      	strb	r1, [r3, r2]
	  seqCheck = 2;
 8001e60:	4b3c      	ldr	r3, [pc, #240]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001e62:	2202      	movs	r2, #2
 8001e64:	701a      	strb	r2, [r3, #0]
	  rxIntCheck = 1;
 8001e66:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <USART1_IRQHandler+0x154>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	e06d      	b.n	8001f4a <USART1_IRQHandler+0x13e>
  }
  else if((seqCheck == 2) && (rxData == 'P'))
 8001e6e:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d111      	bne.n	8001e9a <USART1_IRQHandler+0x8e>
 8001e76:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <USART1_IRQHandler+0x14c>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b50      	cmp	r3, #80	; 0x50
 8001e7c:	d10d      	bne.n	8001e9a <USART1_IRQHandler+0x8e>
  {
	  gpsBuff[seqCheck] = rxData;
 8001e7e:	4b35      	ldr	r3, [pc, #212]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	4b34      	ldr	r3, [pc, #208]	; (8001f58 <USART1_IRQHandler+0x14c>)
 8001e86:	7819      	ldrb	r1, [r3, #0]
 8001e88:	4b34      	ldr	r3, [pc, #208]	; (8001f5c <USART1_IRQHandler+0x150>)
 8001e8a:	5499      	strb	r1, [r3, r2]
	  seqCheck = 3;
 8001e8c:	4b31      	ldr	r3, [pc, #196]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001e8e:	2203      	movs	r2, #3
 8001e90:	701a      	strb	r2, [r3, #0]
	  rxIntCheck = 1;
 8001e92:	4b33      	ldr	r3, [pc, #204]	; (8001f60 <USART1_IRQHandler+0x154>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	e057      	b.n	8001f4a <USART1_IRQHandler+0x13e>
  }
  else if((seqCheck == 3) && (rxData == 'R'))
 8001e9a:	4b2e      	ldr	r3, [pc, #184]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d111      	bne.n	8001ec6 <USART1_IRQHandler+0xba>
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <USART1_IRQHandler+0x14c>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b52      	cmp	r3, #82	; 0x52
 8001ea8:	d10d      	bne.n	8001ec6 <USART1_IRQHandler+0xba>
  {
	  gpsBuff[seqCheck] = rxData;
 8001eaa:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <USART1_IRQHandler+0x14c>)
 8001eb2:	7819      	ldrb	r1, [r3, #0]
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <USART1_IRQHandler+0x150>)
 8001eb6:	5499      	strb	r1, [r3, r2]
	  seqCheck = 4;
 8001eb8:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001eba:	2204      	movs	r2, #4
 8001ebc:	701a      	strb	r2, [r3, #0]
	  rxIntCheck = 1;
 8001ebe:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <USART1_IRQHandler+0x154>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
 8001ec4:	e041      	b.n	8001f4a <USART1_IRQHandler+0x13e>
  }
  else if((seqCheck == 4) && (rxData == 'M'))
 8001ec6:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d111      	bne.n	8001ef2 <USART1_IRQHandler+0xe6>
 8001ece:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <USART1_IRQHandler+0x14c>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b4d      	cmp	r3, #77	; 0x4d
 8001ed4:	d10d      	bne.n	8001ef2 <USART1_IRQHandler+0xe6>
  {
	  gpsBuff[seqCheck] = rxData;
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <USART1_IRQHandler+0x14c>)
 8001ede:	7819      	ldrb	r1, [r3, #0]
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <USART1_IRQHandler+0x150>)
 8001ee2:	5499      	strb	r1, [r3, r2]
	  seqCheck = 5;
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001ee6:	2205      	movs	r2, #5
 8001ee8:	701a      	strb	r2, [r3, #0]
	  rxIntCheck = 1;
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <USART1_IRQHandler+0x154>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	e02b      	b.n	8001f4a <USART1_IRQHandler+0x13e>
  }
  else if((seqCheck == 5) && (rxData == 'C'))
 8001ef2:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b05      	cmp	r3, #5
 8001ef8:	d111      	bne.n	8001f1e <USART1_IRQHandler+0x112>
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <USART1_IRQHandler+0x14c>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b43      	cmp	r3, #67	; 0x43
 8001f00:	d10d      	bne.n	8001f1e <USART1_IRQHandler+0x112>
  {
	  gpsBuff[seqCheck] = rxData;
 8001f02:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <USART1_IRQHandler+0x14c>)
 8001f0a:	7819      	ldrb	r1, [r3, #0]
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <USART1_IRQHandler+0x150>)
 8001f0e:	5499      	strb	r1, [r3, r2]
	  seqCheck = 6;
 8001f10:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001f12:	2206      	movs	r2, #6
 8001f14:	701a      	strb	r2, [r3, #0]
	  rxIntCheck = 1;
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <USART1_IRQHandler+0x154>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
 8001f1c:	e015      	b.n	8001f4a <USART1_IRQHandler+0x13e>
  }
  else if(seqCheck != 6)
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d006      	beq.n	8001f34 <USART1_IRQHandler+0x128>
  {
	  seqCheck = 0;
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
	  rxIntCheck = 1;
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <USART1_IRQHandler+0x154>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
  //{
	  //rxIntCheck = 1;
  //}

  /* USER CODE END USART1_IRQn 1 */
}
 8001f32:	e00a      	b.n	8001f4a <USART1_IRQHandler+0x13e>
  else if(seqCheck == 6)
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <USART1_IRQHandler+0x148>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b06      	cmp	r3, #6
 8001f3a:	d106      	bne.n	8001f4a <USART1_IRQHandler+0x13e>
	  --rxIntCheck;
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <USART1_IRQHandler+0x154>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <USART1_IRQHandler+0x154>)
 8001f46:	701a      	strb	r2, [r3, #0]
}
 8001f48:	e7ff      	b.n	8001f4a <USART1_IRQHandler+0x13e>
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000264 	.word	0x20000264
 8001f54:	20000431 	.word	0x20000431
 8001f58:	20000433 	.word	0x20000433
 8001f5c:	200002a8 	.word	0x200002a8
 8001f60:	20000010 	.word	0x20000010

08001f64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return 1;
 8001f68:	2301      	movs	r3, #1
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <_kill>:

int _kill(int pid, int sig)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f7c:	f002 fa92 	bl	80044a4 <__errno>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2216      	movs	r2, #22
 8001f84:	601a      	str	r2, [r3, #0]
  return -1;
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <_exit>:

void _exit (int status)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ffe7 	bl	8001f72 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fa4:	e7fe      	b.n	8001fa4 <_exit+0x12>

08001fa6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e00a      	b.n	8001fce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fb8:	f3af 8000 	nop.w
 8001fbc:	4601      	mov	r1, r0
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	60ba      	str	r2, [r7, #8]
 8001fc4:	b2ca      	uxtb	r2, r1
 8001fc6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	dbf0      	blt.n	8001fb8 <_read+0x12>
  }

  return len;
 8001fd6:	687b      	ldr	r3, [r7, #4]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e009      	b.n	8002006 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	60ba      	str	r2, [r7, #8]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	3301      	adds	r3, #1
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	429a      	cmp	r2, r3
 800200c:	dbf1      	blt.n	8001ff2 <_write+0x12>
  }
  return len;
 800200e:	687b      	ldr	r3, [r7, #4]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_close>:

int _close(int file)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800203e:	605a      	str	r2, [r3, #4]
  return 0;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <_isatty>:

int _isatty(int file)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002054:	2301      	movs	r3, #1
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002080:	4a14      	ldr	r2, [pc, #80]	; (80020d4 <_sbrk+0x5c>)
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <_sbrk+0x60>)
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800208c:	4b13      	ldr	r3, [pc, #76]	; (80020dc <_sbrk+0x64>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <_sbrk+0x64>)
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <_sbrk+0x68>)
 8002098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d207      	bcs.n	80020b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a8:	f002 f9fc 	bl	80044a4 <__errno>
 80020ac:	4603      	mov	r3, r0
 80020ae:	220c      	movs	r2, #12
 80020b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020b6:	e009      	b.n	80020cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <_sbrk+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	4a05      	ldr	r2, [pc, #20]	; (80020dc <_sbrk+0x64>)
 80020c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ca:	68fb      	ldr	r3, [r7, #12]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20005000 	.word	0x20005000
 80020d8:	00000400 	.word	0x00000400
 80020dc:	20000840 	.word	0x20000840
 80020e0:	20000858 	.word	0x20000858

080020e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f0:	480c      	ldr	r0, [pc, #48]	; (8002124 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020f2:	490d      	ldr	r1, [pc, #52]	; (8002128 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020f4:	4a0d      	ldr	r2, [pc, #52]	; (800212c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f8:	e002      	b.n	8002100 <LoopCopyDataInit>

080020fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fe:	3304      	adds	r3, #4

08002100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002104:	d3f9      	bcc.n	80020fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002106:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002108:	4c0a      	ldr	r4, [pc, #40]	; (8002134 <LoopFillZerobss+0x22>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800210c:	e001      	b.n	8002112 <LoopFillZerobss>

0800210e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002110:	3204      	adds	r2, #4

08002112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002114:	d3fb      	bcc.n	800210e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002116:	f7ff ffe5 	bl	80020e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800211a:	f002 f9c9 	bl	80044b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800211e:	f7fe fe73 	bl	8000e08 <main>
  bx lr
 8002122:	4770      	bx	lr
  ldr r0, =_sdata
 8002124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002128:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800212c:	0800afa0 	.word	0x0800afa0
  ldr r2, =_sbss
 8002130:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002134:	20000858 	.word	0x20000858

08002138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002138:	e7fe      	b.n	8002138 <ADC1_2_IRQHandler>
	...

0800213c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_Init+0x28>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a07      	ldr	r2, [pc, #28]	; (8002164 <HAL_Init+0x28>)
 8002146:	f043 0310 	orr.w	r3, r3, #16
 800214a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214c:	2003      	movs	r0, #3
 800214e:	f000 f923 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002152:	200f      	movs	r0, #15
 8002154:	f000 f808 	bl	8002168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002158:	f7ff fd7c 	bl	8001c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40022000 	.word	0x40022000

08002168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_InitTick+0x54>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_InitTick+0x58>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
 800217a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002182:	fbb2 f3f3 	udiv	r3, r2, r3
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f93b 	bl	8002402 <HAL_SYSTICK_Config>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e00e      	b.n	80021b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b0f      	cmp	r3, #15
 800219a:	d80a      	bhi.n	80021b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800219c:	2200      	movs	r2, #0
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021a4:	f000 f903 	bl	80023ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a8:	4a06      	ldr	r2, [pc, #24]	; (80021c4 <HAL_InitTick+0x5c>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e000      	b.n	80021b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000014 	.word	0x20000014
 80021c0:	2000001c 	.word	0x2000001c
 80021c4:	20000018 	.word	0x20000018

080021c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_IncTick+0x1c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_IncTick+0x20>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	4a03      	ldr	r2, [pc, #12]	; (80021e8 <HAL_IncTick+0x20>)
 80021da:	6013      	str	r3, [r2, #0]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	2000001c 	.word	0x2000001c
 80021e8:	20000844 	.word	0x20000844

080021ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return uwTick;
 80021f0:	4b02      	ldr	r3, [pc, #8]	; (80021fc <HAL_GetTick+0x10>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	20000844 	.word	0x20000844

08002200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800221c:	4013      	ands	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800222c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002232:	4a04      	ldr	r2, [pc, #16]	; (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	60d3      	str	r3, [r2, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <__NVIC_GetPriorityGrouping+0x18>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	f003 0307 	and.w	r3, r3, #7
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	2b00      	cmp	r3, #0
 8002274:	db0b      	blt.n	800228e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	f003 021f 	and.w	r2, r3, #31
 800227c:	4906      	ldr	r1, [pc, #24]	; (8002298 <__NVIC_EnableIRQ+0x34>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	2001      	movs	r0, #1
 8002286:	fa00 f202 	lsl.w	r2, r0, r2
 800228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr
 8002298:	e000e100 	.word	0xe000e100

0800229c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0a      	blt.n	80022c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	490c      	ldr	r1, [pc, #48]	; (80022e8 <__NVIC_SetPriority+0x4c>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	440b      	add	r3, r1
 80022c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c4:	e00a      	b.n	80022dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4908      	ldr	r1, [pc, #32]	; (80022ec <__NVIC_SetPriority+0x50>)
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3b04      	subs	r3, #4
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	440b      	add	r3, r1
 80022da:	761a      	strb	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000e100 	.word	0xe000e100
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	; 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f1c3 0307 	rsb	r3, r3, #7
 800230a:	2b04      	cmp	r3, #4
 800230c:	bf28      	it	cs
 800230e:	2304      	movcs	r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3304      	adds	r3, #4
 8002316:	2b06      	cmp	r3, #6
 8002318:	d902      	bls.n	8002320 <NVIC_EncodePriority+0x30>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3b03      	subs	r3, #3
 800231e:	e000      	b.n	8002322 <NVIC_EncodePriority+0x32>
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002338:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43d9      	mvns	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	4313      	orrs	r3, r2
         );
}
 800234a:	4618      	mov	r0, r3
 800234c:	3724      	adds	r7, #36	; 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002378:	f7ff ff90 	bl	800229c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff2d 	bl	8002200 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff42 	bl	8002248 <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff90 	bl	80022f0 <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5f 	bl	800229c <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff35 	bl	8002264 <__NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffa2 	bl	8002354 <SysTick_Config>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800241a:	b480      	push	{r7}
 800241c:	b085      	sub	sp, #20
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800242c:	2b02      	cmp	r3, #2
 800242e:	d008      	beq.n	8002442 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2204      	movs	r2, #4
 8002434:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e020      	b.n	8002484 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 020e 	bic.w	r2, r2, #14
 8002450:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0201 	bic.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246a:	2101      	movs	r1, #1
 800246c:	fa01 f202 	lsl.w	r2, r1, r2
 8002470:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002482:	7bfb      	ldrb	r3, [r7, #15]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
	...

08002490 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d005      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2204      	movs	r2, #4
 80024aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
 80024b0:	e051      	b.n	8002556 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 020e 	bic.w	r2, r2, #14
 80024c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0201 	bic.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a22      	ldr	r2, [pc, #136]	; (8002560 <HAL_DMA_Abort_IT+0xd0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d029      	beq.n	8002530 <HAL_DMA_Abort_IT+0xa0>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a20      	ldr	r2, [pc, #128]	; (8002564 <HAL_DMA_Abort_IT+0xd4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d022      	beq.n	800252c <HAL_DMA_Abort_IT+0x9c>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <HAL_DMA_Abort_IT+0xd8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d01a      	beq.n	8002526 <HAL_DMA_Abort_IT+0x96>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1d      	ldr	r2, [pc, #116]	; (800256c <HAL_DMA_Abort_IT+0xdc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d012      	beq.n	8002520 <HAL_DMA_Abort_IT+0x90>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <HAL_DMA_Abort_IT+0xe0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00a      	beq.n	800251a <HAL_DMA_Abort_IT+0x8a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a1a      	ldr	r2, [pc, #104]	; (8002574 <HAL_DMA_Abort_IT+0xe4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d102      	bne.n	8002514 <HAL_DMA_Abort_IT+0x84>
 800250e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002512:	e00e      	b.n	8002532 <HAL_DMA_Abort_IT+0xa2>
 8002514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002518:	e00b      	b.n	8002532 <HAL_DMA_Abort_IT+0xa2>
 800251a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800251e:	e008      	b.n	8002532 <HAL_DMA_Abort_IT+0xa2>
 8002520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002524:	e005      	b.n	8002532 <HAL_DMA_Abort_IT+0xa2>
 8002526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800252a:	e002      	b.n	8002532 <HAL_DMA_Abort_IT+0xa2>
 800252c:	2310      	movs	r3, #16
 800252e:	e000      	b.n	8002532 <HAL_DMA_Abort_IT+0xa2>
 8002530:	2301      	movs	r3, #1
 8002532:	4a11      	ldr	r2, [pc, #68]	; (8002578 <HAL_DMA_Abort_IT+0xe8>)
 8002534:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	4798      	blx	r3
    } 
  }
  return status;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40020008 	.word	0x40020008
 8002564:	4002001c 	.word	0x4002001c
 8002568:	40020030 	.word	0x40020030
 800256c:	40020044 	.word	0x40020044
 8002570:	40020058 	.word	0x40020058
 8002574:	4002006c 	.word	0x4002006c
 8002578:	40020000 	.word	0x40020000

0800257c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800257c:	b480      	push	{r7}
 800257e:	b08b      	sub	sp, #44	; 0x2c
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800258e:	e169      	b.n	8002864 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002590:	2201      	movs	r2, #1
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	f040 8158 	bne.w	800285e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4a9a      	ldr	r2, [pc, #616]	; (800281c <HAL_GPIO_Init+0x2a0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d05e      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
 80025b8:	4a98      	ldr	r2, [pc, #608]	; (800281c <HAL_GPIO_Init+0x2a0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d875      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025be:	4a98      	ldr	r2, [pc, #608]	; (8002820 <HAL_GPIO_Init+0x2a4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d058      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
 80025c4:	4a96      	ldr	r2, [pc, #600]	; (8002820 <HAL_GPIO_Init+0x2a4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d86f      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025ca:	4a96      	ldr	r2, [pc, #600]	; (8002824 <HAL_GPIO_Init+0x2a8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d052      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
 80025d0:	4a94      	ldr	r2, [pc, #592]	; (8002824 <HAL_GPIO_Init+0x2a8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d869      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025d6:	4a94      	ldr	r2, [pc, #592]	; (8002828 <HAL_GPIO_Init+0x2ac>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d04c      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
 80025dc:	4a92      	ldr	r2, [pc, #584]	; (8002828 <HAL_GPIO_Init+0x2ac>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d863      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025e2:	4a92      	ldr	r2, [pc, #584]	; (800282c <HAL_GPIO_Init+0x2b0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d046      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
 80025e8:	4a90      	ldr	r2, [pc, #576]	; (800282c <HAL_GPIO_Init+0x2b0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d85d      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025ee:	2b12      	cmp	r3, #18
 80025f0:	d82a      	bhi.n	8002648 <HAL_GPIO_Init+0xcc>
 80025f2:	2b12      	cmp	r3, #18
 80025f4:	d859      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025f6:	a201      	add	r2, pc, #4	; (adr r2, 80025fc <HAL_GPIO_Init+0x80>)
 80025f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fc:	08002677 	.word	0x08002677
 8002600:	08002651 	.word	0x08002651
 8002604:	08002663 	.word	0x08002663
 8002608:	080026a5 	.word	0x080026a5
 800260c:	080026ab 	.word	0x080026ab
 8002610:	080026ab 	.word	0x080026ab
 8002614:	080026ab 	.word	0x080026ab
 8002618:	080026ab 	.word	0x080026ab
 800261c:	080026ab 	.word	0x080026ab
 8002620:	080026ab 	.word	0x080026ab
 8002624:	080026ab 	.word	0x080026ab
 8002628:	080026ab 	.word	0x080026ab
 800262c:	080026ab 	.word	0x080026ab
 8002630:	080026ab 	.word	0x080026ab
 8002634:	080026ab 	.word	0x080026ab
 8002638:	080026ab 	.word	0x080026ab
 800263c:	080026ab 	.word	0x080026ab
 8002640:	08002659 	.word	0x08002659
 8002644:	0800266d 	.word	0x0800266d
 8002648:	4a79      	ldr	r2, [pc, #484]	; (8002830 <HAL_GPIO_Init+0x2b4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d013      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800264e:	e02c      	b.n	80026aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	623b      	str	r3, [r7, #32]
          break;
 8002656:	e029      	b.n	80026ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	3304      	adds	r3, #4
 800265e:	623b      	str	r3, [r7, #32]
          break;
 8002660:	e024      	b.n	80026ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	3308      	adds	r3, #8
 8002668:	623b      	str	r3, [r7, #32]
          break;
 800266a:	e01f      	b.n	80026ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	330c      	adds	r3, #12
 8002672:	623b      	str	r3, [r7, #32]
          break;
 8002674:	e01a      	b.n	80026ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d102      	bne.n	8002684 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800267e:	2304      	movs	r3, #4
 8002680:	623b      	str	r3, [r7, #32]
          break;
 8002682:	e013      	b.n	80026ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d105      	bne.n	8002698 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800268c:	2308      	movs	r3, #8
 800268e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	611a      	str	r2, [r3, #16]
          break;
 8002696:	e009      	b.n	80026ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002698:	2308      	movs	r3, #8
 800269a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	615a      	str	r2, [r3, #20]
          break;
 80026a2:	e003      	b.n	80026ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026a4:	2300      	movs	r3, #0
 80026a6:	623b      	str	r3, [r7, #32]
          break;
 80026a8:	e000      	b.n	80026ac <HAL_GPIO_Init+0x130>
          break;
 80026aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2bff      	cmp	r3, #255	; 0xff
 80026b0:	d801      	bhi.n	80026b6 <HAL_GPIO_Init+0x13a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	e001      	b.n	80026ba <HAL_GPIO_Init+0x13e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	2bff      	cmp	r3, #255	; 0xff
 80026c0:	d802      	bhi.n	80026c8 <HAL_GPIO_Init+0x14c>
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	e002      	b.n	80026ce <HAL_GPIO_Init+0x152>
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	3b08      	subs	r3, #8
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	210f      	movs	r1, #15
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	401a      	ands	r2, r3
 80026e0:	6a39      	ldr	r1, [r7, #32]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	431a      	orrs	r2, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80b1 	beq.w	800285e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026fc:	4b4d      	ldr	r3, [pc, #308]	; (8002834 <HAL_GPIO_Init+0x2b8>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	4a4c      	ldr	r2, [pc, #304]	; (8002834 <HAL_GPIO_Init+0x2b8>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6193      	str	r3, [r2, #24]
 8002708:	4b4a      	ldr	r3, [pc, #296]	; (8002834 <HAL_GPIO_Init+0x2b8>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002714:	4a48      	ldr	r2, [pc, #288]	; (8002838 <HAL_GPIO_Init+0x2bc>)
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002720:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	220f      	movs	r2, #15
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4013      	ands	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a40      	ldr	r2, [pc, #256]	; (800283c <HAL_GPIO_Init+0x2c0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d013      	beq.n	8002768 <HAL_GPIO_Init+0x1ec>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a3f      	ldr	r2, [pc, #252]	; (8002840 <HAL_GPIO_Init+0x2c4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00d      	beq.n	8002764 <HAL_GPIO_Init+0x1e8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a3e      	ldr	r2, [pc, #248]	; (8002844 <HAL_GPIO_Init+0x2c8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d007      	beq.n	8002760 <HAL_GPIO_Init+0x1e4>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a3d      	ldr	r2, [pc, #244]	; (8002848 <HAL_GPIO_Init+0x2cc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_GPIO_Init+0x1e0>
 8002758:	2303      	movs	r3, #3
 800275a:	e006      	b.n	800276a <HAL_GPIO_Init+0x1ee>
 800275c:	2304      	movs	r3, #4
 800275e:	e004      	b.n	800276a <HAL_GPIO_Init+0x1ee>
 8002760:	2302      	movs	r3, #2
 8002762:	e002      	b.n	800276a <HAL_GPIO_Init+0x1ee>
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <HAL_GPIO_Init+0x1ee>
 8002768:	2300      	movs	r3, #0
 800276a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276c:	f002 0203 	and.w	r2, r2, #3
 8002770:	0092      	lsls	r2, r2, #2
 8002772:	4093      	lsls	r3, r2
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800277a:	492f      	ldr	r1, [pc, #188]	; (8002838 <HAL_GPIO_Init+0x2bc>)
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	089b      	lsrs	r3, r3, #2
 8002780:	3302      	adds	r3, #2
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d006      	beq.n	80027a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002794:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_GPIO_Init+0x2d0>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	492c      	ldr	r1, [pc, #176]	; (800284c <HAL_GPIO_Init+0x2d0>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]
 80027a0:	e006      	b.n	80027b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027a2:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	4928      	ldr	r1, [pc, #160]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d006      	beq.n	80027ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027bc:	4b23      	ldr	r3, [pc, #140]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	4922      	ldr	r1, [pc, #136]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
 80027c8:	e006      	b.n	80027d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027ca:	4b20      	ldr	r3, [pc, #128]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	491e      	ldr	r1, [pc, #120]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d006      	beq.n	80027f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	4918      	ldr	r1, [pc, #96]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	608b      	str	r3, [r1, #8]
 80027f0:	e006      	b.n	8002800 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	4914      	ldr	r1, [pc, #80]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d021      	beq.n	8002850 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_GPIO_Init+0x2d0>)
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	490e      	ldr	r1, [pc, #56]	; (800284c <HAL_GPIO_Init+0x2d0>)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	60cb      	str	r3, [r1, #12]
 8002818:	e021      	b.n	800285e <HAL_GPIO_Init+0x2e2>
 800281a:	bf00      	nop
 800281c:	10320000 	.word	0x10320000
 8002820:	10310000 	.word	0x10310000
 8002824:	10220000 	.word	0x10220000
 8002828:	10210000 	.word	0x10210000
 800282c:	10120000 	.word	0x10120000
 8002830:	10110000 	.word	0x10110000
 8002834:	40021000 	.word	0x40021000
 8002838:	40010000 	.word	0x40010000
 800283c:	40010800 	.word	0x40010800
 8002840:	40010c00 	.word	0x40010c00
 8002844:	40011000 	.word	0x40011000
 8002848:	40011400 	.word	0x40011400
 800284c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_GPIO_Init+0x304>)
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	43db      	mvns	r3, r3
 8002858:	4909      	ldr	r1, [pc, #36]	; (8002880 <HAL_GPIO_Init+0x304>)
 800285a:	4013      	ands	r3, r2
 800285c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	3301      	adds	r3, #1
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	fa22 f303 	lsr.w	r3, r2, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	f47f ae8e 	bne.w	8002590 <HAL_GPIO_Init+0x14>
  }
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	372c      	adds	r7, #44	; 0x2c
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr
 8002880:	40010400 	.word	0x40010400

08002884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
 8002890:	4613      	mov	r3, r2
 8002892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002894:	787b      	ldrb	r3, [r7, #1]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800289a:	887a      	ldrh	r2, [r7, #2]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028a0:	e003      	b.n	80028aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028a2:	887b      	ldrh	r3, [r7, #2]
 80028a4:	041a      	lsls	r2, r3, #16
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	611a      	str	r2, [r3, #16]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e12b      	b.n	8002b1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff f9dc 	bl	8001c98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2224      	movs	r2, #36	; 0x24
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002906:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002916:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002918:	f001 f918 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 800291c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	4a81      	ldr	r2, [pc, #516]	; (8002b28 <HAL_I2C_Init+0x274>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d807      	bhi.n	8002938 <HAL_I2C_Init+0x84>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4a80      	ldr	r2, [pc, #512]	; (8002b2c <HAL_I2C_Init+0x278>)
 800292c:	4293      	cmp	r3, r2
 800292e:	bf94      	ite	ls
 8002930:	2301      	movls	r3, #1
 8002932:	2300      	movhi	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	e006      	b.n	8002946 <HAL_I2C_Init+0x92>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4a7d      	ldr	r2, [pc, #500]	; (8002b30 <HAL_I2C_Init+0x27c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	bf94      	ite	ls
 8002940:	2301      	movls	r3, #1
 8002942:	2300      	movhi	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e0e7      	b.n	8002b1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4a78      	ldr	r2, [pc, #480]	; (8002b34 <HAL_I2C_Init+0x280>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	0c9b      	lsrs	r3, r3, #18
 8002958:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4a6a      	ldr	r2, [pc, #424]	; (8002b28 <HAL_I2C_Init+0x274>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d802      	bhi.n	8002988 <HAL_I2C_Init+0xd4>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	3301      	adds	r3, #1
 8002986:	e009      	b.n	800299c <HAL_I2C_Init+0xe8>
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800298e:	fb02 f303 	mul.w	r3, r2, r3
 8002992:	4a69      	ldr	r2, [pc, #420]	; (8002b38 <HAL_I2C_Init+0x284>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	099b      	lsrs	r3, r3, #6
 800299a:	3301      	adds	r3, #1
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	430b      	orrs	r3, r1
 80029a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	495c      	ldr	r1, [pc, #368]	; (8002b28 <HAL_I2C_Init+0x274>)
 80029b8:	428b      	cmp	r3, r1
 80029ba:	d819      	bhi.n	80029f0 <HAL_I2C_Init+0x13c>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1e59      	subs	r1, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ca:	1c59      	adds	r1, r3, #1
 80029cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029d0:	400b      	ands	r3, r1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_I2C_Init+0x138>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1e59      	subs	r1, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e4:	3301      	adds	r3, #1
 80029e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ea:	e051      	b.n	8002a90 <HAL_I2C_Init+0x1dc>
 80029ec:	2304      	movs	r3, #4
 80029ee:	e04f      	b.n	8002a90 <HAL_I2C_Init+0x1dc>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d111      	bne.n	8002a1c <HAL_I2C_Init+0x168>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1e58      	subs	r0, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6859      	ldr	r1, [r3, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	440b      	add	r3, r1
 8002a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e012      	b.n	8002a42 <HAL_I2C_Init+0x18e>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1e58      	subs	r0, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6859      	ldr	r1, [r3, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	0099      	lsls	r1, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a32:	3301      	adds	r3, #1
 8002a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_Init+0x196>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e022      	b.n	8002a90 <HAL_I2C_Init+0x1dc>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10e      	bne.n	8002a70 <HAL_I2C_Init+0x1bc>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1e58      	subs	r0, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6859      	ldr	r1, [r3, #4]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	440b      	add	r3, r1
 8002a60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a64:	3301      	adds	r3, #1
 8002a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a6e:	e00f      	b.n	8002a90 <HAL_I2C_Init+0x1dc>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1e58      	subs	r0, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	0099      	lsls	r1, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a86:	3301      	adds	r3, #1
 8002a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	6809      	ldr	r1, [r1, #0]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69da      	ldr	r2, [r3, #28]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002abe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6911      	ldr	r1, [r2, #16]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68d2      	ldr	r2, [r2, #12]
 8002aca:	4311      	orrs	r1, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	000186a0 	.word	0x000186a0
 8002b2c:	001e847f 	.word	0x001e847f
 8002b30:	003d08ff 	.word	0x003d08ff
 8002b34:	431bde83 	.word	0x431bde83
 8002b38:	10624dd3 	.word	0x10624dd3

08002b3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	461a      	mov	r2, r3
 8002b48:	460b      	mov	r3, r1
 8002b4a:	817b      	strh	r3, [r7, #10]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b50:	f7ff fb4c 	bl	80021ec <HAL_GetTick>
 8002b54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	f040 80e0 	bne.w	8002d24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2319      	movs	r3, #25
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	4970      	ldr	r1, [pc, #448]	; (8002d30 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fa92 	bl	8003098 <I2C_WaitOnFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e0d3      	b.n	8002d26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_I2C_Master_Transmit+0x50>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e0cc      	b.n	8002d26 <HAL_I2C_Master_Transmit+0x1ea>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d007      	beq.n	8002bb2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2221      	movs	r2, #33	; 0x21
 8002bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2210      	movs	r2, #16
 8002bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	893a      	ldrh	r2, [r7, #8]
 8002be2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4a50      	ldr	r2, [pc, #320]	; (8002d34 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bf2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bf4:	8979      	ldrh	r1, [r7, #10]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	6a3a      	ldr	r2, [r7, #32]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f9ca 	bl	8002f94 <I2C_MasterRequestWrite>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e08d      	b.n	8002d26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c20:	e066      	b.n	8002cf0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	6a39      	ldr	r1, [r7, #32]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 fb0c 	bl	8003244 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00d      	beq.n	8002c4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d107      	bne.n	8002c4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e06b      	b.n	8002d26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	781a      	ldrb	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_I2C_Master_Transmit+0x188>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d017      	beq.n	8002cc4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	781a      	ldrb	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	6a39      	ldr	r1, [r7, #32]
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 fafc 	bl	80032c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00d      	beq.n	8002cf0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d107      	bne.n	8002cec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e01a      	b.n	8002d26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d194      	bne.n	8002c22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e000      	b.n	8002d26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d24:	2302      	movs	r3, #2
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	00100002 	.word	0x00100002
 8002d34:	ffff0000 	.word	0xffff0000

08002d38 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	460b      	mov	r3, r1
 8002d46:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d48:	f7ff fa50 	bl	80021ec <HAL_GetTick>
 8002d4c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	f040 8111 	bne.w	8002f82 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	2319      	movs	r3, #25
 8002d66:	2201      	movs	r2, #1
 8002d68:	4988      	ldr	r1, [pc, #544]	; (8002f8c <HAL_I2C_IsDeviceReady+0x254>)
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f994 	bl	8003098 <I2C_WaitOnFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d76:	2302      	movs	r3, #2
 8002d78:	e104      	b.n	8002f84 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_I2C_IsDeviceReady+0x50>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e0fd      	b.n	8002f84 <HAL_I2C_IsDeviceReady+0x24c>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d007      	beq.n	8002dae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0201 	orr.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2224      	movs	r2, #36	; 0x24
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4a70      	ldr	r2, [pc, #448]	; (8002f90 <HAL_I2C_IsDeviceReady+0x258>)
 8002dd0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002de0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f952 	bl	8003098 <I2C_WaitOnFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00d      	beq.n	8002e16 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e08:	d103      	bne.n	8002e12 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e0b6      	b.n	8002f84 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e16:	897b      	ldrh	r3, [r7, #10]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e24:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002e26:	f7ff f9e1 	bl	80021ec <HAL_GetTick>
 8002e2a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	bf0c      	ite	eq
 8002e3a:	2301      	moveq	r3, #1
 8002e3c:	2300      	movne	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e50:	bf0c      	ite	eq
 8002e52:	2301      	moveq	r3, #1
 8002e54:	2300      	movne	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e5a:	e025      	b.n	8002ea8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e5c:	f7ff f9c6 	bl	80021ec <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d302      	bcc.n	8002e72 <HAL_I2C_IsDeviceReady+0x13a>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d103      	bne.n	8002e7a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	22a0      	movs	r2, #160	; 0xa0
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2ba0      	cmp	r3, #160	; 0xa0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_I2C_IsDeviceReady+0x188>
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d102      	bne.n	8002ec0 <HAL_I2C_IsDeviceReady+0x188>
 8002eba:	7dbb      	ldrb	r3, [r7, #22]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0cd      	beq.n	8002e5c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d129      	bne.n	8002f2a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	2319      	movs	r3, #25
 8002f02:	2201      	movs	r2, #1
 8002f04:	4921      	ldr	r1, [pc, #132]	; (8002f8c <HAL_I2C_IsDeviceReady+0x254>)
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f8c6 	bl	8003098 <I2C_WaitOnFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e036      	b.n	8002f84 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e02c      	b.n	8002f84 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f38:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f42:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	2319      	movs	r3, #25
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	490f      	ldr	r1, [pc, #60]	; (8002f8c <HAL_I2C_IsDeviceReady+0x254>)
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f8a2 	bl	8003098 <I2C_WaitOnFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e012      	b.n	8002f84 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	3301      	adds	r3, #1
 8002f62:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	f4ff af32 	bcc.w	8002dd2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f82:	2302      	movs	r3, #2
  }
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	00100002 	.word	0x00100002
 8002f90:	ffff0000 	.word	0xffff0000

08002f94 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d006      	beq.n	8002fbe <I2C_MasterRequestWrite+0x2a>
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d003      	beq.n	8002fbe <I2C_MasterRequestWrite+0x2a>
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fbc:	d108      	bne.n	8002fd0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	e00b      	b.n	8002fe8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	2b12      	cmp	r3, #18
 8002fd6:	d107      	bne.n	8002fe8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f84f 	bl	8003098 <I2C_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00d      	beq.n	800301c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300e:	d103      	bne.n	8003018 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003016:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e035      	b.n	8003088 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003024:	d108      	bne.n	8003038 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003026:	897b      	ldrh	r3, [r7, #10]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003034:	611a      	str	r2, [r3, #16]
 8003036:	e01b      	b.n	8003070 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003038:	897b      	ldrh	r3, [r7, #10]
 800303a:	11db      	asrs	r3, r3, #7
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f003 0306 	and.w	r3, r3, #6
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f063 030f 	orn	r3, r3, #15
 8003048:	b2da      	uxtb	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	490e      	ldr	r1, [pc, #56]	; (8003090 <I2C_MasterRequestWrite+0xfc>)
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f875 	bl	8003146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e010      	b.n	8003088 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003066:	897b      	ldrh	r3, [r7, #10]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	4907      	ldr	r1, [pc, #28]	; (8003094 <I2C_MasterRequestWrite+0x100>)
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f865 	bl	8003146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	00010008 	.word	0x00010008
 8003094:	00010002 	.word	0x00010002

08003098 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	4613      	mov	r3, r2
 80030a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030a8:	e025      	b.n	80030f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b0:	d021      	beq.n	80030f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b2:	f7ff f89b 	bl	80021ec <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d302      	bcc.n	80030c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d116      	bne.n	80030f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f043 0220 	orr.w	r2, r3, #32
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e023      	b.n	800313e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	0c1b      	lsrs	r3, r3, #16
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d10d      	bne.n	800311c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4013      	ands	r3, r2
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	bf0c      	ite	eq
 8003112:	2301      	moveq	r3, #1
 8003114:	2300      	movne	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	e00c      	b.n	8003136 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4013      	ands	r3, r2
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	429a      	cmp	r2, r3
 800313a:	d0b6      	beq.n	80030aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003154:	e051      	b.n	80031fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003164:	d123      	bne.n	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003174:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800317e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f043 0204 	orr.w	r2, r3, #4
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e046      	b.n	800323c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031b4:	d021      	beq.n	80031fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b6:	f7ff f819 	bl	80021ec <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d302      	bcc.n	80031cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d116      	bne.n	80031fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f043 0220 	orr.w	r2, r3, #32
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e020      	b.n	800323c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	0c1b      	lsrs	r3, r3, #16
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d10c      	bne.n	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	43da      	mvns	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4013      	ands	r3, r2
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	bf14      	ite	ne
 8003216:	2301      	movne	r3, #1
 8003218:	2300      	moveq	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	e00b      	b.n	8003236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	43da      	mvns	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	4013      	ands	r3, r2
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf14      	ite	ne
 8003230:	2301      	movne	r3, #1
 8003232:	2300      	moveq	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d18d      	bne.n	8003156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003250:	e02d      	b.n	80032ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f878 	bl	8003348 <I2C_IsAcknowledgeFailed>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e02d      	b.n	80032be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003268:	d021      	beq.n	80032ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326a:	f7fe ffbf 	bl	80021ec <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	429a      	cmp	r2, r3
 8003278:	d302      	bcc.n	8003280 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d116      	bne.n	80032ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2220      	movs	r2, #32
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f043 0220 	orr.w	r2, r3, #32
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e007      	b.n	80032be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b8:	2b80      	cmp	r3, #128	; 0x80
 80032ba:	d1ca      	bne.n	8003252 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032d2:	e02d      	b.n	8003330 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f837 	bl	8003348 <I2C_IsAcknowledgeFailed>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e02d      	b.n	8003340 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ea:	d021      	beq.n	8003330 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ec:	f7fe ff7e 	bl	80021ec <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d302      	bcc.n	8003302 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d116      	bne.n	8003330 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e007      	b.n	8003340 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d1ca      	bne.n	80032d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335e:	d11b      	bne.n	8003398 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003368:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f043 0204 	orr.w	r2, r3, #4
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e272      	b.n	800389c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 8087 	beq.w	80034d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033c4:	4b92      	ldr	r3, [pc, #584]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d00c      	beq.n	80033ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033d0:	4b8f      	ldr	r3, [pc, #572]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d112      	bne.n	8003402 <HAL_RCC_OscConfig+0x5e>
 80033dc:	4b8c      	ldr	r3, [pc, #560]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e8:	d10b      	bne.n	8003402 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ea:	4b89      	ldr	r3, [pc, #548]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d06c      	beq.n	80034d0 <HAL_RCC_OscConfig+0x12c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d168      	bne.n	80034d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e24c      	b.n	800389c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340a:	d106      	bne.n	800341a <HAL_RCC_OscConfig+0x76>
 800340c:	4b80      	ldr	r3, [pc, #512]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a7f      	ldr	r2, [pc, #508]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	e02e      	b.n	8003478 <HAL_RCC_OscConfig+0xd4>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10c      	bne.n	800343c <HAL_RCC_OscConfig+0x98>
 8003422:	4b7b      	ldr	r3, [pc, #492]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a7a      	ldr	r2, [pc, #488]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	4b78      	ldr	r3, [pc, #480]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a77      	ldr	r2, [pc, #476]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	e01d      	b.n	8003478 <HAL_RCC_OscConfig+0xd4>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003444:	d10c      	bne.n	8003460 <HAL_RCC_OscConfig+0xbc>
 8003446:	4b72      	ldr	r3, [pc, #456]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a71      	ldr	r2, [pc, #452]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 800344c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	4b6f      	ldr	r3, [pc, #444]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a6e      	ldr	r2, [pc, #440]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	e00b      	b.n	8003478 <HAL_RCC_OscConfig+0xd4>
 8003460:	4b6b      	ldr	r3, [pc, #428]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a6a      	ldr	r2, [pc, #424]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	4b68      	ldr	r3, [pc, #416]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a67      	ldr	r2, [pc, #412]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003476:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d013      	beq.n	80034a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7fe feb4 	bl	80021ec <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003488:	f7fe feb0 	bl	80021ec <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	; 0x64
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e200      	b.n	800389c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349a:	4b5d      	ldr	r3, [pc, #372]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0xe4>
 80034a6:	e014      	b.n	80034d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a8:	f7fe fea0 	bl	80021ec <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b0:	f7fe fe9c 	bl	80021ec <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b64      	cmp	r3, #100	; 0x64
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e1ec      	b.n	800389c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c2:	4b53      	ldr	r3, [pc, #332]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x10c>
 80034ce:	e000      	b.n	80034d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d063      	beq.n	80035a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034de:	4b4c      	ldr	r3, [pc, #304]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00b      	beq.n	8003502 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034ea:	4b49      	ldr	r3, [pc, #292]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d11c      	bne.n	8003530 <HAL_RCC_OscConfig+0x18c>
 80034f6:	4b46      	ldr	r3, [pc, #280]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d116      	bne.n	8003530 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003502:	4b43      	ldr	r3, [pc, #268]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_RCC_OscConfig+0x176>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d001      	beq.n	800351a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e1c0      	b.n	800389c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351a:	4b3d      	ldr	r3, [pc, #244]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4939      	ldr	r1, [pc, #228]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352e:	e03a      	b.n	80035a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d020      	beq.n	800357a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003538:	4b36      	ldr	r3, [pc, #216]	; (8003614 <HAL_RCC_OscConfig+0x270>)
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353e:	f7fe fe55 	bl	80021ec <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003546:	f7fe fe51 	bl	80021ec <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e1a1      	b.n	800389c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003558:	4b2d      	ldr	r3, [pc, #180]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003564:	4b2a      	ldr	r3, [pc, #168]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4927      	ldr	r1, [pc, #156]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003574:	4313      	orrs	r3, r2
 8003576:	600b      	str	r3, [r1, #0]
 8003578:	e015      	b.n	80035a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800357a:	4b26      	ldr	r3, [pc, #152]	; (8003614 <HAL_RCC_OscConfig+0x270>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fe fe34 	bl	80021ec <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003588:	f7fe fe30 	bl	80021ec <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e180      	b.n	800389c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359a:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d03a      	beq.n	8003628 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d019      	beq.n	80035ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ba:	4b17      	ldr	r3, [pc, #92]	; (8003618 <HAL_RCC_OscConfig+0x274>)
 80035bc:	2201      	movs	r2, #1
 80035be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c0:	f7fe fe14 	bl	80021ec <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c8:	f7fe fe10 	bl	80021ec <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e160      	b.n	800389c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035da:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035e6:	2001      	movs	r0, #1
 80035e8:	f000 fad8 	bl	8003b9c <RCC_Delay>
 80035ec:	e01c      	b.n	8003628 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <HAL_RCC_OscConfig+0x274>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f4:	f7fe fdfa 	bl	80021ec <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035fa:	e00f      	b.n	800361c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fc:	f7fe fdf6 	bl	80021ec <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d908      	bls.n	800361c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e146      	b.n	800389c <HAL_RCC_OscConfig+0x4f8>
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000
 8003614:	42420000 	.word	0x42420000
 8003618:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800361c:	4b92      	ldr	r3, [pc, #584]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1e9      	bne.n	80035fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80a6 	beq.w	8003782 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003636:	2300      	movs	r3, #0
 8003638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363a:	4b8b      	ldr	r3, [pc, #556]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10d      	bne.n	8003662 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003646:	4b88      	ldr	r3, [pc, #544]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	4a87      	ldr	r2, [pc, #540]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003650:	61d3      	str	r3, [r2, #28]
 8003652:	4b85      	ldr	r3, [pc, #532]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800365e:	2301      	movs	r3, #1
 8003660:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003662:	4b82      	ldr	r3, [pc, #520]	; (800386c <HAL_RCC_OscConfig+0x4c8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d118      	bne.n	80036a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800366e:	4b7f      	ldr	r3, [pc, #508]	; (800386c <HAL_RCC_OscConfig+0x4c8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a7e      	ldr	r2, [pc, #504]	; (800386c <HAL_RCC_OscConfig+0x4c8>)
 8003674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367a:	f7fe fdb7 	bl	80021ec <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003682:	f7fe fdb3 	bl	80021ec <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b64      	cmp	r3, #100	; 0x64
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e103      	b.n	800389c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003694:	4b75      	ldr	r3, [pc, #468]	; (800386c <HAL_RCC_OscConfig+0x4c8>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d106      	bne.n	80036b6 <HAL_RCC_OscConfig+0x312>
 80036a8:	4b6f      	ldr	r3, [pc, #444]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	4a6e      	ldr	r2, [pc, #440]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6213      	str	r3, [r2, #32]
 80036b4:	e02d      	b.n	8003712 <HAL_RCC_OscConfig+0x36e>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x334>
 80036be:	4b6a      	ldr	r3, [pc, #424]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4a69      	ldr	r2, [pc, #420]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	6213      	str	r3, [r2, #32]
 80036ca:	4b67      	ldr	r3, [pc, #412]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	4a66      	ldr	r2, [pc, #408]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	f023 0304 	bic.w	r3, r3, #4
 80036d4:	6213      	str	r3, [r2, #32]
 80036d6:	e01c      	b.n	8003712 <HAL_RCC_OscConfig+0x36e>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b05      	cmp	r3, #5
 80036de:	d10c      	bne.n	80036fa <HAL_RCC_OscConfig+0x356>
 80036e0:	4b61      	ldr	r3, [pc, #388]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	4a60      	ldr	r2, [pc, #384]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	f043 0304 	orr.w	r3, r3, #4
 80036ea:	6213      	str	r3, [r2, #32]
 80036ec:	4b5e      	ldr	r3, [pc, #376]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	4a5d      	ldr	r2, [pc, #372]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	6213      	str	r3, [r2, #32]
 80036f8:	e00b      	b.n	8003712 <HAL_RCC_OscConfig+0x36e>
 80036fa:	4b5b      	ldr	r3, [pc, #364]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	4a5a      	ldr	r2, [pc, #360]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	6213      	str	r3, [r2, #32]
 8003706:	4b58      	ldr	r3, [pc, #352]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	4a57      	ldr	r2, [pc, #348]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 800370c:	f023 0304 	bic.w	r3, r3, #4
 8003710:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d015      	beq.n	8003746 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371a:	f7fe fd67 	bl	80021ec <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003720:	e00a      	b.n	8003738 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003722:	f7fe fd63 	bl	80021ec <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003730:	4293      	cmp	r3, r2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e0b1      	b.n	800389c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003738:	4b4b      	ldr	r3, [pc, #300]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0ee      	beq.n	8003722 <HAL_RCC_OscConfig+0x37e>
 8003744:	e014      	b.n	8003770 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003746:	f7fe fd51 	bl	80021ec <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374c:	e00a      	b.n	8003764 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374e:	f7fe fd4d 	bl	80021ec <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	f241 3288 	movw	r2, #5000	; 0x1388
 800375c:	4293      	cmp	r3, r2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e09b      	b.n	800389c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003764:	4b40      	ldr	r3, [pc, #256]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1ee      	bne.n	800374e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d105      	bne.n	8003782 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003776:	4b3c      	ldr	r3, [pc, #240]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	4a3b      	ldr	r2, [pc, #236]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 800377c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003780:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 8087 	beq.w	800389a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800378c:	4b36      	ldr	r3, [pc, #216]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 030c 	and.w	r3, r3, #12
 8003794:	2b08      	cmp	r3, #8
 8003796:	d061      	beq.n	800385c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d146      	bne.n	800382e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a0:	4b33      	ldr	r3, [pc, #204]	; (8003870 <HAL_RCC_OscConfig+0x4cc>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a6:	f7fe fd21 	bl	80021ec <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ae:	f7fe fd1d 	bl	80021ec <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e06d      	b.n	800389c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c0:	4b29      	ldr	r3, [pc, #164]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f0      	bne.n	80037ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d4:	d108      	bne.n	80037e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037d6:	4b24      	ldr	r3, [pc, #144]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	4921      	ldr	r1, [pc, #132]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e8:	4b1f      	ldr	r3, [pc, #124]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a19      	ldr	r1, [r3, #32]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	430b      	orrs	r3, r1
 80037fa:	491b      	ldr	r1, [pc, #108]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003800:	4b1b      	ldr	r3, [pc, #108]	; (8003870 <HAL_RCC_OscConfig+0x4cc>)
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003806:	f7fe fcf1 	bl	80021ec <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380e:	f7fe fced 	bl	80021ec <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e03d      	b.n	800389c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003820:	4b11      	ldr	r3, [pc, #68]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x46a>
 800382c:	e035      	b.n	800389a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382e:	4b10      	ldr	r3, [pc, #64]	; (8003870 <HAL_RCC_OscConfig+0x4cc>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003834:	f7fe fcda 	bl	80021ec <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383c:	f7fe fcd6 	bl	80021ec <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e026      	b.n	800389c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_RCC_OscConfig+0x4c4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x498>
 800385a:	e01e      	b.n	800389a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d107      	bne.n	8003874 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e019      	b.n	800389c <HAL_RCC_OscConfig+0x4f8>
 8003868:	40021000 	.word	0x40021000
 800386c:	40007000 	.word	0x40007000
 8003870:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_RCC_OscConfig+0x500>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	429a      	cmp	r2, r3
 8003886:	d106      	bne.n	8003896 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003892:	429a      	cmp	r2, r3
 8003894:	d001      	beq.n	800389a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40021000 	.word	0x40021000

080038a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0d0      	b.n	8003a5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038bc:	4b6a      	ldr	r3, [pc, #424]	; (8003a68 <HAL_RCC_ClockConfig+0x1c0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d910      	bls.n	80038ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4b67      	ldr	r3, [pc, #412]	; (8003a68 <HAL_RCC_ClockConfig+0x1c0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 0207 	bic.w	r2, r3, #7
 80038d2:	4965      	ldr	r1, [pc, #404]	; (8003a68 <HAL_RCC_ClockConfig+0x1c0>)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038da:	4b63      	ldr	r3, [pc, #396]	; (8003a68 <HAL_RCC_ClockConfig+0x1c0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0b8      	b.n	8003a5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d020      	beq.n	800393a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003904:	4b59      	ldr	r3, [pc, #356]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4a58      	ldr	r2, [pc, #352]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800390e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800391c:	4b53      	ldr	r3, [pc, #332]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4a52      	ldr	r2, [pc, #328]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003922:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003926:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003928:	4b50      	ldr	r3, [pc, #320]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	494d      	ldr	r1, [pc, #308]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d040      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d107      	bne.n	800395e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394e:	4b47      	ldr	r3, [pc, #284]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d115      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e07f      	b.n	8003a5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d107      	bne.n	8003976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003966:	4b41      	ldr	r3, [pc, #260]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e073      	b.n	8003a5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003976:	4b3d      	ldr	r3, [pc, #244]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e06b      	b.n	8003a5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003986:	4b39      	ldr	r3, [pc, #228]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f023 0203 	bic.w	r2, r3, #3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4936      	ldr	r1, [pc, #216]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003994:	4313      	orrs	r3, r2
 8003996:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003998:	f7fe fc28 	bl	80021ec <HAL_GetTick>
 800399c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399e:	e00a      	b.n	80039b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a0:	f7fe fc24 	bl	80021ec <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e053      	b.n	8003a5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	4b2d      	ldr	r3, [pc, #180]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 020c 	and.w	r2, r3, #12
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d1eb      	bne.n	80039a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039c8:	4b27      	ldr	r3, [pc, #156]	; (8003a68 <HAL_RCC_ClockConfig+0x1c0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d210      	bcs.n	80039f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <HAL_RCC_ClockConfig+0x1c0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 0207 	bic.w	r2, r3, #7
 80039de:	4922      	ldr	r1, [pc, #136]	; (8003a68 <HAL_RCC_ClockConfig+0x1c0>)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b20      	ldr	r3, [pc, #128]	; (8003a68 <HAL_RCC_ClockConfig+0x1c0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e032      	b.n	8003a5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a04:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	4916      	ldr	r1, [pc, #88]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d009      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a22:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	490e      	ldr	r1, [pc, #56]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a36:	f000 f821 	bl	8003a7c <HAL_RCC_GetSysClockFreq>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	490a      	ldr	r1, [pc, #40]	; (8003a70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a48:	5ccb      	ldrb	r3, [r1, r3]
 8003a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4e:	4a09      	ldr	r2, [pc, #36]	; (8003a74 <HAL_RCC_ClockConfig+0x1cc>)
 8003a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <HAL_RCC_ClockConfig+0x1d0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe fb86 	bl	8002168 <HAL_InitTick>

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40022000 	.word	0x40022000
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	0800aa84 	.word	0x0800aa84
 8003a74:	20000014 	.word	0x20000014
 8003a78:	20000018 	.word	0x20000018

08003a7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a7c:	b490      	push	{r4, r7}
 8003a7e:	b08a      	sub	sp, #40	; 0x28
 8003a80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a82:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <HAL_RCC_GetSysClockFreq+0xac>)
 8003a84:	1d3c      	adds	r4, r7, #4
 8003a86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a8c:	f240 2301 	movw	r3, #513	; 0x201
 8003a90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61fb      	str	r3, [r7, #28]
 8003a96:	2300      	movs	r3, #0
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003aa6:	4b21      	ldr	r3, [pc, #132]	; (8003b2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d002      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0x40>
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d003      	beq.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x46>
 8003aba:	e02b      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003abc:	4b1c      	ldr	r3, [pc, #112]	; (8003b30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003abe:	623b      	str	r3, [r7, #32]
      break;
 8003ac0:	e02b      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	0c9b      	lsrs	r3, r3, #18
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	3328      	adds	r3, #40	; 0x28
 8003acc:	443b      	add	r3, r7
 8003ace:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ad2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d012      	beq.n	8003b04 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ade:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	0c5b      	lsrs	r3, r3, #17
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	3328      	adds	r3, #40	; 0x28
 8003aea:	443b      	add	r3, r7
 8003aec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003af0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	4a0e      	ldr	r2, [pc, #56]	; (8003b30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003af6:	fb03 f202 	mul.w	r2, r3, r2
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
 8003b02:	e004      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	4a0b      	ldr	r2, [pc, #44]	; (8003b34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b08:	fb02 f303 	mul.w	r3, r2, r3
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	623b      	str	r3, [r7, #32]
      break;
 8003b12:	e002      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b16:	623b      	str	r3, [r7, #32]
      break;
 8003b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3728      	adds	r7, #40	; 0x28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc90      	pop	{r4, r7}
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	080089cc 	.word	0x080089cc
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	007a1200 	.word	0x007a1200
 8003b34:	003d0900 	.word	0x003d0900

08003b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b3c:	4b02      	ldr	r3, [pc, #8]	; (8003b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr
 8003b48:	20000014 	.word	0x20000014

08003b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b50:	f7ff fff2 	bl	8003b38 <HAL_RCC_GetHCLKFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	0a1b      	lsrs	r3, r3, #8
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4903      	ldr	r1, [pc, #12]	; (8003b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	0800aa94 	.word	0x0800aa94

08003b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b78:	f7ff ffde 	bl	8003b38 <HAL_RCC_GetHCLKFreq>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	0adb      	lsrs	r3, r3, #11
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	4903      	ldr	r1, [pc, #12]	; (8003b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b8a:	5ccb      	ldrb	r3, [r1, r3]
 8003b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40021000 	.word	0x40021000
 8003b98:	0800aa94 	.word	0x0800aa94

08003b9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <RCC_Delay+0x34>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <RCC_Delay+0x38>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	0a5b      	lsrs	r3, r3, #9
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bb8:	bf00      	nop
  }
  while (Delay --);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1e5a      	subs	r2, r3, #1
 8003bbe:	60fa      	str	r2, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f9      	bne.n	8003bb8 <RCC_Delay+0x1c>
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	20000014 	.word	0x20000014
 8003bd4:	10624dd3 	.word	0x10624dd3

08003bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e03f      	b.n	8003c6a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fe f888 	bl	8001d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2224      	movs	r2, #36	; 0x24
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fbb3 	bl	8004388 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d11d      	bne.n	8003cc8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <HAL_UART_Receive_IT+0x26>
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e016      	b.n	8003cca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_UART_Receive_IT+0x38>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e00f      	b.n	8003cca <HAL_UART_Receive_IT+0x58>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f9d8 	bl	8004074 <UART_Start_Receive_IT>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	e000      	b.n	8003cca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003cc8:	2302      	movs	r3, #2
  }
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	; 0x28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10d      	bne.n	8003d26 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_UART_IRQHandler+0x52>
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fa88 	bl	8004234 <UART_Receive_IT>
      return;
 8003d24:	e17b      	b.n	800401e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80b1 	beq.w	8003e90 <HAL_UART_IRQHandler+0x1bc>
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d105      	bne.n	8003d44 <HAL_UART_IRQHandler+0x70>
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 80a6 	beq.w	8003e90 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_UART_IRQHandler+0x90>
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f043 0201 	orr.w	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_UART_IRQHandler+0xb0>
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	f043 0202 	orr.w	r2, r3, #2
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_UART_IRQHandler+0xd0>
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	f043 0204 	orr.w	r2, r3, #4
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00f      	beq.n	8003dce <HAL_UART_IRQHandler+0xfa>
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d104      	bne.n	8003dc2 <HAL_UART_IRQHandler+0xee>
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f043 0208 	orr.w	r2, r3, #8
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 811e 	beq.w	8004014 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d007      	beq.n	8003df2 <HAL_UART_IRQHandler+0x11e>
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fa21 	bl	8004234 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf14      	ite	ne
 8003e00:	2301      	movne	r3, #1
 8003e02:	2300      	moveq	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <HAL_UART_IRQHandler+0x146>
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d031      	beq.n	8003e7e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f963 	bl	80040e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d023      	beq.n	8003e76 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e3c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d013      	beq.n	8003e6e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	4a76      	ldr	r2, [pc, #472]	; (8004024 <HAL_UART_IRQHandler+0x350>)
 8003e4c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe fb1c 	bl	8002490 <HAL_DMA_Abort_IT>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d016      	beq.n	8003e8c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6c:	e00e      	b.n	8003e8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f8ec 	bl	800404c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e74:	e00a      	b.n	8003e8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f8e8 	bl	800404c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e7c:	e006      	b.n	8003e8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f8e4 	bl	800404c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e8a:	e0c3      	b.n	8004014 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e8c:	bf00      	nop
    return;
 8003e8e:	e0c1      	b.n	8004014 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	f040 80a1 	bne.w	8003fdc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 809b 	beq.w	8003fdc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8095 	beq.w	8003fdc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d04e      	beq.n	8003f74 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003ee0:	8a3b      	ldrh	r3, [r7, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 8098 	beq.w	8004018 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003eec:	8a3a      	ldrh	r2, [r7, #16]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	f080 8092 	bcs.w	8004018 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8a3a      	ldrh	r2, [r7, #16]
 8003ef8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d02b      	beq.n	8003f5c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f12:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0201 	bic.w	r2, r2, #1
 8003f22:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f32:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0210 	bic.w	r2, r2, #16
 8003f50:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe fa5f 	bl	800241a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f876 	bl	800405e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f72:	e051      	b.n	8004018 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d047      	beq.n	800401c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003f8c:	8a7b      	ldrh	r3, [r7, #18]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d044      	beq.n	800401c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fa0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0210 	bic.w	r2, r2, #16
 8003fce:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fd0:	8a7b      	ldrh	r3, [r7, #18]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f842 	bl	800405e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fda:	e01f      	b.n	800401c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x324>
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f8b8 	bl	8004166 <UART_Transmit_IT>
    return;
 8003ff6:	e012      	b.n	800401e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00d      	beq.n	800401e <HAL_UART_IRQHandler+0x34a>
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f8f9 	bl	8004204 <UART_EndTransmit_IT>
    return;
 8004012:	e004      	b.n	800401e <HAL_UART_IRQHandler+0x34a>
    return;
 8004014:	bf00      	nop
 8004016:	e002      	b.n	800401e <HAL_UART_IRQHandler+0x34a>
      return;
 8004018:	bf00      	nop
 800401a:	e000      	b.n	800401e <HAL_UART_IRQHandler+0x34a>
      return;
 800401c:	bf00      	nop
  }
}
 800401e:	3728      	adds	r7, #40	; 0x28
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	0800413f 	.word	0x0800413f

08004028 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr

0800405e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	460b      	mov	r3, r1
 8004068:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr

08004074 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	88fa      	ldrh	r2, [r7, #6]
 8004092:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2222      	movs	r2, #34	; 0x22
 800409e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0201 	orr.w	r2, r2, #1
 80040c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART 1 Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0220 	orr.w	r2, r2, #32
 80040d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr

080040e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040fc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0201 	bic.w	r2, r2, #1
 800410c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	2b01      	cmp	r3, #1
 8004114:	d107      	bne.n	8004126 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0210 	bic.w	r2, r2, #16
 8004124:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff ff77 	bl	800404c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b21      	cmp	r3, #33	; 0x21
 8004178:	d13e      	bne.n	80041f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004182:	d114      	bne.n	80041ae <UART_Transmit_IT+0x48>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d110      	bne.n	80041ae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	1c9a      	adds	r2, r3, #2
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	621a      	str	r2, [r3, #32]
 80041ac:	e008      	b.n	80041c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	1c59      	adds	r1, r3, #1
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6211      	str	r1, [r2, #32]
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	4619      	mov	r1, r3
 80041ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10f      	bne.n	80041f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	e000      	b.n	80041fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041f8:	2302      	movs	r3, #2
  }
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800421a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff feff 	bl	8004028 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b22      	cmp	r3, #34	; 0x22
 8004246:	f040 8099 	bne.w	800437c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004252:	d117      	bne.n	8004284 <UART_Receive_IT+0x50>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d113      	bne.n	8004284 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004264:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	b29b      	uxth	r3, r3
 800426e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004272:	b29a      	uxth	r2, r3
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	1c9a      	adds	r2, r3, #2
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	629a      	str	r2, [r3, #40]	; 0x28
 8004282:	e026      	b.n	80042d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004296:	d007      	beq.n	80042a8 <UART_Receive_IT+0x74>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <UART_Receive_IT+0x82>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	701a      	strb	r2, [r3, #0]
 80042b4:	e008      	b.n	80042c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29b      	uxth	r3, r3
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4619      	mov	r1, r3
 80042e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d148      	bne.n	8004378 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0220 	bic.w	r2, r2, #32
 80042f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004304:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695a      	ldr	r2, [r3, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0201 	bic.w	r2, r2, #1
 8004314:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	2b01      	cmp	r3, #1
 8004324:	d123      	bne.n	800436e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0210 	bic.w	r2, r2, #16
 800433a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b10      	cmp	r3, #16
 8004348:	d10a      	bne.n	8004360 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004364:	4619      	mov	r1, r3
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff fe79 	bl	800405e <HAL_UARTEx_RxEventCallback>
 800436c:	e002      	b.n	8004374 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff fe63 	bl	800403a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	e002      	b.n	800437e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	e000      	b.n	800437e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
  }
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043c2:	f023 030c 	bic.w	r3, r3, #12
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	430b      	orrs	r3, r1
 80043ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a2c      	ldr	r2, [pc, #176]	; (800449c <UART_SetConfig+0x114>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d103      	bne.n	80043f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043f0:	f7ff fbc0 	bl	8003b74 <HAL_RCC_GetPCLK2Freq>
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	e002      	b.n	80043fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043f8:	f7ff fba8 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 80043fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	009a      	lsls	r2, r3, #2
 8004408:	441a      	add	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	4a22      	ldr	r2, [pc, #136]	; (80044a0 <UART_SetConfig+0x118>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	0119      	lsls	r1, r3, #4
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	009a      	lsls	r2, r3, #2
 8004428:	441a      	add	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	fbb2 f2f3 	udiv	r2, r2, r3
 8004434:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <UART_SetConfig+0x118>)
 8004436:	fba3 0302 	umull	r0, r3, r3, r2
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	2064      	movs	r0, #100	; 0x64
 800443e:	fb00 f303 	mul.w	r3, r0, r3
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	3332      	adds	r3, #50	; 0x32
 8004448:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <UART_SetConfig+0x118>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004454:	4419      	add	r1, r3
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	009a      	lsls	r2, r3, #2
 8004460:	441a      	add	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	fbb2 f2f3 	udiv	r2, r2, r3
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <UART_SetConfig+0x118>)
 800446e:	fba3 0302 	umull	r0, r3, r3, r2
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	2064      	movs	r0, #100	; 0x64
 8004476:	fb00 f303 	mul.w	r3, r0, r3
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	3332      	adds	r3, #50	; 0x32
 8004480:	4a07      	ldr	r2, [pc, #28]	; (80044a0 <UART_SetConfig+0x118>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	f003 020f 	and.w	r2, r3, #15
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	440a      	add	r2, r1
 8004492:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40013800 	.word	0x40013800
 80044a0:	51eb851f 	.word	0x51eb851f

080044a4 <__errno>:
 80044a4:	4b01      	ldr	r3, [pc, #4]	; (80044ac <__errno+0x8>)
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000020 	.word	0x20000020

080044b0 <__libc_init_array>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	2600      	movs	r6, #0
 80044b4:	4d0c      	ldr	r5, [pc, #48]	; (80044e8 <__libc_init_array+0x38>)
 80044b6:	4c0d      	ldr	r4, [pc, #52]	; (80044ec <__libc_init_array+0x3c>)
 80044b8:	1b64      	subs	r4, r4, r5
 80044ba:	10a4      	asrs	r4, r4, #2
 80044bc:	42a6      	cmp	r6, r4
 80044be:	d109      	bne.n	80044d4 <__libc_init_array+0x24>
 80044c0:	f004 fa30 	bl	8008924 <_init>
 80044c4:	2600      	movs	r6, #0
 80044c6:	4d0a      	ldr	r5, [pc, #40]	; (80044f0 <__libc_init_array+0x40>)
 80044c8:	4c0a      	ldr	r4, [pc, #40]	; (80044f4 <__libc_init_array+0x44>)
 80044ca:	1b64      	subs	r4, r4, r5
 80044cc:	10a4      	asrs	r4, r4, #2
 80044ce:	42a6      	cmp	r6, r4
 80044d0:	d105      	bne.n	80044de <__libc_init_array+0x2e>
 80044d2:	bd70      	pop	{r4, r5, r6, pc}
 80044d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d8:	4798      	blx	r3
 80044da:	3601      	adds	r6, #1
 80044dc:	e7ee      	b.n	80044bc <__libc_init_array+0xc>
 80044de:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e2:	4798      	blx	r3
 80044e4:	3601      	adds	r6, #1
 80044e6:	e7f2      	b.n	80044ce <__libc_init_array+0x1e>
 80044e8:	0800af98 	.word	0x0800af98
 80044ec:	0800af98 	.word	0x0800af98
 80044f0:	0800af98 	.word	0x0800af98
 80044f4:	0800af9c 	.word	0x0800af9c

080044f8 <malloc>:
 80044f8:	4b02      	ldr	r3, [pc, #8]	; (8004504 <malloc+0xc>)
 80044fa:	4601      	mov	r1, r0
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	f000 b873 	b.w	80045e8 <_malloc_r>
 8004502:	bf00      	nop
 8004504:	20000020 	.word	0x20000020

08004508 <memset>:
 8004508:	4603      	mov	r3, r0
 800450a:	4402      	add	r2, r0
 800450c:	4293      	cmp	r3, r2
 800450e:	d100      	bne.n	8004512 <memset+0xa>
 8004510:	4770      	bx	lr
 8004512:	f803 1b01 	strb.w	r1, [r3], #1
 8004516:	e7f9      	b.n	800450c <memset+0x4>

08004518 <_free_r>:
 8004518:	b538      	push	{r3, r4, r5, lr}
 800451a:	4605      	mov	r5, r0
 800451c:	2900      	cmp	r1, #0
 800451e:	d040      	beq.n	80045a2 <_free_r+0x8a>
 8004520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004524:	1f0c      	subs	r4, r1, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	bfb8      	it	lt
 800452a:	18e4      	addlt	r4, r4, r3
 800452c:	f002 fe20 	bl	8007170 <__malloc_lock>
 8004530:	4a1c      	ldr	r2, [pc, #112]	; (80045a4 <_free_r+0x8c>)
 8004532:	6813      	ldr	r3, [r2, #0]
 8004534:	b933      	cbnz	r3, 8004544 <_free_r+0x2c>
 8004536:	6063      	str	r3, [r4, #4]
 8004538:	6014      	str	r4, [r2, #0]
 800453a:	4628      	mov	r0, r5
 800453c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004540:	f002 be1c 	b.w	800717c <__malloc_unlock>
 8004544:	42a3      	cmp	r3, r4
 8004546:	d908      	bls.n	800455a <_free_r+0x42>
 8004548:	6820      	ldr	r0, [r4, #0]
 800454a:	1821      	adds	r1, r4, r0
 800454c:	428b      	cmp	r3, r1
 800454e:	bf01      	itttt	eq
 8004550:	6819      	ldreq	r1, [r3, #0]
 8004552:	685b      	ldreq	r3, [r3, #4]
 8004554:	1809      	addeq	r1, r1, r0
 8004556:	6021      	streq	r1, [r4, #0]
 8004558:	e7ed      	b.n	8004536 <_free_r+0x1e>
 800455a:	461a      	mov	r2, r3
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	b10b      	cbz	r3, 8004564 <_free_r+0x4c>
 8004560:	42a3      	cmp	r3, r4
 8004562:	d9fa      	bls.n	800455a <_free_r+0x42>
 8004564:	6811      	ldr	r1, [r2, #0]
 8004566:	1850      	adds	r0, r2, r1
 8004568:	42a0      	cmp	r0, r4
 800456a:	d10b      	bne.n	8004584 <_free_r+0x6c>
 800456c:	6820      	ldr	r0, [r4, #0]
 800456e:	4401      	add	r1, r0
 8004570:	1850      	adds	r0, r2, r1
 8004572:	4283      	cmp	r3, r0
 8004574:	6011      	str	r1, [r2, #0]
 8004576:	d1e0      	bne.n	800453a <_free_r+0x22>
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	4401      	add	r1, r0
 800457e:	6011      	str	r1, [r2, #0]
 8004580:	6053      	str	r3, [r2, #4]
 8004582:	e7da      	b.n	800453a <_free_r+0x22>
 8004584:	d902      	bls.n	800458c <_free_r+0x74>
 8004586:	230c      	movs	r3, #12
 8004588:	602b      	str	r3, [r5, #0]
 800458a:	e7d6      	b.n	800453a <_free_r+0x22>
 800458c:	6820      	ldr	r0, [r4, #0]
 800458e:	1821      	adds	r1, r4, r0
 8004590:	428b      	cmp	r3, r1
 8004592:	bf01      	itttt	eq
 8004594:	6819      	ldreq	r1, [r3, #0]
 8004596:	685b      	ldreq	r3, [r3, #4]
 8004598:	1809      	addeq	r1, r1, r0
 800459a:	6021      	streq	r1, [r4, #0]
 800459c:	6063      	str	r3, [r4, #4]
 800459e:	6054      	str	r4, [r2, #4]
 80045a0:	e7cb      	b.n	800453a <_free_r+0x22>
 80045a2:	bd38      	pop	{r3, r4, r5, pc}
 80045a4:	20000848 	.word	0x20000848

080045a8 <sbrk_aligned>:
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	4e0e      	ldr	r6, [pc, #56]	; (80045e4 <sbrk_aligned+0x3c>)
 80045ac:	460c      	mov	r4, r1
 80045ae:	6831      	ldr	r1, [r6, #0]
 80045b0:	4605      	mov	r5, r0
 80045b2:	b911      	cbnz	r1, 80045ba <sbrk_aligned+0x12>
 80045b4:	f000 fcec 	bl	8004f90 <_sbrk_r>
 80045b8:	6030      	str	r0, [r6, #0]
 80045ba:	4621      	mov	r1, r4
 80045bc:	4628      	mov	r0, r5
 80045be:	f000 fce7 	bl	8004f90 <_sbrk_r>
 80045c2:	1c43      	adds	r3, r0, #1
 80045c4:	d00a      	beq.n	80045dc <sbrk_aligned+0x34>
 80045c6:	1cc4      	adds	r4, r0, #3
 80045c8:	f024 0403 	bic.w	r4, r4, #3
 80045cc:	42a0      	cmp	r0, r4
 80045ce:	d007      	beq.n	80045e0 <sbrk_aligned+0x38>
 80045d0:	1a21      	subs	r1, r4, r0
 80045d2:	4628      	mov	r0, r5
 80045d4:	f000 fcdc 	bl	8004f90 <_sbrk_r>
 80045d8:	3001      	adds	r0, #1
 80045da:	d101      	bne.n	80045e0 <sbrk_aligned+0x38>
 80045dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80045e0:	4620      	mov	r0, r4
 80045e2:	bd70      	pop	{r4, r5, r6, pc}
 80045e4:	2000084c 	.word	0x2000084c

080045e8 <_malloc_r>:
 80045e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ec:	1ccd      	adds	r5, r1, #3
 80045ee:	f025 0503 	bic.w	r5, r5, #3
 80045f2:	3508      	adds	r5, #8
 80045f4:	2d0c      	cmp	r5, #12
 80045f6:	bf38      	it	cc
 80045f8:	250c      	movcc	r5, #12
 80045fa:	2d00      	cmp	r5, #0
 80045fc:	4607      	mov	r7, r0
 80045fe:	db01      	blt.n	8004604 <_malloc_r+0x1c>
 8004600:	42a9      	cmp	r1, r5
 8004602:	d905      	bls.n	8004610 <_malloc_r+0x28>
 8004604:	230c      	movs	r3, #12
 8004606:	2600      	movs	r6, #0
 8004608:	603b      	str	r3, [r7, #0]
 800460a:	4630      	mov	r0, r6
 800460c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004610:	4e2e      	ldr	r6, [pc, #184]	; (80046cc <_malloc_r+0xe4>)
 8004612:	f002 fdad 	bl	8007170 <__malloc_lock>
 8004616:	6833      	ldr	r3, [r6, #0]
 8004618:	461c      	mov	r4, r3
 800461a:	bb34      	cbnz	r4, 800466a <_malloc_r+0x82>
 800461c:	4629      	mov	r1, r5
 800461e:	4638      	mov	r0, r7
 8004620:	f7ff ffc2 	bl	80045a8 <sbrk_aligned>
 8004624:	1c43      	adds	r3, r0, #1
 8004626:	4604      	mov	r4, r0
 8004628:	d14d      	bne.n	80046c6 <_malloc_r+0xde>
 800462a:	6834      	ldr	r4, [r6, #0]
 800462c:	4626      	mov	r6, r4
 800462e:	2e00      	cmp	r6, #0
 8004630:	d140      	bne.n	80046b4 <_malloc_r+0xcc>
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	4631      	mov	r1, r6
 8004636:	4638      	mov	r0, r7
 8004638:	eb04 0803 	add.w	r8, r4, r3
 800463c:	f000 fca8 	bl	8004f90 <_sbrk_r>
 8004640:	4580      	cmp	r8, r0
 8004642:	d13a      	bne.n	80046ba <_malloc_r+0xd2>
 8004644:	6821      	ldr	r1, [r4, #0]
 8004646:	3503      	adds	r5, #3
 8004648:	1a6d      	subs	r5, r5, r1
 800464a:	f025 0503 	bic.w	r5, r5, #3
 800464e:	3508      	adds	r5, #8
 8004650:	2d0c      	cmp	r5, #12
 8004652:	bf38      	it	cc
 8004654:	250c      	movcc	r5, #12
 8004656:	4638      	mov	r0, r7
 8004658:	4629      	mov	r1, r5
 800465a:	f7ff ffa5 	bl	80045a8 <sbrk_aligned>
 800465e:	3001      	adds	r0, #1
 8004660:	d02b      	beq.n	80046ba <_malloc_r+0xd2>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	442b      	add	r3, r5
 8004666:	6023      	str	r3, [r4, #0]
 8004668:	e00e      	b.n	8004688 <_malloc_r+0xa0>
 800466a:	6822      	ldr	r2, [r4, #0]
 800466c:	1b52      	subs	r2, r2, r5
 800466e:	d41e      	bmi.n	80046ae <_malloc_r+0xc6>
 8004670:	2a0b      	cmp	r2, #11
 8004672:	d916      	bls.n	80046a2 <_malloc_r+0xba>
 8004674:	1961      	adds	r1, r4, r5
 8004676:	42a3      	cmp	r3, r4
 8004678:	6025      	str	r5, [r4, #0]
 800467a:	bf18      	it	ne
 800467c:	6059      	strne	r1, [r3, #4]
 800467e:	6863      	ldr	r3, [r4, #4]
 8004680:	bf08      	it	eq
 8004682:	6031      	streq	r1, [r6, #0]
 8004684:	5162      	str	r2, [r4, r5]
 8004686:	604b      	str	r3, [r1, #4]
 8004688:	4638      	mov	r0, r7
 800468a:	f104 060b 	add.w	r6, r4, #11
 800468e:	f002 fd75 	bl	800717c <__malloc_unlock>
 8004692:	f026 0607 	bic.w	r6, r6, #7
 8004696:	1d23      	adds	r3, r4, #4
 8004698:	1af2      	subs	r2, r6, r3
 800469a:	d0b6      	beq.n	800460a <_malloc_r+0x22>
 800469c:	1b9b      	subs	r3, r3, r6
 800469e:	50a3      	str	r3, [r4, r2]
 80046a0:	e7b3      	b.n	800460a <_malloc_r+0x22>
 80046a2:	6862      	ldr	r2, [r4, #4]
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	bf0c      	ite	eq
 80046a8:	6032      	streq	r2, [r6, #0]
 80046aa:	605a      	strne	r2, [r3, #4]
 80046ac:	e7ec      	b.n	8004688 <_malloc_r+0xa0>
 80046ae:	4623      	mov	r3, r4
 80046b0:	6864      	ldr	r4, [r4, #4]
 80046b2:	e7b2      	b.n	800461a <_malloc_r+0x32>
 80046b4:	4634      	mov	r4, r6
 80046b6:	6876      	ldr	r6, [r6, #4]
 80046b8:	e7b9      	b.n	800462e <_malloc_r+0x46>
 80046ba:	230c      	movs	r3, #12
 80046bc:	4638      	mov	r0, r7
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	f002 fd5c 	bl	800717c <__malloc_unlock>
 80046c4:	e7a1      	b.n	800460a <_malloc_r+0x22>
 80046c6:	6025      	str	r5, [r4, #0]
 80046c8:	e7de      	b.n	8004688 <_malloc_r+0xa0>
 80046ca:	bf00      	nop
 80046cc:	20000848 	.word	0x20000848

080046d0 <__cvt>:
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d6:	461f      	mov	r7, r3
 80046d8:	bfbb      	ittet	lt
 80046da:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80046de:	461f      	movlt	r7, r3
 80046e0:	2300      	movge	r3, #0
 80046e2:	232d      	movlt	r3, #45	; 0x2d
 80046e4:	b088      	sub	sp, #32
 80046e6:	4614      	mov	r4, r2
 80046e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80046ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80046ec:	7013      	strb	r3, [r2, #0]
 80046ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80046f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80046f4:	f023 0820 	bic.w	r8, r3, #32
 80046f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046fc:	d005      	beq.n	800470a <__cvt+0x3a>
 80046fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004702:	d100      	bne.n	8004706 <__cvt+0x36>
 8004704:	3501      	adds	r5, #1
 8004706:	2302      	movs	r3, #2
 8004708:	e000      	b.n	800470c <__cvt+0x3c>
 800470a:	2303      	movs	r3, #3
 800470c:	aa07      	add	r2, sp, #28
 800470e:	9204      	str	r2, [sp, #16]
 8004710:	aa06      	add	r2, sp, #24
 8004712:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004716:	e9cd 3500 	strd	r3, r5, [sp]
 800471a:	4622      	mov	r2, r4
 800471c:	463b      	mov	r3, r7
 800471e:	f001 fb8f 	bl	8005e40 <_dtoa_r>
 8004722:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004726:	4606      	mov	r6, r0
 8004728:	d102      	bne.n	8004730 <__cvt+0x60>
 800472a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800472c:	07db      	lsls	r3, r3, #31
 800472e:	d522      	bpl.n	8004776 <__cvt+0xa6>
 8004730:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004734:	eb06 0905 	add.w	r9, r6, r5
 8004738:	d110      	bne.n	800475c <__cvt+0x8c>
 800473a:	7833      	ldrb	r3, [r6, #0]
 800473c:	2b30      	cmp	r3, #48	; 0x30
 800473e:	d10a      	bne.n	8004756 <__cvt+0x86>
 8004740:	2200      	movs	r2, #0
 8004742:	2300      	movs	r3, #0
 8004744:	4620      	mov	r0, r4
 8004746:	4639      	mov	r1, r7
 8004748:	f7fc f938 	bl	80009bc <__aeabi_dcmpeq>
 800474c:	b918      	cbnz	r0, 8004756 <__cvt+0x86>
 800474e:	f1c5 0501 	rsb	r5, r5, #1
 8004752:	f8ca 5000 	str.w	r5, [sl]
 8004756:	f8da 3000 	ldr.w	r3, [sl]
 800475a:	4499      	add	r9, r3
 800475c:	2200      	movs	r2, #0
 800475e:	2300      	movs	r3, #0
 8004760:	4620      	mov	r0, r4
 8004762:	4639      	mov	r1, r7
 8004764:	f7fc f92a 	bl	80009bc <__aeabi_dcmpeq>
 8004768:	b108      	cbz	r0, 800476e <__cvt+0x9e>
 800476a:	f8cd 901c 	str.w	r9, [sp, #28]
 800476e:	2230      	movs	r2, #48	; 0x30
 8004770:	9b07      	ldr	r3, [sp, #28]
 8004772:	454b      	cmp	r3, r9
 8004774:	d307      	bcc.n	8004786 <__cvt+0xb6>
 8004776:	4630      	mov	r0, r6
 8004778:	9b07      	ldr	r3, [sp, #28]
 800477a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800477c:	1b9b      	subs	r3, r3, r6
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	b008      	add	sp, #32
 8004782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004786:	1c59      	adds	r1, r3, #1
 8004788:	9107      	str	r1, [sp, #28]
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e7f0      	b.n	8004770 <__cvt+0xa0>

0800478e <__exponent>:
 800478e:	4603      	mov	r3, r0
 8004790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004792:	2900      	cmp	r1, #0
 8004794:	f803 2b02 	strb.w	r2, [r3], #2
 8004798:	bfb6      	itet	lt
 800479a:	222d      	movlt	r2, #45	; 0x2d
 800479c:	222b      	movge	r2, #43	; 0x2b
 800479e:	4249      	neglt	r1, r1
 80047a0:	2909      	cmp	r1, #9
 80047a2:	7042      	strb	r2, [r0, #1]
 80047a4:	dd2b      	ble.n	80047fe <__exponent+0x70>
 80047a6:	f10d 0407 	add.w	r4, sp, #7
 80047aa:	46a4      	mov	ip, r4
 80047ac:	270a      	movs	r7, #10
 80047ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80047b2:	460a      	mov	r2, r1
 80047b4:	46a6      	mov	lr, r4
 80047b6:	fb07 1516 	mls	r5, r7, r6, r1
 80047ba:	2a63      	cmp	r2, #99	; 0x63
 80047bc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80047c0:	4631      	mov	r1, r6
 80047c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80047c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80047ca:	dcf0      	bgt.n	80047ae <__exponent+0x20>
 80047cc:	3130      	adds	r1, #48	; 0x30
 80047ce:	f1ae 0502 	sub.w	r5, lr, #2
 80047d2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80047d6:	4629      	mov	r1, r5
 80047d8:	1c44      	adds	r4, r0, #1
 80047da:	4561      	cmp	r1, ip
 80047dc:	d30a      	bcc.n	80047f4 <__exponent+0x66>
 80047de:	f10d 0209 	add.w	r2, sp, #9
 80047e2:	eba2 020e 	sub.w	r2, r2, lr
 80047e6:	4565      	cmp	r5, ip
 80047e8:	bf88      	it	hi
 80047ea:	2200      	movhi	r2, #0
 80047ec:	4413      	add	r3, r2
 80047ee:	1a18      	subs	r0, r3, r0
 80047f0:	b003      	add	sp, #12
 80047f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047f8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80047fc:	e7ed      	b.n	80047da <__exponent+0x4c>
 80047fe:	2330      	movs	r3, #48	; 0x30
 8004800:	3130      	adds	r1, #48	; 0x30
 8004802:	7083      	strb	r3, [r0, #2]
 8004804:	70c1      	strb	r1, [r0, #3]
 8004806:	1d03      	adds	r3, r0, #4
 8004808:	e7f1      	b.n	80047ee <__exponent+0x60>
	...

0800480c <_printf_float>:
 800480c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004810:	b091      	sub	sp, #68	; 0x44
 8004812:	460c      	mov	r4, r1
 8004814:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004818:	4616      	mov	r6, r2
 800481a:	461f      	mov	r7, r3
 800481c:	4605      	mov	r5, r0
 800481e:	f002 fc75 	bl	800710c <_localeconv_r>
 8004822:	6803      	ldr	r3, [r0, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	9309      	str	r3, [sp, #36]	; 0x24
 8004828:	f7fb fc9c 	bl	8000164 <strlen>
 800482c:	2300      	movs	r3, #0
 800482e:	930e      	str	r3, [sp, #56]	; 0x38
 8004830:	f8d8 3000 	ldr.w	r3, [r8]
 8004834:	900a      	str	r0, [sp, #40]	; 0x28
 8004836:	3307      	adds	r3, #7
 8004838:	f023 0307 	bic.w	r3, r3, #7
 800483c:	f103 0208 	add.w	r2, r3, #8
 8004840:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004844:	f8d4 b000 	ldr.w	fp, [r4]
 8004848:	f8c8 2000 	str.w	r2, [r8]
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004854:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004858:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800485c:	930b      	str	r3, [sp, #44]	; 0x2c
 800485e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004862:	4640      	mov	r0, r8
 8004864:	4b9c      	ldr	r3, [pc, #624]	; (8004ad8 <_printf_float+0x2cc>)
 8004866:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004868:	f7fc f8da 	bl	8000a20 <__aeabi_dcmpun>
 800486c:	bb70      	cbnz	r0, 80048cc <_printf_float+0xc0>
 800486e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004872:	4640      	mov	r0, r8
 8004874:	4b98      	ldr	r3, [pc, #608]	; (8004ad8 <_printf_float+0x2cc>)
 8004876:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004878:	f7fc f8b4 	bl	80009e4 <__aeabi_dcmple>
 800487c:	bb30      	cbnz	r0, 80048cc <_printf_float+0xc0>
 800487e:	2200      	movs	r2, #0
 8004880:	2300      	movs	r3, #0
 8004882:	4640      	mov	r0, r8
 8004884:	4651      	mov	r1, sl
 8004886:	f7fc f8a3 	bl	80009d0 <__aeabi_dcmplt>
 800488a:	b110      	cbz	r0, 8004892 <_printf_float+0x86>
 800488c:	232d      	movs	r3, #45	; 0x2d
 800488e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004892:	4b92      	ldr	r3, [pc, #584]	; (8004adc <_printf_float+0x2d0>)
 8004894:	4892      	ldr	r0, [pc, #584]	; (8004ae0 <_printf_float+0x2d4>)
 8004896:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800489a:	bf94      	ite	ls
 800489c:	4698      	movls	r8, r3
 800489e:	4680      	movhi	r8, r0
 80048a0:	2303      	movs	r3, #3
 80048a2:	f04f 0a00 	mov.w	sl, #0
 80048a6:	6123      	str	r3, [r4, #16]
 80048a8:	f02b 0304 	bic.w	r3, fp, #4
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	4633      	mov	r3, r6
 80048b0:	4621      	mov	r1, r4
 80048b2:	4628      	mov	r0, r5
 80048b4:	9700      	str	r7, [sp, #0]
 80048b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80048b8:	f000 f9d4 	bl	8004c64 <_printf_common>
 80048bc:	3001      	adds	r0, #1
 80048be:	f040 8090 	bne.w	80049e2 <_printf_float+0x1d6>
 80048c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048c6:	b011      	add	sp, #68	; 0x44
 80048c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048cc:	4642      	mov	r2, r8
 80048ce:	4653      	mov	r3, sl
 80048d0:	4640      	mov	r0, r8
 80048d2:	4651      	mov	r1, sl
 80048d4:	f7fc f8a4 	bl	8000a20 <__aeabi_dcmpun>
 80048d8:	b148      	cbz	r0, 80048ee <_printf_float+0xe2>
 80048da:	f1ba 0f00 	cmp.w	sl, #0
 80048de:	bfb8      	it	lt
 80048e0:	232d      	movlt	r3, #45	; 0x2d
 80048e2:	4880      	ldr	r0, [pc, #512]	; (8004ae4 <_printf_float+0x2d8>)
 80048e4:	bfb8      	it	lt
 80048e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80048ea:	4b7f      	ldr	r3, [pc, #508]	; (8004ae8 <_printf_float+0x2dc>)
 80048ec:	e7d3      	b.n	8004896 <_printf_float+0x8a>
 80048ee:	6863      	ldr	r3, [r4, #4]
 80048f0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	d142      	bne.n	800497e <_printf_float+0x172>
 80048f8:	2306      	movs	r3, #6
 80048fa:	6063      	str	r3, [r4, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	9206      	str	r2, [sp, #24]
 8004900:	aa0e      	add	r2, sp, #56	; 0x38
 8004902:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004906:	aa0d      	add	r2, sp, #52	; 0x34
 8004908:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800490c:	9203      	str	r2, [sp, #12]
 800490e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004912:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004916:	6023      	str	r3, [r4, #0]
 8004918:	6863      	ldr	r3, [r4, #4]
 800491a:	4642      	mov	r2, r8
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	4628      	mov	r0, r5
 8004920:	4653      	mov	r3, sl
 8004922:	910b      	str	r1, [sp, #44]	; 0x2c
 8004924:	f7ff fed4 	bl	80046d0 <__cvt>
 8004928:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800492a:	4680      	mov	r8, r0
 800492c:	2947      	cmp	r1, #71	; 0x47
 800492e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004930:	d108      	bne.n	8004944 <_printf_float+0x138>
 8004932:	1cc8      	adds	r0, r1, #3
 8004934:	db02      	blt.n	800493c <_printf_float+0x130>
 8004936:	6863      	ldr	r3, [r4, #4]
 8004938:	4299      	cmp	r1, r3
 800493a:	dd40      	ble.n	80049be <_printf_float+0x1b2>
 800493c:	f1a9 0902 	sub.w	r9, r9, #2
 8004940:	fa5f f989 	uxtb.w	r9, r9
 8004944:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004948:	d81f      	bhi.n	800498a <_printf_float+0x17e>
 800494a:	464a      	mov	r2, r9
 800494c:	3901      	subs	r1, #1
 800494e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004952:	910d      	str	r1, [sp, #52]	; 0x34
 8004954:	f7ff ff1b 	bl	800478e <__exponent>
 8004958:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800495a:	4682      	mov	sl, r0
 800495c:	1813      	adds	r3, r2, r0
 800495e:	2a01      	cmp	r2, #1
 8004960:	6123      	str	r3, [r4, #16]
 8004962:	dc02      	bgt.n	800496a <_printf_float+0x15e>
 8004964:	6822      	ldr	r2, [r4, #0]
 8004966:	07d2      	lsls	r2, r2, #31
 8004968:	d501      	bpl.n	800496e <_printf_float+0x162>
 800496a:	3301      	adds	r3, #1
 800496c:	6123      	str	r3, [r4, #16]
 800496e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004972:	2b00      	cmp	r3, #0
 8004974:	d09b      	beq.n	80048ae <_printf_float+0xa2>
 8004976:	232d      	movs	r3, #45	; 0x2d
 8004978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800497c:	e797      	b.n	80048ae <_printf_float+0xa2>
 800497e:	2947      	cmp	r1, #71	; 0x47
 8004980:	d1bc      	bne.n	80048fc <_printf_float+0xf0>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1ba      	bne.n	80048fc <_printf_float+0xf0>
 8004986:	2301      	movs	r3, #1
 8004988:	e7b7      	b.n	80048fa <_printf_float+0xee>
 800498a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800498e:	d118      	bne.n	80049c2 <_printf_float+0x1b6>
 8004990:	2900      	cmp	r1, #0
 8004992:	6863      	ldr	r3, [r4, #4]
 8004994:	dd0b      	ble.n	80049ae <_printf_float+0x1a2>
 8004996:	6121      	str	r1, [r4, #16]
 8004998:	b913      	cbnz	r3, 80049a0 <_printf_float+0x194>
 800499a:	6822      	ldr	r2, [r4, #0]
 800499c:	07d0      	lsls	r0, r2, #31
 800499e:	d502      	bpl.n	80049a6 <_printf_float+0x19a>
 80049a0:	3301      	adds	r3, #1
 80049a2:	440b      	add	r3, r1
 80049a4:	6123      	str	r3, [r4, #16]
 80049a6:	f04f 0a00 	mov.w	sl, #0
 80049aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80049ac:	e7df      	b.n	800496e <_printf_float+0x162>
 80049ae:	b913      	cbnz	r3, 80049b6 <_printf_float+0x1aa>
 80049b0:	6822      	ldr	r2, [r4, #0]
 80049b2:	07d2      	lsls	r2, r2, #31
 80049b4:	d501      	bpl.n	80049ba <_printf_float+0x1ae>
 80049b6:	3302      	adds	r3, #2
 80049b8:	e7f4      	b.n	80049a4 <_printf_float+0x198>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e7f2      	b.n	80049a4 <_printf_float+0x198>
 80049be:	f04f 0967 	mov.w	r9, #103	; 0x67
 80049c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049c4:	4299      	cmp	r1, r3
 80049c6:	db05      	blt.n	80049d4 <_printf_float+0x1c8>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	6121      	str	r1, [r4, #16]
 80049cc:	07d8      	lsls	r0, r3, #31
 80049ce:	d5ea      	bpl.n	80049a6 <_printf_float+0x19a>
 80049d0:	1c4b      	adds	r3, r1, #1
 80049d2:	e7e7      	b.n	80049a4 <_printf_float+0x198>
 80049d4:	2900      	cmp	r1, #0
 80049d6:	bfcc      	ite	gt
 80049d8:	2201      	movgt	r2, #1
 80049da:	f1c1 0202 	rsble	r2, r1, #2
 80049de:	4413      	add	r3, r2
 80049e0:	e7e0      	b.n	80049a4 <_printf_float+0x198>
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	055a      	lsls	r2, r3, #21
 80049e6:	d407      	bmi.n	80049f8 <_printf_float+0x1ec>
 80049e8:	6923      	ldr	r3, [r4, #16]
 80049ea:	4642      	mov	r2, r8
 80049ec:	4631      	mov	r1, r6
 80049ee:	4628      	mov	r0, r5
 80049f0:	47b8      	blx	r7
 80049f2:	3001      	adds	r0, #1
 80049f4:	d12b      	bne.n	8004a4e <_printf_float+0x242>
 80049f6:	e764      	b.n	80048c2 <_printf_float+0xb6>
 80049f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80049fc:	f240 80dd 	bls.w	8004bba <_printf_float+0x3ae>
 8004a00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a04:	2200      	movs	r2, #0
 8004a06:	2300      	movs	r3, #0
 8004a08:	f7fb ffd8 	bl	80009bc <__aeabi_dcmpeq>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d033      	beq.n	8004a78 <_printf_float+0x26c>
 8004a10:	2301      	movs	r3, #1
 8004a12:	4631      	mov	r1, r6
 8004a14:	4628      	mov	r0, r5
 8004a16:	4a35      	ldr	r2, [pc, #212]	; (8004aec <_printf_float+0x2e0>)
 8004a18:	47b8      	blx	r7
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	f43f af51 	beq.w	80048c2 <_printf_float+0xb6>
 8004a20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a24:	429a      	cmp	r2, r3
 8004a26:	db02      	blt.n	8004a2e <_printf_float+0x222>
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	07d8      	lsls	r0, r3, #31
 8004a2c:	d50f      	bpl.n	8004a4e <_printf_float+0x242>
 8004a2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a32:	4631      	mov	r1, r6
 8004a34:	4628      	mov	r0, r5
 8004a36:	47b8      	blx	r7
 8004a38:	3001      	adds	r0, #1
 8004a3a:	f43f af42 	beq.w	80048c2 <_printf_float+0xb6>
 8004a3e:	f04f 0800 	mov.w	r8, #0
 8004a42:	f104 091a 	add.w	r9, r4, #26
 8004a46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	4543      	cmp	r3, r8
 8004a4c:	dc09      	bgt.n	8004a62 <_printf_float+0x256>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	079b      	lsls	r3, r3, #30
 8004a52:	f100 8102 	bmi.w	8004c5a <_printf_float+0x44e>
 8004a56:	68e0      	ldr	r0, [r4, #12]
 8004a58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a5a:	4298      	cmp	r0, r3
 8004a5c:	bfb8      	it	lt
 8004a5e:	4618      	movlt	r0, r3
 8004a60:	e731      	b.n	80048c6 <_printf_float+0xba>
 8004a62:	2301      	movs	r3, #1
 8004a64:	464a      	mov	r2, r9
 8004a66:	4631      	mov	r1, r6
 8004a68:	4628      	mov	r0, r5
 8004a6a:	47b8      	blx	r7
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	f43f af28 	beq.w	80048c2 <_printf_float+0xb6>
 8004a72:	f108 0801 	add.w	r8, r8, #1
 8004a76:	e7e6      	b.n	8004a46 <_printf_float+0x23a>
 8004a78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	dc38      	bgt.n	8004af0 <_printf_float+0x2e4>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	4631      	mov	r1, r6
 8004a82:	4628      	mov	r0, r5
 8004a84:	4a19      	ldr	r2, [pc, #100]	; (8004aec <_printf_float+0x2e0>)
 8004a86:	47b8      	blx	r7
 8004a88:	3001      	adds	r0, #1
 8004a8a:	f43f af1a 	beq.w	80048c2 <_printf_float+0xb6>
 8004a8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a92:	4313      	orrs	r3, r2
 8004a94:	d102      	bne.n	8004a9c <_printf_float+0x290>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	07d9      	lsls	r1, r3, #31
 8004a9a:	d5d8      	bpl.n	8004a4e <_printf_float+0x242>
 8004a9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	47b8      	blx	r7
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	f43f af0b 	beq.w	80048c2 <_printf_float+0xb6>
 8004aac:	f04f 0900 	mov.w	r9, #0
 8004ab0:	f104 0a1a 	add.w	sl, r4, #26
 8004ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ab6:	425b      	negs	r3, r3
 8004ab8:	454b      	cmp	r3, r9
 8004aba:	dc01      	bgt.n	8004ac0 <_printf_float+0x2b4>
 8004abc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004abe:	e794      	b.n	80049ea <_printf_float+0x1de>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	4652      	mov	r2, sl
 8004ac4:	4631      	mov	r1, r6
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	47b8      	blx	r7
 8004aca:	3001      	adds	r0, #1
 8004acc:	f43f aef9 	beq.w	80048c2 <_printf_float+0xb6>
 8004ad0:	f109 0901 	add.w	r9, r9, #1
 8004ad4:	e7ee      	b.n	8004ab4 <_printf_float+0x2a8>
 8004ad6:	bf00      	nop
 8004ad8:	7fefffff 	.word	0x7fefffff
 8004adc:	0800aaa0 	.word	0x0800aaa0
 8004ae0:	0800aaa4 	.word	0x0800aaa4
 8004ae4:	0800aaac 	.word	0x0800aaac
 8004ae8:	0800aaa8 	.word	0x0800aaa8
 8004aec:	0800aab0 	.word	0x0800aab0
 8004af0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004af2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004af4:	429a      	cmp	r2, r3
 8004af6:	bfa8      	it	ge
 8004af8:	461a      	movge	r2, r3
 8004afa:	2a00      	cmp	r2, #0
 8004afc:	4691      	mov	r9, r2
 8004afe:	dc37      	bgt.n	8004b70 <_printf_float+0x364>
 8004b00:	f04f 0b00 	mov.w	fp, #0
 8004b04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b08:	f104 021a 	add.w	r2, r4, #26
 8004b0c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004b10:	ebaa 0309 	sub.w	r3, sl, r9
 8004b14:	455b      	cmp	r3, fp
 8004b16:	dc33      	bgt.n	8004b80 <_printf_float+0x374>
 8004b18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	db3b      	blt.n	8004b98 <_printf_float+0x38c>
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	07da      	lsls	r2, r3, #31
 8004b24:	d438      	bmi.n	8004b98 <_printf_float+0x38c>
 8004b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b28:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b2a:	eba3 020a 	sub.w	r2, r3, sl
 8004b2e:	eba3 0901 	sub.w	r9, r3, r1
 8004b32:	4591      	cmp	r9, r2
 8004b34:	bfa8      	it	ge
 8004b36:	4691      	movge	r9, r2
 8004b38:	f1b9 0f00 	cmp.w	r9, #0
 8004b3c:	dc34      	bgt.n	8004ba8 <_printf_float+0x39c>
 8004b3e:	f04f 0800 	mov.w	r8, #0
 8004b42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b46:	f104 0a1a 	add.w	sl, r4, #26
 8004b4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	eba3 0309 	sub.w	r3, r3, r9
 8004b54:	4543      	cmp	r3, r8
 8004b56:	f77f af7a 	ble.w	8004a4e <_printf_float+0x242>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	4652      	mov	r2, sl
 8004b5e:	4631      	mov	r1, r6
 8004b60:	4628      	mov	r0, r5
 8004b62:	47b8      	blx	r7
 8004b64:	3001      	adds	r0, #1
 8004b66:	f43f aeac 	beq.w	80048c2 <_printf_float+0xb6>
 8004b6a:	f108 0801 	add.w	r8, r8, #1
 8004b6e:	e7ec      	b.n	8004b4a <_printf_float+0x33e>
 8004b70:	4613      	mov	r3, r2
 8004b72:	4631      	mov	r1, r6
 8004b74:	4642      	mov	r2, r8
 8004b76:	4628      	mov	r0, r5
 8004b78:	47b8      	blx	r7
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d1c0      	bne.n	8004b00 <_printf_float+0x2f4>
 8004b7e:	e6a0      	b.n	80048c2 <_printf_float+0xb6>
 8004b80:	2301      	movs	r3, #1
 8004b82:	4631      	mov	r1, r6
 8004b84:	4628      	mov	r0, r5
 8004b86:	920b      	str	r2, [sp, #44]	; 0x2c
 8004b88:	47b8      	blx	r7
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	f43f ae99 	beq.w	80048c2 <_printf_float+0xb6>
 8004b90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b92:	f10b 0b01 	add.w	fp, fp, #1
 8004b96:	e7b9      	b.n	8004b0c <_printf_float+0x300>
 8004b98:	4631      	mov	r1, r6
 8004b9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	47b8      	blx	r7
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	d1bf      	bne.n	8004b26 <_printf_float+0x31a>
 8004ba6:	e68c      	b.n	80048c2 <_printf_float+0xb6>
 8004ba8:	464b      	mov	r3, r9
 8004baa:	4631      	mov	r1, r6
 8004bac:	4628      	mov	r0, r5
 8004bae:	eb08 020a 	add.w	r2, r8, sl
 8004bb2:	47b8      	blx	r7
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	d1c2      	bne.n	8004b3e <_printf_float+0x332>
 8004bb8:	e683      	b.n	80048c2 <_printf_float+0xb6>
 8004bba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bbc:	2a01      	cmp	r2, #1
 8004bbe:	dc01      	bgt.n	8004bc4 <_printf_float+0x3b8>
 8004bc0:	07db      	lsls	r3, r3, #31
 8004bc2:	d537      	bpl.n	8004c34 <_printf_float+0x428>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	4642      	mov	r2, r8
 8004bc8:	4631      	mov	r1, r6
 8004bca:	4628      	mov	r0, r5
 8004bcc:	47b8      	blx	r7
 8004bce:	3001      	adds	r0, #1
 8004bd0:	f43f ae77 	beq.w	80048c2 <_printf_float+0xb6>
 8004bd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bd8:	4631      	mov	r1, r6
 8004bda:	4628      	mov	r0, r5
 8004bdc:	47b8      	blx	r7
 8004bde:	3001      	adds	r0, #1
 8004be0:	f43f ae6f 	beq.w	80048c2 <_printf_float+0xb6>
 8004be4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004be8:	2200      	movs	r2, #0
 8004bea:	2300      	movs	r3, #0
 8004bec:	f7fb fee6 	bl	80009bc <__aeabi_dcmpeq>
 8004bf0:	b9d8      	cbnz	r0, 8004c2a <_printf_float+0x41e>
 8004bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bf4:	f108 0201 	add.w	r2, r8, #1
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	4631      	mov	r1, r6
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	47b8      	blx	r7
 8004c00:	3001      	adds	r0, #1
 8004c02:	d10e      	bne.n	8004c22 <_printf_float+0x416>
 8004c04:	e65d      	b.n	80048c2 <_printf_float+0xb6>
 8004c06:	2301      	movs	r3, #1
 8004c08:	464a      	mov	r2, r9
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	47b8      	blx	r7
 8004c10:	3001      	adds	r0, #1
 8004c12:	f43f ae56 	beq.w	80048c2 <_printf_float+0xb6>
 8004c16:	f108 0801 	add.w	r8, r8, #1
 8004c1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	4543      	cmp	r3, r8
 8004c20:	dcf1      	bgt.n	8004c06 <_printf_float+0x3fa>
 8004c22:	4653      	mov	r3, sl
 8004c24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c28:	e6e0      	b.n	80049ec <_printf_float+0x1e0>
 8004c2a:	f04f 0800 	mov.w	r8, #0
 8004c2e:	f104 091a 	add.w	r9, r4, #26
 8004c32:	e7f2      	b.n	8004c1a <_printf_float+0x40e>
 8004c34:	2301      	movs	r3, #1
 8004c36:	4642      	mov	r2, r8
 8004c38:	e7df      	b.n	8004bfa <_printf_float+0x3ee>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	464a      	mov	r2, r9
 8004c3e:	4631      	mov	r1, r6
 8004c40:	4628      	mov	r0, r5
 8004c42:	47b8      	blx	r7
 8004c44:	3001      	adds	r0, #1
 8004c46:	f43f ae3c 	beq.w	80048c2 <_printf_float+0xb6>
 8004c4a:	f108 0801 	add.w	r8, r8, #1
 8004c4e:	68e3      	ldr	r3, [r4, #12]
 8004c50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004c52:	1a5b      	subs	r3, r3, r1
 8004c54:	4543      	cmp	r3, r8
 8004c56:	dcf0      	bgt.n	8004c3a <_printf_float+0x42e>
 8004c58:	e6fd      	b.n	8004a56 <_printf_float+0x24a>
 8004c5a:	f04f 0800 	mov.w	r8, #0
 8004c5e:	f104 0919 	add.w	r9, r4, #25
 8004c62:	e7f4      	b.n	8004c4e <_printf_float+0x442>

08004c64 <_printf_common>:
 8004c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c68:	4616      	mov	r6, r2
 8004c6a:	4699      	mov	r9, r3
 8004c6c:	688a      	ldr	r2, [r1, #8]
 8004c6e:	690b      	ldr	r3, [r1, #16]
 8004c70:	4607      	mov	r7, r0
 8004c72:	4293      	cmp	r3, r2
 8004c74:	bfb8      	it	lt
 8004c76:	4613      	movlt	r3, r2
 8004c78:	6033      	str	r3, [r6, #0]
 8004c7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c7e:	460c      	mov	r4, r1
 8004c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c84:	b10a      	cbz	r2, 8004c8a <_printf_common+0x26>
 8004c86:	3301      	adds	r3, #1
 8004c88:	6033      	str	r3, [r6, #0]
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	0699      	lsls	r1, r3, #26
 8004c8e:	bf42      	ittt	mi
 8004c90:	6833      	ldrmi	r3, [r6, #0]
 8004c92:	3302      	addmi	r3, #2
 8004c94:	6033      	strmi	r3, [r6, #0]
 8004c96:	6825      	ldr	r5, [r4, #0]
 8004c98:	f015 0506 	ands.w	r5, r5, #6
 8004c9c:	d106      	bne.n	8004cac <_printf_common+0x48>
 8004c9e:	f104 0a19 	add.w	sl, r4, #25
 8004ca2:	68e3      	ldr	r3, [r4, #12]
 8004ca4:	6832      	ldr	r2, [r6, #0]
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	42ab      	cmp	r3, r5
 8004caa:	dc28      	bgt.n	8004cfe <_printf_common+0x9a>
 8004cac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cb0:	1e13      	subs	r3, r2, #0
 8004cb2:	6822      	ldr	r2, [r4, #0]
 8004cb4:	bf18      	it	ne
 8004cb6:	2301      	movne	r3, #1
 8004cb8:	0692      	lsls	r2, r2, #26
 8004cba:	d42d      	bmi.n	8004d18 <_printf_common+0xb4>
 8004cbc:	4649      	mov	r1, r9
 8004cbe:	4638      	mov	r0, r7
 8004cc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cc4:	47c0      	blx	r8
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d020      	beq.n	8004d0c <_printf_common+0xa8>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	68e5      	ldr	r5, [r4, #12]
 8004cce:	f003 0306 	and.w	r3, r3, #6
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	bf18      	it	ne
 8004cd6:	2500      	movne	r5, #0
 8004cd8:	6832      	ldr	r2, [r6, #0]
 8004cda:	f04f 0600 	mov.w	r6, #0
 8004cde:	68a3      	ldr	r3, [r4, #8]
 8004ce0:	bf08      	it	eq
 8004ce2:	1aad      	subeq	r5, r5, r2
 8004ce4:	6922      	ldr	r2, [r4, #16]
 8004ce6:	bf08      	it	eq
 8004ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cec:	4293      	cmp	r3, r2
 8004cee:	bfc4      	itt	gt
 8004cf0:	1a9b      	subgt	r3, r3, r2
 8004cf2:	18ed      	addgt	r5, r5, r3
 8004cf4:	341a      	adds	r4, #26
 8004cf6:	42b5      	cmp	r5, r6
 8004cf8:	d11a      	bne.n	8004d30 <_printf_common+0xcc>
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	e008      	b.n	8004d10 <_printf_common+0xac>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4652      	mov	r2, sl
 8004d02:	4649      	mov	r1, r9
 8004d04:	4638      	mov	r0, r7
 8004d06:	47c0      	blx	r8
 8004d08:	3001      	adds	r0, #1
 8004d0a:	d103      	bne.n	8004d14 <_printf_common+0xb0>
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d14:	3501      	adds	r5, #1
 8004d16:	e7c4      	b.n	8004ca2 <_printf_common+0x3e>
 8004d18:	2030      	movs	r0, #48	; 0x30
 8004d1a:	18e1      	adds	r1, r4, r3
 8004d1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d26:	4422      	add	r2, r4
 8004d28:	3302      	adds	r3, #2
 8004d2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d2e:	e7c5      	b.n	8004cbc <_printf_common+0x58>
 8004d30:	2301      	movs	r3, #1
 8004d32:	4622      	mov	r2, r4
 8004d34:	4649      	mov	r1, r9
 8004d36:	4638      	mov	r0, r7
 8004d38:	47c0      	blx	r8
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	d0e6      	beq.n	8004d0c <_printf_common+0xa8>
 8004d3e:	3601      	adds	r6, #1
 8004d40:	e7d9      	b.n	8004cf6 <_printf_common+0x92>
	...

08004d44 <_printf_i>:
 8004d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d48:	7e0f      	ldrb	r7, [r1, #24]
 8004d4a:	4691      	mov	r9, r2
 8004d4c:	2f78      	cmp	r7, #120	; 0x78
 8004d4e:	4680      	mov	r8, r0
 8004d50:	460c      	mov	r4, r1
 8004d52:	469a      	mov	sl, r3
 8004d54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d5a:	d807      	bhi.n	8004d6c <_printf_i+0x28>
 8004d5c:	2f62      	cmp	r7, #98	; 0x62
 8004d5e:	d80a      	bhi.n	8004d76 <_printf_i+0x32>
 8004d60:	2f00      	cmp	r7, #0
 8004d62:	f000 80d9 	beq.w	8004f18 <_printf_i+0x1d4>
 8004d66:	2f58      	cmp	r7, #88	; 0x58
 8004d68:	f000 80a4 	beq.w	8004eb4 <_printf_i+0x170>
 8004d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d74:	e03a      	b.n	8004dec <_printf_i+0xa8>
 8004d76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d7a:	2b15      	cmp	r3, #21
 8004d7c:	d8f6      	bhi.n	8004d6c <_printf_i+0x28>
 8004d7e:	a101      	add	r1, pc, #4	; (adr r1, 8004d84 <_printf_i+0x40>)
 8004d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d84:	08004ddd 	.word	0x08004ddd
 8004d88:	08004df1 	.word	0x08004df1
 8004d8c:	08004d6d 	.word	0x08004d6d
 8004d90:	08004d6d 	.word	0x08004d6d
 8004d94:	08004d6d 	.word	0x08004d6d
 8004d98:	08004d6d 	.word	0x08004d6d
 8004d9c:	08004df1 	.word	0x08004df1
 8004da0:	08004d6d 	.word	0x08004d6d
 8004da4:	08004d6d 	.word	0x08004d6d
 8004da8:	08004d6d 	.word	0x08004d6d
 8004dac:	08004d6d 	.word	0x08004d6d
 8004db0:	08004eff 	.word	0x08004eff
 8004db4:	08004e21 	.word	0x08004e21
 8004db8:	08004ee1 	.word	0x08004ee1
 8004dbc:	08004d6d 	.word	0x08004d6d
 8004dc0:	08004d6d 	.word	0x08004d6d
 8004dc4:	08004f21 	.word	0x08004f21
 8004dc8:	08004d6d 	.word	0x08004d6d
 8004dcc:	08004e21 	.word	0x08004e21
 8004dd0:	08004d6d 	.word	0x08004d6d
 8004dd4:	08004d6d 	.word	0x08004d6d
 8004dd8:	08004ee9 	.word	0x08004ee9
 8004ddc:	682b      	ldr	r3, [r5, #0]
 8004dde:	1d1a      	adds	r2, r3, #4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	602a      	str	r2, [r5, #0]
 8004de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0a4      	b.n	8004f3a <_printf_i+0x1f6>
 8004df0:	6820      	ldr	r0, [r4, #0]
 8004df2:	6829      	ldr	r1, [r5, #0]
 8004df4:	0606      	lsls	r6, r0, #24
 8004df6:	f101 0304 	add.w	r3, r1, #4
 8004dfa:	d50a      	bpl.n	8004e12 <_printf_i+0xce>
 8004dfc:	680e      	ldr	r6, [r1, #0]
 8004dfe:	602b      	str	r3, [r5, #0]
 8004e00:	2e00      	cmp	r6, #0
 8004e02:	da03      	bge.n	8004e0c <_printf_i+0xc8>
 8004e04:	232d      	movs	r3, #45	; 0x2d
 8004e06:	4276      	negs	r6, r6
 8004e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e0c:	230a      	movs	r3, #10
 8004e0e:	485e      	ldr	r0, [pc, #376]	; (8004f88 <_printf_i+0x244>)
 8004e10:	e019      	b.n	8004e46 <_printf_i+0x102>
 8004e12:	680e      	ldr	r6, [r1, #0]
 8004e14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e18:	602b      	str	r3, [r5, #0]
 8004e1a:	bf18      	it	ne
 8004e1c:	b236      	sxthne	r6, r6
 8004e1e:	e7ef      	b.n	8004e00 <_printf_i+0xbc>
 8004e20:	682b      	ldr	r3, [r5, #0]
 8004e22:	6820      	ldr	r0, [r4, #0]
 8004e24:	1d19      	adds	r1, r3, #4
 8004e26:	6029      	str	r1, [r5, #0]
 8004e28:	0601      	lsls	r1, r0, #24
 8004e2a:	d501      	bpl.n	8004e30 <_printf_i+0xec>
 8004e2c:	681e      	ldr	r6, [r3, #0]
 8004e2e:	e002      	b.n	8004e36 <_printf_i+0xf2>
 8004e30:	0646      	lsls	r6, r0, #25
 8004e32:	d5fb      	bpl.n	8004e2c <_printf_i+0xe8>
 8004e34:	881e      	ldrh	r6, [r3, #0]
 8004e36:	2f6f      	cmp	r7, #111	; 0x6f
 8004e38:	bf0c      	ite	eq
 8004e3a:	2308      	moveq	r3, #8
 8004e3c:	230a      	movne	r3, #10
 8004e3e:	4852      	ldr	r0, [pc, #328]	; (8004f88 <_printf_i+0x244>)
 8004e40:	2100      	movs	r1, #0
 8004e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e46:	6865      	ldr	r5, [r4, #4]
 8004e48:	2d00      	cmp	r5, #0
 8004e4a:	bfa8      	it	ge
 8004e4c:	6821      	ldrge	r1, [r4, #0]
 8004e4e:	60a5      	str	r5, [r4, #8]
 8004e50:	bfa4      	itt	ge
 8004e52:	f021 0104 	bicge.w	r1, r1, #4
 8004e56:	6021      	strge	r1, [r4, #0]
 8004e58:	b90e      	cbnz	r6, 8004e5e <_printf_i+0x11a>
 8004e5a:	2d00      	cmp	r5, #0
 8004e5c:	d04d      	beq.n	8004efa <_printf_i+0x1b6>
 8004e5e:	4615      	mov	r5, r2
 8004e60:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e64:	fb03 6711 	mls	r7, r3, r1, r6
 8004e68:	5dc7      	ldrb	r7, [r0, r7]
 8004e6a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e6e:	4637      	mov	r7, r6
 8004e70:	42bb      	cmp	r3, r7
 8004e72:	460e      	mov	r6, r1
 8004e74:	d9f4      	bls.n	8004e60 <_printf_i+0x11c>
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d10b      	bne.n	8004e92 <_printf_i+0x14e>
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	07de      	lsls	r6, r3, #31
 8004e7e:	d508      	bpl.n	8004e92 <_printf_i+0x14e>
 8004e80:	6923      	ldr	r3, [r4, #16]
 8004e82:	6861      	ldr	r1, [r4, #4]
 8004e84:	4299      	cmp	r1, r3
 8004e86:	bfde      	ittt	le
 8004e88:	2330      	movle	r3, #48	; 0x30
 8004e8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e8e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004e92:	1b52      	subs	r2, r2, r5
 8004e94:	6122      	str	r2, [r4, #16]
 8004e96:	464b      	mov	r3, r9
 8004e98:	4621      	mov	r1, r4
 8004e9a:	4640      	mov	r0, r8
 8004e9c:	f8cd a000 	str.w	sl, [sp]
 8004ea0:	aa03      	add	r2, sp, #12
 8004ea2:	f7ff fedf 	bl	8004c64 <_printf_common>
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d14c      	bne.n	8004f44 <_printf_i+0x200>
 8004eaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004eae:	b004      	add	sp, #16
 8004eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb4:	4834      	ldr	r0, [pc, #208]	; (8004f88 <_printf_i+0x244>)
 8004eb6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004eba:	6829      	ldr	r1, [r5, #0]
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ec2:	6029      	str	r1, [r5, #0]
 8004ec4:	061d      	lsls	r5, r3, #24
 8004ec6:	d514      	bpl.n	8004ef2 <_printf_i+0x1ae>
 8004ec8:	07df      	lsls	r7, r3, #31
 8004eca:	bf44      	itt	mi
 8004ecc:	f043 0320 	orrmi.w	r3, r3, #32
 8004ed0:	6023      	strmi	r3, [r4, #0]
 8004ed2:	b91e      	cbnz	r6, 8004edc <_printf_i+0x198>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	f023 0320 	bic.w	r3, r3, #32
 8004eda:	6023      	str	r3, [r4, #0]
 8004edc:	2310      	movs	r3, #16
 8004ede:	e7af      	b.n	8004e40 <_printf_i+0xfc>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	f043 0320 	orr.w	r3, r3, #32
 8004ee6:	6023      	str	r3, [r4, #0]
 8004ee8:	2378      	movs	r3, #120	; 0x78
 8004eea:	4828      	ldr	r0, [pc, #160]	; (8004f8c <_printf_i+0x248>)
 8004eec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ef0:	e7e3      	b.n	8004eba <_printf_i+0x176>
 8004ef2:	0659      	lsls	r1, r3, #25
 8004ef4:	bf48      	it	mi
 8004ef6:	b2b6      	uxthmi	r6, r6
 8004ef8:	e7e6      	b.n	8004ec8 <_printf_i+0x184>
 8004efa:	4615      	mov	r5, r2
 8004efc:	e7bb      	b.n	8004e76 <_printf_i+0x132>
 8004efe:	682b      	ldr	r3, [r5, #0]
 8004f00:	6826      	ldr	r6, [r4, #0]
 8004f02:	1d18      	adds	r0, r3, #4
 8004f04:	6961      	ldr	r1, [r4, #20]
 8004f06:	6028      	str	r0, [r5, #0]
 8004f08:	0635      	lsls	r5, r6, #24
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	d501      	bpl.n	8004f12 <_printf_i+0x1ce>
 8004f0e:	6019      	str	r1, [r3, #0]
 8004f10:	e002      	b.n	8004f18 <_printf_i+0x1d4>
 8004f12:	0670      	lsls	r0, r6, #25
 8004f14:	d5fb      	bpl.n	8004f0e <_printf_i+0x1ca>
 8004f16:	8019      	strh	r1, [r3, #0]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	4615      	mov	r5, r2
 8004f1c:	6123      	str	r3, [r4, #16]
 8004f1e:	e7ba      	b.n	8004e96 <_printf_i+0x152>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	2100      	movs	r1, #0
 8004f24:	1d1a      	adds	r2, r3, #4
 8004f26:	602a      	str	r2, [r5, #0]
 8004f28:	681d      	ldr	r5, [r3, #0]
 8004f2a:	6862      	ldr	r2, [r4, #4]
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f002 f903 	bl	8007138 <memchr>
 8004f32:	b108      	cbz	r0, 8004f38 <_printf_i+0x1f4>
 8004f34:	1b40      	subs	r0, r0, r5
 8004f36:	6060      	str	r0, [r4, #4]
 8004f38:	6863      	ldr	r3, [r4, #4]
 8004f3a:	6123      	str	r3, [r4, #16]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f42:	e7a8      	b.n	8004e96 <_printf_i+0x152>
 8004f44:	462a      	mov	r2, r5
 8004f46:	4649      	mov	r1, r9
 8004f48:	4640      	mov	r0, r8
 8004f4a:	6923      	ldr	r3, [r4, #16]
 8004f4c:	47d0      	blx	sl
 8004f4e:	3001      	adds	r0, #1
 8004f50:	d0ab      	beq.n	8004eaa <_printf_i+0x166>
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	079b      	lsls	r3, r3, #30
 8004f56:	d413      	bmi.n	8004f80 <_printf_i+0x23c>
 8004f58:	68e0      	ldr	r0, [r4, #12]
 8004f5a:	9b03      	ldr	r3, [sp, #12]
 8004f5c:	4298      	cmp	r0, r3
 8004f5e:	bfb8      	it	lt
 8004f60:	4618      	movlt	r0, r3
 8004f62:	e7a4      	b.n	8004eae <_printf_i+0x16a>
 8004f64:	2301      	movs	r3, #1
 8004f66:	4632      	mov	r2, r6
 8004f68:	4649      	mov	r1, r9
 8004f6a:	4640      	mov	r0, r8
 8004f6c:	47d0      	blx	sl
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d09b      	beq.n	8004eaa <_printf_i+0x166>
 8004f72:	3501      	adds	r5, #1
 8004f74:	68e3      	ldr	r3, [r4, #12]
 8004f76:	9903      	ldr	r1, [sp, #12]
 8004f78:	1a5b      	subs	r3, r3, r1
 8004f7a:	42ab      	cmp	r3, r5
 8004f7c:	dcf2      	bgt.n	8004f64 <_printf_i+0x220>
 8004f7e:	e7eb      	b.n	8004f58 <_printf_i+0x214>
 8004f80:	2500      	movs	r5, #0
 8004f82:	f104 0619 	add.w	r6, r4, #25
 8004f86:	e7f5      	b.n	8004f74 <_printf_i+0x230>
 8004f88:	0800aab2 	.word	0x0800aab2
 8004f8c:	0800aac3 	.word	0x0800aac3

08004f90 <_sbrk_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	2300      	movs	r3, #0
 8004f94:	4d05      	ldr	r5, [pc, #20]	; (8004fac <_sbrk_r+0x1c>)
 8004f96:	4604      	mov	r4, r0
 8004f98:	4608      	mov	r0, r1
 8004f9a:	602b      	str	r3, [r5, #0]
 8004f9c:	f7fd f86c 	bl	8002078 <_sbrk>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_sbrk_r+0x1a>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_sbrk_r+0x1a>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	20000850 	.word	0x20000850

08004fb0 <siprintf>:
 8004fb0:	b40e      	push	{r1, r2, r3}
 8004fb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fb6:	b500      	push	{lr}
 8004fb8:	b09c      	sub	sp, #112	; 0x70
 8004fba:	ab1d      	add	r3, sp, #116	; 0x74
 8004fbc:	9002      	str	r0, [sp, #8]
 8004fbe:	9006      	str	r0, [sp, #24]
 8004fc0:	9107      	str	r1, [sp, #28]
 8004fc2:	9104      	str	r1, [sp, #16]
 8004fc4:	4808      	ldr	r0, [pc, #32]	; (8004fe8 <siprintf+0x38>)
 8004fc6:	4909      	ldr	r1, [pc, #36]	; (8004fec <siprintf+0x3c>)
 8004fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fcc:	9105      	str	r1, [sp, #20]
 8004fce:	6800      	ldr	r0, [r0, #0]
 8004fd0:	a902      	add	r1, sp, #8
 8004fd2:	9301      	str	r3, [sp, #4]
 8004fd4:	f002 fe00 	bl	8007bd8 <_svfiprintf_r>
 8004fd8:	2200      	movs	r2, #0
 8004fda:	9b02      	ldr	r3, [sp, #8]
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	b01c      	add	sp, #112	; 0x70
 8004fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fe4:	b003      	add	sp, #12
 8004fe6:	4770      	bx	lr
 8004fe8:	20000020 	.word	0x20000020
 8004fec:	ffff0208 	.word	0xffff0208

08004ff0 <strcpy>:
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ff6:	f803 2b01 	strb.w	r2, [r3], #1
 8004ffa:	2a00      	cmp	r2, #0
 8004ffc:	d1f9      	bne.n	8004ff2 <strcpy+0x2>
 8004ffe:	4770      	bx	lr

08005000 <sulp>:
 8005000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005004:	460f      	mov	r7, r1
 8005006:	4690      	mov	r8, r2
 8005008:	f002 fc2e 	bl	8007868 <__ulp>
 800500c:	4604      	mov	r4, r0
 800500e:	460d      	mov	r5, r1
 8005010:	f1b8 0f00 	cmp.w	r8, #0
 8005014:	d011      	beq.n	800503a <sulp+0x3a>
 8005016:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800501a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800501e:	2b00      	cmp	r3, #0
 8005020:	dd0b      	ble.n	800503a <sulp+0x3a>
 8005022:	2400      	movs	r4, #0
 8005024:	051b      	lsls	r3, r3, #20
 8005026:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800502a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800502e:	4622      	mov	r2, r4
 8005030:	462b      	mov	r3, r5
 8005032:	f7fb fa5b 	bl	80004ec <__aeabi_dmul>
 8005036:	4604      	mov	r4, r0
 8005038:	460d      	mov	r5, r1
 800503a:	4620      	mov	r0, r4
 800503c:	4629      	mov	r1, r5
 800503e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005042:	0000      	movs	r0, r0
 8005044:	0000      	movs	r0, r0
	...

08005048 <_strtod_l>:
 8005048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800504c:	469b      	mov	fp, r3
 800504e:	2300      	movs	r3, #0
 8005050:	b09f      	sub	sp, #124	; 0x7c
 8005052:	931a      	str	r3, [sp, #104]	; 0x68
 8005054:	4b9e      	ldr	r3, [pc, #632]	; (80052d0 <_strtod_l+0x288>)
 8005056:	4682      	mov	sl, r0
 8005058:	681f      	ldr	r7, [r3, #0]
 800505a:	460e      	mov	r6, r1
 800505c:	4638      	mov	r0, r7
 800505e:	9215      	str	r2, [sp, #84]	; 0x54
 8005060:	f7fb f880 	bl	8000164 <strlen>
 8005064:	f04f 0800 	mov.w	r8, #0
 8005068:	4604      	mov	r4, r0
 800506a:	f04f 0900 	mov.w	r9, #0
 800506e:	9619      	str	r6, [sp, #100]	; 0x64
 8005070:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005072:	781a      	ldrb	r2, [r3, #0]
 8005074:	2a2b      	cmp	r2, #43	; 0x2b
 8005076:	d04c      	beq.n	8005112 <_strtod_l+0xca>
 8005078:	d83a      	bhi.n	80050f0 <_strtod_l+0xa8>
 800507a:	2a0d      	cmp	r2, #13
 800507c:	d833      	bhi.n	80050e6 <_strtod_l+0x9e>
 800507e:	2a08      	cmp	r2, #8
 8005080:	d833      	bhi.n	80050ea <_strtod_l+0xa2>
 8005082:	2a00      	cmp	r2, #0
 8005084:	d03d      	beq.n	8005102 <_strtod_l+0xba>
 8005086:	2300      	movs	r3, #0
 8005088:	930a      	str	r3, [sp, #40]	; 0x28
 800508a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800508c:	782b      	ldrb	r3, [r5, #0]
 800508e:	2b30      	cmp	r3, #48	; 0x30
 8005090:	f040 80aa 	bne.w	80051e8 <_strtod_l+0x1a0>
 8005094:	786b      	ldrb	r3, [r5, #1]
 8005096:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800509a:	2b58      	cmp	r3, #88	; 0x58
 800509c:	d166      	bne.n	800516c <_strtod_l+0x124>
 800509e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050a0:	4650      	mov	r0, sl
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	ab1a      	add	r3, sp, #104	; 0x68
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	4a8a      	ldr	r2, [pc, #552]	; (80052d4 <_strtod_l+0x28c>)
 80050aa:	f8cd b008 	str.w	fp, [sp, #8]
 80050ae:	ab1b      	add	r3, sp, #108	; 0x6c
 80050b0:	a919      	add	r1, sp, #100	; 0x64
 80050b2:	f001 fd2d 	bl	8006b10 <__gethex>
 80050b6:	f010 0607 	ands.w	r6, r0, #7
 80050ba:	4604      	mov	r4, r0
 80050bc:	d005      	beq.n	80050ca <_strtod_l+0x82>
 80050be:	2e06      	cmp	r6, #6
 80050c0:	d129      	bne.n	8005116 <_strtod_l+0xce>
 80050c2:	2300      	movs	r3, #0
 80050c4:	3501      	adds	r5, #1
 80050c6:	9519      	str	r5, [sp, #100]	; 0x64
 80050c8:	930a      	str	r3, [sp, #40]	; 0x28
 80050ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f040 858a 	bne.w	8005be6 <_strtod_l+0xb9e>
 80050d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050d4:	b1d3      	cbz	r3, 800510c <_strtod_l+0xc4>
 80050d6:	4642      	mov	r2, r8
 80050d8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80050dc:	4610      	mov	r0, r2
 80050de:	4619      	mov	r1, r3
 80050e0:	b01f      	add	sp, #124	; 0x7c
 80050e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050e6:	2a20      	cmp	r2, #32
 80050e8:	d1cd      	bne.n	8005086 <_strtod_l+0x3e>
 80050ea:	3301      	adds	r3, #1
 80050ec:	9319      	str	r3, [sp, #100]	; 0x64
 80050ee:	e7bf      	b.n	8005070 <_strtod_l+0x28>
 80050f0:	2a2d      	cmp	r2, #45	; 0x2d
 80050f2:	d1c8      	bne.n	8005086 <_strtod_l+0x3e>
 80050f4:	2201      	movs	r2, #1
 80050f6:	920a      	str	r2, [sp, #40]	; 0x28
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	9219      	str	r2, [sp, #100]	; 0x64
 80050fc:	785b      	ldrb	r3, [r3, #1]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1c3      	bne.n	800508a <_strtod_l+0x42>
 8005102:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005104:	9619      	str	r6, [sp, #100]	; 0x64
 8005106:	2b00      	cmp	r3, #0
 8005108:	f040 856b 	bne.w	8005be2 <_strtod_l+0xb9a>
 800510c:	4642      	mov	r2, r8
 800510e:	464b      	mov	r3, r9
 8005110:	e7e4      	b.n	80050dc <_strtod_l+0x94>
 8005112:	2200      	movs	r2, #0
 8005114:	e7ef      	b.n	80050f6 <_strtod_l+0xae>
 8005116:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005118:	b13a      	cbz	r2, 800512a <_strtod_l+0xe2>
 800511a:	2135      	movs	r1, #53	; 0x35
 800511c:	a81c      	add	r0, sp, #112	; 0x70
 800511e:	f002 fca7 	bl	8007a70 <__copybits>
 8005122:	4650      	mov	r0, sl
 8005124:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005126:	f002 f86f 	bl	8007208 <_Bfree>
 800512a:	3e01      	subs	r6, #1
 800512c:	2e04      	cmp	r6, #4
 800512e:	d806      	bhi.n	800513e <_strtod_l+0xf6>
 8005130:	e8df f006 	tbb	[pc, r6]
 8005134:	1714030a 	.word	0x1714030a
 8005138:	0a          	.byte	0x0a
 8005139:	00          	.byte	0x00
 800513a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800513e:	0721      	lsls	r1, r4, #28
 8005140:	d5c3      	bpl.n	80050ca <_strtod_l+0x82>
 8005142:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005146:	e7c0      	b.n	80050ca <_strtod_l+0x82>
 8005148:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800514a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800514e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005152:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005156:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800515a:	e7f0      	b.n	800513e <_strtod_l+0xf6>
 800515c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80052d8 <_strtod_l+0x290>
 8005160:	e7ed      	b.n	800513e <_strtod_l+0xf6>
 8005162:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005166:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800516a:	e7e8      	b.n	800513e <_strtod_l+0xf6>
 800516c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	9219      	str	r2, [sp, #100]	; 0x64
 8005172:	785b      	ldrb	r3, [r3, #1]
 8005174:	2b30      	cmp	r3, #48	; 0x30
 8005176:	d0f9      	beq.n	800516c <_strtod_l+0x124>
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0a6      	beq.n	80050ca <_strtod_l+0x82>
 800517c:	2301      	movs	r3, #1
 800517e:	9307      	str	r3, [sp, #28]
 8005180:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005182:	220a      	movs	r2, #10
 8005184:	9308      	str	r3, [sp, #32]
 8005186:	2300      	movs	r3, #0
 8005188:	469b      	mov	fp, r3
 800518a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800518e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005190:	7805      	ldrb	r5, [r0, #0]
 8005192:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005196:	b2d9      	uxtb	r1, r3
 8005198:	2909      	cmp	r1, #9
 800519a:	d927      	bls.n	80051ec <_strtod_l+0x1a4>
 800519c:	4622      	mov	r2, r4
 800519e:	4639      	mov	r1, r7
 80051a0:	f002 ff78 	bl	8008094 <strncmp>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	d033      	beq.n	8005210 <_strtod_l+0x1c8>
 80051a8:	2000      	movs	r0, #0
 80051aa:	462a      	mov	r2, r5
 80051ac:	465c      	mov	r4, fp
 80051ae:	4603      	mov	r3, r0
 80051b0:	9004      	str	r0, [sp, #16]
 80051b2:	2a65      	cmp	r2, #101	; 0x65
 80051b4:	d001      	beq.n	80051ba <_strtod_l+0x172>
 80051b6:	2a45      	cmp	r2, #69	; 0x45
 80051b8:	d114      	bne.n	80051e4 <_strtod_l+0x19c>
 80051ba:	b91c      	cbnz	r4, 80051c4 <_strtod_l+0x17c>
 80051bc:	9a07      	ldr	r2, [sp, #28]
 80051be:	4302      	orrs	r2, r0
 80051c0:	d09f      	beq.n	8005102 <_strtod_l+0xba>
 80051c2:	2400      	movs	r4, #0
 80051c4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80051c6:	1c72      	adds	r2, r6, #1
 80051c8:	9219      	str	r2, [sp, #100]	; 0x64
 80051ca:	7872      	ldrb	r2, [r6, #1]
 80051cc:	2a2b      	cmp	r2, #43	; 0x2b
 80051ce:	d079      	beq.n	80052c4 <_strtod_l+0x27c>
 80051d0:	2a2d      	cmp	r2, #45	; 0x2d
 80051d2:	f000 8083 	beq.w	80052dc <_strtod_l+0x294>
 80051d6:	2700      	movs	r7, #0
 80051d8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80051dc:	2909      	cmp	r1, #9
 80051de:	f240 8083 	bls.w	80052e8 <_strtod_l+0x2a0>
 80051e2:	9619      	str	r6, [sp, #100]	; 0x64
 80051e4:	2500      	movs	r5, #0
 80051e6:	e09f      	b.n	8005328 <_strtod_l+0x2e0>
 80051e8:	2300      	movs	r3, #0
 80051ea:	e7c8      	b.n	800517e <_strtod_l+0x136>
 80051ec:	f1bb 0f08 	cmp.w	fp, #8
 80051f0:	bfd5      	itete	le
 80051f2:	9906      	ldrle	r1, [sp, #24]
 80051f4:	9905      	ldrgt	r1, [sp, #20]
 80051f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80051fa:	fb02 3301 	mlagt	r3, r2, r1, r3
 80051fe:	f100 0001 	add.w	r0, r0, #1
 8005202:	bfd4      	ite	le
 8005204:	9306      	strle	r3, [sp, #24]
 8005206:	9305      	strgt	r3, [sp, #20]
 8005208:	f10b 0b01 	add.w	fp, fp, #1
 800520c:	9019      	str	r0, [sp, #100]	; 0x64
 800520e:	e7be      	b.n	800518e <_strtod_l+0x146>
 8005210:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005212:	191a      	adds	r2, r3, r4
 8005214:	9219      	str	r2, [sp, #100]	; 0x64
 8005216:	5d1a      	ldrb	r2, [r3, r4]
 8005218:	f1bb 0f00 	cmp.w	fp, #0
 800521c:	d036      	beq.n	800528c <_strtod_l+0x244>
 800521e:	465c      	mov	r4, fp
 8005220:	9004      	str	r0, [sp, #16]
 8005222:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005226:	2b09      	cmp	r3, #9
 8005228:	d912      	bls.n	8005250 <_strtod_l+0x208>
 800522a:	2301      	movs	r3, #1
 800522c:	e7c1      	b.n	80051b2 <_strtod_l+0x16a>
 800522e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005230:	3001      	adds	r0, #1
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	9219      	str	r2, [sp, #100]	; 0x64
 8005236:	785a      	ldrb	r2, [r3, #1]
 8005238:	2a30      	cmp	r2, #48	; 0x30
 800523a:	d0f8      	beq.n	800522e <_strtod_l+0x1e6>
 800523c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005240:	2b08      	cmp	r3, #8
 8005242:	f200 84d5 	bhi.w	8005bf0 <_strtod_l+0xba8>
 8005246:	9004      	str	r0, [sp, #16]
 8005248:	2000      	movs	r0, #0
 800524a:	4604      	mov	r4, r0
 800524c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800524e:	9308      	str	r3, [sp, #32]
 8005250:	3a30      	subs	r2, #48	; 0x30
 8005252:	f100 0301 	add.w	r3, r0, #1
 8005256:	d013      	beq.n	8005280 <_strtod_l+0x238>
 8005258:	9904      	ldr	r1, [sp, #16]
 800525a:	1905      	adds	r5, r0, r4
 800525c:	4419      	add	r1, r3
 800525e:	9104      	str	r1, [sp, #16]
 8005260:	4623      	mov	r3, r4
 8005262:	210a      	movs	r1, #10
 8005264:	42ab      	cmp	r3, r5
 8005266:	d113      	bne.n	8005290 <_strtod_l+0x248>
 8005268:	1823      	adds	r3, r4, r0
 800526a:	2b08      	cmp	r3, #8
 800526c:	f104 0401 	add.w	r4, r4, #1
 8005270:	4404      	add	r4, r0
 8005272:	dc1b      	bgt.n	80052ac <_strtod_l+0x264>
 8005274:	230a      	movs	r3, #10
 8005276:	9906      	ldr	r1, [sp, #24]
 8005278:	fb03 2301 	mla	r3, r3, r1, r2
 800527c:	9306      	str	r3, [sp, #24]
 800527e:	2300      	movs	r3, #0
 8005280:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005282:	4618      	mov	r0, r3
 8005284:	1c51      	adds	r1, r2, #1
 8005286:	9119      	str	r1, [sp, #100]	; 0x64
 8005288:	7852      	ldrb	r2, [r2, #1]
 800528a:	e7ca      	b.n	8005222 <_strtod_l+0x1da>
 800528c:	4658      	mov	r0, fp
 800528e:	e7d3      	b.n	8005238 <_strtod_l+0x1f0>
 8005290:	2b08      	cmp	r3, #8
 8005292:	dc04      	bgt.n	800529e <_strtod_l+0x256>
 8005294:	9f06      	ldr	r7, [sp, #24]
 8005296:	434f      	muls	r7, r1
 8005298:	9706      	str	r7, [sp, #24]
 800529a:	3301      	adds	r3, #1
 800529c:	e7e2      	b.n	8005264 <_strtod_l+0x21c>
 800529e:	1c5f      	adds	r7, r3, #1
 80052a0:	2f10      	cmp	r7, #16
 80052a2:	bfde      	ittt	le
 80052a4:	9f05      	ldrle	r7, [sp, #20]
 80052a6:	434f      	mulle	r7, r1
 80052a8:	9705      	strle	r7, [sp, #20]
 80052aa:	e7f6      	b.n	800529a <_strtod_l+0x252>
 80052ac:	2c10      	cmp	r4, #16
 80052ae:	bfdf      	itttt	le
 80052b0:	230a      	movle	r3, #10
 80052b2:	9905      	ldrle	r1, [sp, #20]
 80052b4:	fb03 2301 	mlale	r3, r3, r1, r2
 80052b8:	9305      	strle	r3, [sp, #20]
 80052ba:	e7e0      	b.n	800527e <_strtod_l+0x236>
 80052bc:	2300      	movs	r3, #0
 80052be:	9304      	str	r3, [sp, #16]
 80052c0:	2301      	movs	r3, #1
 80052c2:	e77b      	b.n	80051bc <_strtod_l+0x174>
 80052c4:	2700      	movs	r7, #0
 80052c6:	1cb2      	adds	r2, r6, #2
 80052c8:	9219      	str	r2, [sp, #100]	; 0x64
 80052ca:	78b2      	ldrb	r2, [r6, #2]
 80052cc:	e784      	b.n	80051d8 <_strtod_l+0x190>
 80052ce:	bf00      	nop
 80052d0:	0800acb8 	.word	0x0800acb8
 80052d4:	0800aad4 	.word	0x0800aad4
 80052d8:	7ff00000 	.word	0x7ff00000
 80052dc:	2701      	movs	r7, #1
 80052de:	e7f2      	b.n	80052c6 <_strtod_l+0x27e>
 80052e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80052e2:	1c51      	adds	r1, r2, #1
 80052e4:	9119      	str	r1, [sp, #100]	; 0x64
 80052e6:	7852      	ldrb	r2, [r2, #1]
 80052e8:	2a30      	cmp	r2, #48	; 0x30
 80052ea:	d0f9      	beq.n	80052e0 <_strtod_l+0x298>
 80052ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80052f0:	2908      	cmp	r1, #8
 80052f2:	f63f af77 	bhi.w	80051e4 <_strtod_l+0x19c>
 80052f6:	f04f 0e0a 	mov.w	lr, #10
 80052fa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80052fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005300:	9209      	str	r2, [sp, #36]	; 0x24
 8005302:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005304:	1c51      	adds	r1, r2, #1
 8005306:	9119      	str	r1, [sp, #100]	; 0x64
 8005308:	7852      	ldrb	r2, [r2, #1]
 800530a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800530e:	2d09      	cmp	r5, #9
 8005310:	d935      	bls.n	800537e <_strtod_l+0x336>
 8005312:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005314:	1b49      	subs	r1, r1, r5
 8005316:	2908      	cmp	r1, #8
 8005318:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800531c:	dc02      	bgt.n	8005324 <_strtod_l+0x2dc>
 800531e:	4565      	cmp	r5, ip
 8005320:	bfa8      	it	ge
 8005322:	4665      	movge	r5, ip
 8005324:	b107      	cbz	r7, 8005328 <_strtod_l+0x2e0>
 8005326:	426d      	negs	r5, r5
 8005328:	2c00      	cmp	r4, #0
 800532a:	d14c      	bne.n	80053c6 <_strtod_l+0x37e>
 800532c:	9907      	ldr	r1, [sp, #28]
 800532e:	4301      	orrs	r1, r0
 8005330:	f47f aecb 	bne.w	80050ca <_strtod_l+0x82>
 8005334:	2b00      	cmp	r3, #0
 8005336:	f47f aee4 	bne.w	8005102 <_strtod_l+0xba>
 800533a:	2a69      	cmp	r2, #105	; 0x69
 800533c:	d026      	beq.n	800538c <_strtod_l+0x344>
 800533e:	dc23      	bgt.n	8005388 <_strtod_l+0x340>
 8005340:	2a49      	cmp	r2, #73	; 0x49
 8005342:	d023      	beq.n	800538c <_strtod_l+0x344>
 8005344:	2a4e      	cmp	r2, #78	; 0x4e
 8005346:	f47f aedc 	bne.w	8005102 <_strtod_l+0xba>
 800534a:	499d      	ldr	r1, [pc, #628]	; (80055c0 <_strtod_l+0x578>)
 800534c:	a819      	add	r0, sp, #100	; 0x64
 800534e:	f001 fe2d 	bl	8006fac <__match>
 8005352:	2800      	cmp	r0, #0
 8005354:	f43f aed5 	beq.w	8005102 <_strtod_l+0xba>
 8005358:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b28      	cmp	r3, #40	; 0x28
 800535e:	d12c      	bne.n	80053ba <_strtod_l+0x372>
 8005360:	4998      	ldr	r1, [pc, #608]	; (80055c4 <_strtod_l+0x57c>)
 8005362:	aa1c      	add	r2, sp, #112	; 0x70
 8005364:	a819      	add	r0, sp, #100	; 0x64
 8005366:	f001 fe35 	bl	8006fd4 <__hexnan>
 800536a:	2805      	cmp	r0, #5
 800536c:	d125      	bne.n	80053ba <_strtod_l+0x372>
 800536e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005370:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005374:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005378:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800537c:	e6a5      	b.n	80050ca <_strtod_l+0x82>
 800537e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005382:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005386:	e7bc      	b.n	8005302 <_strtod_l+0x2ba>
 8005388:	2a6e      	cmp	r2, #110	; 0x6e
 800538a:	e7dc      	b.n	8005346 <_strtod_l+0x2fe>
 800538c:	498e      	ldr	r1, [pc, #568]	; (80055c8 <_strtod_l+0x580>)
 800538e:	a819      	add	r0, sp, #100	; 0x64
 8005390:	f001 fe0c 	bl	8006fac <__match>
 8005394:	2800      	cmp	r0, #0
 8005396:	f43f aeb4 	beq.w	8005102 <_strtod_l+0xba>
 800539a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800539c:	498b      	ldr	r1, [pc, #556]	; (80055cc <_strtod_l+0x584>)
 800539e:	3b01      	subs	r3, #1
 80053a0:	a819      	add	r0, sp, #100	; 0x64
 80053a2:	9319      	str	r3, [sp, #100]	; 0x64
 80053a4:	f001 fe02 	bl	8006fac <__match>
 80053a8:	b910      	cbnz	r0, 80053b0 <_strtod_l+0x368>
 80053aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80053ac:	3301      	adds	r3, #1
 80053ae:	9319      	str	r3, [sp, #100]	; 0x64
 80053b0:	f04f 0800 	mov.w	r8, #0
 80053b4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80055d0 <_strtod_l+0x588>
 80053b8:	e687      	b.n	80050ca <_strtod_l+0x82>
 80053ba:	4886      	ldr	r0, [pc, #536]	; (80055d4 <_strtod_l+0x58c>)
 80053bc:	f002 fe64 	bl	8008088 <nan>
 80053c0:	4680      	mov	r8, r0
 80053c2:	4689      	mov	r9, r1
 80053c4:	e681      	b.n	80050ca <_strtod_l+0x82>
 80053c6:	9b04      	ldr	r3, [sp, #16]
 80053c8:	f1bb 0f00 	cmp.w	fp, #0
 80053cc:	bf08      	it	eq
 80053ce:	46a3      	moveq	fp, r4
 80053d0:	1aeb      	subs	r3, r5, r3
 80053d2:	2c10      	cmp	r4, #16
 80053d4:	9806      	ldr	r0, [sp, #24]
 80053d6:	4626      	mov	r6, r4
 80053d8:	9307      	str	r3, [sp, #28]
 80053da:	bfa8      	it	ge
 80053dc:	2610      	movge	r6, #16
 80053de:	f7fb f80b 	bl	80003f8 <__aeabi_ui2d>
 80053e2:	2c09      	cmp	r4, #9
 80053e4:	4680      	mov	r8, r0
 80053e6:	4689      	mov	r9, r1
 80053e8:	dd13      	ble.n	8005412 <_strtod_l+0x3ca>
 80053ea:	4b7b      	ldr	r3, [pc, #492]	; (80055d8 <_strtod_l+0x590>)
 80053ec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80053f0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80053f4:	f7fb f87a 	bl	80004ec <__aeabi_dmul>
 80053f8:	4680      	mov	r8, r0
 80053fa:	9805      	ldr	r0, [sp, #20]
 80053fc:	4689      	mov	r9, r1
 80053fe:	f7fa fffb 	bl	80003f8 <__aeabi_ui2d>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4640      	mov	r0, r8
 8005408:	4649      	mov	r1, r9
 800540a:	f7fa feb9 	bl	8000180 <__adddf3>
 800540e:	4680      	mov	r8, r0
 8005410:	4689      	mov	r9, r1
 8005412:	2c0f      	cmp	r4, #15
 8005414:	dc36      	bgt.n	8005484 <_strtod_l+0x43c>
 8005416:	9b07      	ldr	r3, [sp, #28]
 8005418:	2b00      	cmp	r3, #0
 800541a:	f43f ae56 	beq.w	80050ca <_strtod_l+0x82>
 800541e:	dd22      	ble.n	8005466 <_strtod_l+0x41e>
 8005420:	2b16      	cmp	r3, #22
 8005422:	dc09      	bgt.n	8005438 <_strtod_l+0x3f0>
 8005424:	496c      	ldr	r1, [pc, #432]	; (80055d8 <_strtod_l+0x590>)
 8005426:	4642      	mov	r2, r8
 8005428:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800542c:	464b      	mov	r3, r9
 800542e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005432:	f7fb f85b 	bl	80004ec <__aeabi_dmul>
 8005436:	e7c3      	b.n	80053c0 <_strtod_l+0x378>
 8005438:	9a07      	ldr	r2, [sp, #28]
 800543a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800543e:	4293      	cmp	r3, r2
 8005440:	db20      	blt.n	8005484 <_strtod_l+0x43c>
 8005442:	4d65      	ldr	r5, [pc, #404]	; (80055d8 <_strtod_l+0x590>)
 8005444:	f1c4 040f 	rsb	r4, r4, #15
 8005448:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800544c:	4642      	mov	r2, r8
 800544e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005452:	464b      	mov	r3, r9
 8005454:	f7fb f84a 	bl	80004ec <__aeabi_dmul>
 8005458:	9b07      	ldr	r3, [sp, #28]
 800545a:	1b1c      	subs	r4, r3, r4
 800545c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005460:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005464:	e7e5      	b.n	8005432 <_strtod_l+0x3ea>
 8005466:	9b07      	ldr	r3, [sp, #28]
 8005468:	3316      	adds	r3, #22
 800546a:	db0b      	blt.n	8005484 <_strtod_l+0x43c>
 800546c:	9b04      	ldr	r3, [sp, #16]
 800546e:	4640      	mov	r0, r8
 8005470:	1b5d      	subs	r5, r3, r5
 8005472:	4b59      	ldr	r3, [pc, #356]	; (80055d8 <_strtod_l+0x590>)
 8005474:	4649      	mov	r1, r9
 8005476:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800547a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800547e:	f7fb f95f 	bl	8000740 <__aeabi_ddiv>
 8005482:	e79d      	b.n	80053c0 <_strtod_l+0x378>
 8005484:	9b07      	ldr	r3, [sp, #28]
 8005486:	1ba6      	subs	r6, r4, r6
 8005488:	441e      	add	r6, r3
 800548a:	2e00      	cmp	r6, #0
 800548c:	dd74      	ble.n	8005578 <_strtod_l+0x530>
 800548e:	f016 030f 	ands.w	r3, r6, #15
 8005492:	d00a      	beq.n	80054aa <_strtod_l+0x462>
 8005494:	4950      	ldr	r1, [pc, #320]	; (80055d8 <_strtod_l+0x590>)
 8005496:	4642      	mov	r2, r8
 8005498:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800549c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054a0:	464b      	mov	r3, r9
 80054a2:	f7fb f823 	bl	80004ec <__aeabi_dmul>
 80054a6:	4680      	mov	r8, r0
 80054a8:	4689      	mov	r9, r1
 80054aa:	f036 060f 	bics.w	r6, r6, #15
 80054ae:	d052      	beq.n	8005556 <_strtod_l+0x50e>
 80054b0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80054b4:	dd27      	ble.n	8005506 <_strtod_l+0x4be>
 80054b6:	f04f 0b00 	mov.w	fp, #0
 80054ba:	f8cd b010 	str.w	fp, [sp, #16]
 80054be:	f8cd b020 	str.w	fp, [sp, #32]
 80054c2:	f8cd b018 	str.w	fp, [sp, #24]
 80054c6:	2322      	movs	r3, #34	; 0x22
 80054c8:	f04f 0800 	mov.w	r8, #0
 80054cc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80055d0 <_strtod_l+0x588>
 80054d0:	f8ca 3000 	str.w	r3, [sl]
 80054d4:	9b08      	ldr	r3, [sp, #32]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f43f adf7 	beq.w	80050ca <_strtod_l+0x82>
 80054dc:	4650      	mov	r0, sl
 80054de:	991a      	ldr	r1, [sp, #104]	; 0x68
 80054e0:	f001 fe92 	bl	8007208 <_Bfree>
 80054e4:	4650      	mov	r0, sl
 80054e6:	9906      	ldr	r1, [sp, #24]
 80054e8:	f001 fe8e 	bl	8007208 <_Bfree>
 80054ec:	4650      	mov	r0, sl
 80054ee:	9904      	ldr	r1, [sp, #16]
 80054f0:	f001 fe8a 	bl	8007208 <_Bfree>
 80054f4:	4650      	mov	r0, sl
 80054f6:	9908      	ldr	r1, [sp, #32]
 80054f8:	f001 fe86 	bl	8007208 <_Bfree>
 80054fc:	4659      	mov	r1, fp
 80054fe:	4650      	mov	r0, sl
 8005500:	f001 fe82 	bl	8007208 <_Bfree>
 8005504:	e5e1      	b.n	80050ca <_strtod_l+0x82>
 8005506:	4b35      	ldr	r3, [pc, #212]	; (80055dc <_strtod_l+0x594>)
 8005508:	4640      	mov	r0, r8
 800550a:	9305      	str	r3, [sp, #20]
 800550c:	2300      	movs	r3, #0
 800550e:	4649      	mov	r1, r9
 8005510:	461f      	mov	r7, r3
 8005512:	1136      	asrs	r6, r6, #4
 8005514:	2e01      	cmp	r6, #1
 8005516:	dc21      	bgt.n	800555c <_strtod_l+0x514>
 8005518:	b10b      	cbz	r3, 800551e <_strtod_l+0x4d6>
 800551a:	4680      	mov	r8, r0
 800551c:	4689      	mov	r9, r1
 800551e:	4b2f      	ldr	r3, [pc, #188]	; (80055dc <_strtod_l+0x594>)
 8005520:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005524:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005528:	4642      	mov	r2, r8
 800552a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800552e:	464b      	mov	r3, r9
 8005530:	f7fa ffdc 	bl	80004ec <__aeabi_dmul>
 8005534:	4b26      	ldr	r3, [pc, #152]	; (80055d0 <_strtod_l+0x588>)
 8005536:	460a      	mov	r2, r1
 8005538:	400b      	ands	r3, r1
 800553a:	4929      	ldr	r1, [pc, #164]	; (80055e0 <_strtod_l+0x598>)
 800553c:	4680      	mov	r8, r0
 800553e:	428b      	cmp	r3, r1
 8005540:	d8b9      	bhi.n	80054b6 <_strtod_l+0x46e>
 8005542:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005546:	428b      	cmp	r3, r1
 8005548:	bf86      	itte	hi
 800554a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800554e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80055e4 <_strtod_l+0x59c>
 8005552:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005556:	2300      	movs	r3, #0
 8005558:	9305      	str	r3, [sp, #20]
 800555a:	e07f      	b.n	800565c <_strtod_l+0x614>
 800555c:	07f2      	lsls	r2, r6, #31
 800555e:	d505      	bpl.n	800556c <_strtod_l+0x524>
 8005560:	9b05      	ldr	r3, [sp, #20]
 8005562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005566:	f7fa ffc1 	bl	80004ec <__aeabi_dmul>
 800556a:	2301      	movs	r3, #1
 800556c:	9a05      	ldr	r2, [sp, #20]
 800556e:	3701      	adds	r7, #1
 8005570:	3208      	adds	r2, #8
 8005572:	1076      	asrs	r6, r6, #1
 8005574:	9205      	str	r2, [sp, #20]
 8005576:	e7cd      	b.n	8005514 <_strtod_l+0x4cc>
 8005578:	d0ed      	beq.n	8005556 <_strtod_l+0x50e>
 800557a:	4276      	negs	r6, r6
 800557c:	f016 020f 	ands.w	r2, r6, #15
 8005580:	d00a      	beq.n	8005598 <_strtod_l+0x550>
 8005582:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <_strtod_l+0x590>)
 8005584:	4640      	mov	r0, r8
 8005586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800558a:	4649      	mov	r1, r9
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f7fb f8d6 	bl	8000740 <__aeabi_ddiv>
 8005594:	4680      	mov	r8, r0
 8005596:	4689      	mov	r9, r1
 8005598:	1136      	asrs	r6, r6, #4
 800559a:	d0dc      	beq.n	8005556 <_strtod_l+0x50e>
 800559c:	2e1f      	cmp	r6, #31
 800559e:	dd23      	ble.n	80055e8 <_strtod_l+0x5a0>
 80055a0:	f04f 0b00 	mov.w	fp, #0
 80055a4:	f8cd b010 	str.w	fp, [sp, #16]
 80055a8:	f8cd b020 	str.w	fp, [sp, #32]
 80055ac:	f8cd b018 	str.w	fp, [sp, #24]
 80055b0:	2322      	movs	r3, #34	; 0x22
 80055b2:	f04f 0800 	mov.w	r8, #0
 80055b6:	f04f 0900 	mov.w	r9, #0
 80055ba:	f8ca 3000 	str.w	r3, [sl]
 80055be:	e789      	b.n	80054d4 <_strtod_l+0x48c>
 80055c0:	0800aaad 	.word	0x0800aaad
 80055c4:	0800aae8 	.word	0x0800aae8
 80055c8:	0800aaa5 	.word	0x0800aaa5
 80055cc:	0800abdb 	.word	0x0800abdb
 80055d0:	7ff00000 	.word	0x7ff00000
 80055d4:	0800abd7 	.word	0x0800abd7
 80055d8:	0800ad50 	.word	0x0800ad50
 80055dc:	0800ad28 	.word	0x0800ad28
 80055e0:	7ca00000 	.word	0x7ca00000
 80055e4:	7fefffff 	.word	0x7fefffff
 80055e8:	f016 0310 	ands.w	r3, r6, #16
 80055ec:	bf18      	it	ne
 80055ee:	236a      	movne	r3, #106	; 0x6a
 80055f0:	4640      	mov	r0, r8
 80055f2:	9305      	str	r3, [sp, #20]
 80055f4:	4649      	mov	r1, r9
 80055f6:	2300      	movs	r3, #0
 80055f8:	4fb0      	ldr	r7, [pc, #704]	; (80058bc <_strtod_l+0x874>)
 80055fa:	07f2      	lsls	r2, r6, #31
 80055fc:	d504      	bpl.n	8005608 <_strtod_l+0x5c0>
 80055fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005602:	f7fa ff73 	bl	80004ec <__aeabi_dmul>
 8005606:	2301      	movs	r3, #1
 8005608:	1076      	asrs	r6, r6, #1
 800560a:	f107 0708 	add.w	r7, r7, #8
 800560e:	d1f4      	bne.n	80055fa <_strtod_l+0x5b2>
 8005610:	b10b      	cbz	r3, 8005616 <_strtod_l+0x5ce>
 8005612:	4680      	mov	r8, r0
 8005614:	4689      	mov	r9, r1
 8005616:	9b05      	ldr	r3, [sp, #20]
 8005618:	b1c3      	cbz	r3, 800564c <_strtod_l+0x604>
 800561a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800561e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005622:	2b00      	cmp	r3, #0
 8005624:	4649      	mov	r1, r9
 8005626:	dd11      	ble.n	800564c <_strtod_l+0x604>
 8005628:	2b1f      	cmp	r3, #31
 800562a:	f340 8127 	ble.w	800587c <_strtod_l+0x834>
 800562e:	2b34      	cmp	r3, #52	; 0x34
 8005630:	bfd8      	it	le
 8005632:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005636:	f04f 0800 	mov.w	r8, #0
 800563a:	bfcf      	iteee	gt
 800563c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005640:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005644:	fa03 f202 	lslle.w	r2, r3, r2
 8005648:	ea02 0901 	andle.w	r9, r2, r1
 800564c:	2200      	movs	r2, #0
 800564e:	2300      	movs	r3, #0
 8005650:	4640      	mov	r0, r8
 8005652:	4649      	mov	r1, r9
 8005654:	f7fb f9b2 	bl	80009bc <__aeabi_dcmpeq>
 8005658:	2800      	cmp	r0, #0
 800565a:	d1a1      	bne.n	80055a0 <_strtod_l+0x558>
 800565c:	9b06      	ldr	r3, [sp, #24]
 800565e:	465a      	mov	r2, fp
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	4650      	mov	r0, sl
 8005664:	4623      	mov	r3, r4
 8005666:	9908      	ldr	r1, [sp, #32]
 8005668:	f001 fe36 	bl	80072d8 <__s2b>
 800566c:	9008      	str	r0, [sp, #32]
 800566e:	2800      	cmp	r0, #0
 8005670:	f43f af21 	beq.w	80054b6 <_strtod_l+0x46e>
 8005674:	9b04      	ldr	r3, [sp, #16]
 8005676:	f04f 0b00 	mov.w	fp, #0
 800567a:	1b5d      	subs	r5, r3, r5
 800567c:	9b07      	ldr	r3, [sp, #28]
 800567e:	f8cd b010 	str.w	fp, [sp, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	bfb4      	ite	lt
 8005686:	462b      	movlt	r3, r5
 8005688:	2300      	movge	r3, #0
 800568a:	930e      	str	r3, [sp, #56]	; 0x38
 800568c:	9b07      	ldr	r3, [sp, #28]
 800568e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005692:	9314      	str	r3, [sp, #80]	; 0x50
 8005694:	9b08      	ldr	r3, [sp, #32]
 8005696:	4650      	mov	r0, sl
 8005698:	6859      	ldr	r1, [r3, #4]
 800569a:	f001 fd75 	bl	8007188 <_Balloc>
 800569e:	9006      	str	r0, [sp, #24]
 80056a0:	2800      	cmp	r0, #0
 80056a2:	f43f af10 	beq.w	80054c6 <_strtod_l+0x47e>
 80056a6:	9b08      	ldr	r3, [sp, #32]
 80056a8:	300c      	adds	r0, #12
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	f103 010c 	add.w	r1, r3, #12
 80056b0:	3202      	adds	r2, #2
 80056b2:	0092      	lsls	r2, r2, #2
 80056b4:	f001 fd4e 	bl	8007154 <memcpy>
 80056b8:	ab1c      	add	r3, sp, #112	; 0x70
 80056ba:	9301      	str	r3, [sp, #4]
 80056bc:	ab1b      	add	r3, sp, #108	; 0x6c
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	4642      	mov	r2, r8
 80056c2:	464b      	mov	r3, r9
 80056c4:	4650      	mov	r0, sl
 80056c6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80056ca:	f002 f947 	bl	800795c <__d2b>
 80056ce:	901a      	str	r0, [sp, #104]	; 0x68
 80056d0:	2800      	cmp	r0, #0
 80056d2:	f43f aef8 	beq.w	80054c6 <_strtod_l+0x47e>
 80056d6:	2101      	movs	r1, #1
 80056d8:	4650      	mov	r0, sl
 80056da:	f001 fe95 	bl	8007408 <__i2b>
 80056de:	4603      	mov	r3, r0
 80056e0:	9004      	str	r0, [sp, #16]
 80056e2:	2800      	cmp	r0, #0
 80056e4:	f43f aeef 	beq.w	80054c6 <_strtod_l+0x47e>
 80056e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80056ea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80056ec:	2d00      	cmp	r5, #0
 80056ee:	bfab      	itete	ge
 80056f0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80056f2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80056f4:	18ee      	addge	r6, r5, r3
 80056f6:	1b5c      	sublt	r4, r3, r5
 80056f8:	9b05      	ldr	r3, [sp, #20]
 80056fa:	bfa8      	it	ge
 80056fc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80056fe:	eba5 0503 	sub.w	r5, r5, r3
 8005702:	4415      	add	r5, r2
 8005704:	4b6e      	ldr	r3, [pc, #440]	; (80058c0 <_strtod_l+0x878>)
 8005706:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800570a:	bfb8      	it	lt
 800570c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800570e:	429d      	cmp	r5, r3
 8005710:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005714:	f280 80c4 	bge.w	80058a0 <_strtod_l+0x858>
 8005718:	1b5b      	subs	r3, r3, r5
 800571a:	2b1f      	cmp	r3, #31
 800571c:	f04f 0701 	mov.w	r7, #1
 8005720:	eba2 0203 	sub.w	r2, r2, r3
 8005724:	f300 80b1 	bgt.w	800588a <_strtod_l+0x842>
 8005728:	2500      	movs	r5, #0
 800572a:	fa07 f303 	lsl.w	r3, r7, r3
 800572e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005730:	18b7      	adds	r7, r6, r2
 8005732:	9b05      	ldr	r3, [sp, #20]
 8005734:	42be      	cmp	r6, r7
 8005736:	4414      	add	r4, r2
 8005738:	441c      	add	r4, r3
 800573a:	4633      	mov	r3, r6
 800573c:	bfa8      	it	ge
 800573e:	463b      	movge	r3, r7
 8005740:	42a3      	cmp	r3, r4
 8005742:	bfa8      	it	ge
 8005744:	4623      	movge	r3, r4
 8005746:	2b00      	cmp	r3, #0
 8005748:	bfc2      	ittt	gt
 800574a:	1aff      	subgt	r7, r7, r3
 800574c:	1ae4      	subgt	r4, r4, r3
 800574e:	1af6      	subgt	r6, r6, r3
 8005750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005752:	2b00      	cmp	r3, #0
 8005754:	dd17      	ble.n	8005786 <_strtod_l+0x73e>
 8005756:	461a      	mov	r2, r3
 8005758:	4650      	mov	r0, sl
 800575a:	9904      	ldr	r1, [sp, #16]
 800575c:	f001 ff12 	bl	8007584 <__pow5mult>
 8005760:	9004      	str	r0, [sp, #16]
 8005762:	2800      	cmp	r0, #0
 8005764:	f43f aeaf 	beq.w	80054c6 <_strtod_l+0x47e>
 8005768:	4601      	mov	r1, r0
 800576a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800576c:	4650      	mov	r0, sl
 800576e:	f001 fe61 	bl	8007434 <__multiply>
 8005772:	9009      	str	r0, [sp, #36]	; 0x24
 8005774:	2800      	cmp	r0, #0
 8005776:	f43f aea6 	beq.w	80054c6 <_strtod_l+0x47e>
 800577a:	4650      	mov	r0, sl
 800577c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800577e:	f001 fd43 	bl	8007208 <_Bfree>
 8005782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005784:	931a      	str	r3, [sp, #104]	; 0x68
 8005786:	2f00      	cmp	r7, #0
 8005788:	f300 808e 	bgt.w	80058a8 <_strtod_l+0x860>
 800578c:	9b07      	ldr	r3, [sp, #28]
 800578e:	2b00      	cmp	r3, #0
 8005790:	dd08      	ble.n	80057a4 <_strtod_l+0x75c>
 8005792:	4650      	mov	r0, sl
 8005794:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005796:	9906      	ldr	r1, [sp, #24]
 8005798:	f001 fef4 	bl	8007584 <__pow5mult>
 800579c:	9006      	str	r0, [sp, #24]
 800579e:	2800      	cmp	r0, #0
 80057a0:	f43f ae91 	beq.w	80054c6 <_strtod_l+0x47e>
 80057a4:	2c00      	cmp	r4, #0
 80057a6:	dd08      	ble.n	80057ba <_strtod_l+0x772>
 80057a8:	4622      	mov	r2, r4
 80057aa:	4650      	mov	r0, sl
 80057ac:	9906      	ldr	r1, [sp, #24]
 80057ae:	f001 ff43 	bl	8007638 <__lshift>
 80057b2:	9006      	str	r0, [sp, #24]
 80057b4:	2800      	cmp	r0, #0
 80057b6:	f43f ae86 	beq.w	80054c6 <_strtod_l+0x47e>
 80057ba:	2e00      	cmp	r6, #0
 80057bc:	dd08      	ble.n	80057d0 <_strtod_l+0x788>
 80057be:	4632      	mov	r2, r6
 80057c0:	4650      	mov	r0, sl
 80057c2:	9904      	ldr	r1, [sp, #16]
 80057c4:	f001 ff38 	bl	8007638 <__lshift>
 80057c8:	9004      	str	r0, [sp, #16]
 80057ca:	2800      	cmp	r0, #0
 80057cc:	f43f ae7b 	beq.w	80054c6 <_strtod_l+0x47e>
 80057d0:	4650      	mov	r0, sl
 80057d2:	9a06      	ldr	r2, [sp, #24]
 80057d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80057d6:	f001 ffbb 	bl	8007750 <__mdiff>
 80057da:	4683      	mov	fp, r0
 80057dc:	2800      	cmp	r0, #0
 80057de:	f43f ae72 	beq.w	80054c6 <_strtod_l+0x47e>
 80057e2:	2400      	movs	r4, #0
 80057e4:	68c3      	ldr	r3, [r0, #12]
 80057e6:	9904      	ldr	r1, [sp, #16]
 80057e8:	60c4      	str	r4, [r0, #12]
 80057ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80057ec:	f001 ff94 	bl	8007718 <__mcmp>
 80057f0:	42a0      	cmp	r0, r4
 80057f2:	da6b      	bge.n	80058cc <_strtod_l+0x884>
 80057f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057f6:	ea53 0308 	orrs.w	r3, r3, r8
 80057fa:	f040 8091 	bne.w	8005920 <_strtod_l+0x8d8>
 80057fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005802:	2b00      	cmp	r3, #0
 8005804:	f040 808c 	bne.w	8005920 <_strtod_l+0x8d8>
 8005808:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800580c:	0d1b      	lsrs	r3, r3, #20
 800580e:	051b      	lsls	r3, r3, #20
 8005810:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005814:	f240 8084 	bls.w	8005920 <_strtod_l+0x8d8>
 8005818:	f8db 3014 	ldr.w	r3, [fp, #20]
 800581c:	b91b      	cbnz	r3, 8005826 <_strtod_l+0x7de>
 800581e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005822:	2b01      	cmp	r3, #1
 8005824:	dd7c      	ble.n	8005920 <_strtod_l+0x8d8>
 8005826:	4659      	mov	r1, fp
 8005828:	2201      	movs	r2, #1
 800582a:	4650      	mov	r0, sl
 800582c:	f001 ff04 	bl	8007638 <__lshift>
 8005830:	9904      	ldr	r1, [sp, #16]
 8005832:	4683      	mov	fp, r0
 8005834:	f001 ff70 	bl	8007718 <__mcmp>
 8005838:	2800      	cmp	r0, #0
 800583a:	dd71      	ble.n	8005920 <_strtod_l+0x8d8>
 800583c:	9905      	ldr	r1, [sp, #20]
 800583e:	464b      	mov	r3, r9
 8005840:	4a20      	ldr	r2, [pc, #128]	; (80058c4 <_strtod_l+0x87c>)
 8005842:	2900      	cmp	r1, #0
 8005844:	f000 808c 	beq.w	8005960 <_strtod_l+0x918>
 8005848:	ea02 0109 	and.w	r1, r2, r9
 800584c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005850:	f300 8086 	bgt.w	8005960 <_strtod_l+0x918>
 8005854:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005858:	f77f aeaa 	ble.w	80055b0 <_strtod_l+0x568>
 800585c:	4640      	mov	r0, r8
 800585e:	4649      	mov	r1, r9
 8005860:	4b19      	ldr	r3, [pc, #100]	; (80058c8 <_strtod_l+0x880>)
 8005862:	2200      	movs	r2, #0
 8005864:	f7fa fe42 	bl	80004ec <__aeabi_dmul>
 8005868:	460b      	mov	r3, r1
 800586a:	4303      	orrs	r3, r0
 800586c:	bf08      	it	eq
 800586e:	2322      	moveq	r3, #34	; 0x22
 8005870:	4680      	mov	r8, r0
 8005872:	4689      	mov	r9, r1
 8005874:	bf08      	it	eq
 8005876:	f8ca 3000 	streq.w	r3, [sl]
 800587a:	e62f      	b.n	80054dc <_strtod_l+0x494>
 800587c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	ea03 0808 	and.w	r8, r3, r8
 8005888:	e6e0      	b.n	800564c <_strtod_l+0x604>
 800588a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800588e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005892:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005896:	35e2      	adds	r5, #226	; 0xe2
 8005898:	fa07 f505 	lsl.w	r5, r7, r5
 800589c:	970f      	str	r7, [sp, #60]	; 0x3c
 800589e:	e747      	b.n	8005730 <_strtod_l+0x6e8>
 80058a0:	2301      	movs	r3, #1
 80058a2:	2500      	movs	r5, #0
 80058a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80058a6:	e743      	b.n	8005730 <_strtod_l+0x6e8>
 80058a8:	463a      	mov	r2, r7
 80058aa:	4650      	mov	r0, sl
 80058ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80058ae:	f001 fec3 	bl	8007638 <__lshift>
 80058b2:	901a      	str	r0, [sp, #104]	; 0x68
 80058b4:	2800      	cmp	r0, #0
 80058b6:	f47f af69 	bne.w	800578c <_strtod_l+0x744>
 80058ba:	e604      	b.n	80054c6 <_strtod_l+0x47e>
 80058bc:	0800ab00 	.word	0x0800ab00
 80058c0:	fffffc02 	.word	0xfffffc02
 80058c4:	7ff00000 	.word	0x7ff00000
 80058c8:	39500000 	.word	0x39500000
 80058cc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80058d0:	d165      	bne.n	800599e <_strtod_l+0x956>
 80058d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058d8:	b35a      	cbz	r2, 8005932 <_strtod_l+0x8ea>
 80058da:	4a99      	ldr	r2, [pc, #612]	; (8005b40 <_strtod_l+0xaf8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d12b      	bne.n	8005938 <_strtod_l+0x8f0>
 80058e0:	9b05      	ldr	r3, [sp, #20]
 80058e2:	4641      	mov	r1, r8
 80058e4:	b303      	cbz	r3, 8005928 <_strtod_l+0x8e0>
 80058e6:	464a      	mov	r2, r9
 80058e8:	4b96      	ldr	r3, [pc, #600]	; (8005b44 <_strtod_l+0xafc>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80058f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058f4:	d81b      	bhi.n	800592e <_strtod_l+0x8e6>
 80058f6:	0d1b      	lsrs	r3, r3, #20
 80058f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	4299      	cmp	r1, r3
 8005902:	d119      	bne.n	8005938 <_strtod_l+0x8f0>
 8005904:	4b90      	ldr	r3, [pc, #576]	; (8005b48 <_strtod_l+0xb00>)
 8005906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005908:	429a      	cmp	r2, r3
 800590a:	d102      	bne.n	8005912 <_strtod_l+0x8ca>
 800590c:	3101      	adds	r1, #1
 800590e:	f43f adda 	beq.w	80054c6 <_strtod_l+0x47e>
 8005912:	f04f 0800 	mov.w	r8, #0
 8005916:	4b8b      	ldr	r3, [pc, #556]	; (8005b44 <_strtod_l+0xafc>)
 8005918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800591a:	401a      	ands	r2, r3
 800591c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005920:	9b05      	ldr	r3, [sp, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d19a      	bne.n	800585c <_strtod_l+0x814>
 8005926:	e5d9      	b.n	80054dc <_strtod_l+0x494>
 8005928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800592c:	e7e8      	b.n	8005900 <_strtod_l+0x8b8>
 800592e:	4613      	mov	r3, r2
 8005930:	e7e6      	b.n	8005900 <_strtod_l+0x8b8>
 8005932:	ea53 0308 	orrs.w	r3, r3, r8
 8005936:	d081      	beq.n	800583c <_strtod_l+0x7f4>
 8005938:	b1e5      	cbz	r5, 8005974 <_strtod_l+0x92c>
 800593a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800593c:	421d      	tst	r5, r3
 800593e:	d0ef      	beq.n	8005920 <_strtod_l+0x8d8>
 8005940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005942:	4640      	mov	r0, r8
 8005944:	4649      	mov	r1, r9
 8005946:	9a05      	ldr	r2, [sp, #20]
 8005948:	b1c3      	cbz	r3, 800597c <_strtod_l+0x934>
 800594a:	f7ff fb59 	bl	8005000 <sulp>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005956:	f7fa fc13 	bl	8000180 <__adddf3>
 800595a:	4680      	mov	r8, r0
 800595c:	4689      	mov	r9, r1
 800595e:	e7df      	b.n	8005920 <_strtod_l+0x8d8>
 8005960:	4013      	ands	r3, r2
 8005962:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005966:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800596a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800596e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005972:	e7d5      	b.n	8005920 <_strtod_l+0x8d8>
 8005974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005976:	ea13 0f08 	tst.w	r3, r8
 800597a:	e7e0      	b.n	800593e <_strtod_l+0x8f6>
 800597c:	f7ff fb40 	bl	8005000 <sulp>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005988:	f7fa fbf8 	bl	800017c <__aeabi_dsub>
 800598c:	2200      	movs	r2, #0
 800598e:	2300      	movs	r3, #0
 8005990:	4680      	mov	r8, r0
 8005992:	4689      	mov	r9, r1
 8005994:	f7fb f812 	bl	80009bc <__aeabi_dcmpeq>
 8005998:	2800      	cmp	r0, #0
 800599a:	d0c1      	beq.n	8005920 <_strtod_l+0x8d8>
 800599c:	e608      	b.n	80055b0 <_strtod_l+0x568>
 800599e:	4658      	mov	r0, fp
 80059a0:	9904      	ldr	r1, [sp, #16]
 80059a2:	f002 f837 	bl	8007a14 <__ratio>
 80059a6:	2200      	movs	r2, #0
 80059a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059ac:	4606      	mov	r6, r0
 80059ae:	460f      	mov	r7, r1
 80059b0:	f7fb f818 	bl	80009e4 <__aeabi_dcmple>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	d070      	beq.n	8005a9a <_strtod_l+0xa52>
 80059b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d042      	beq.n	8005a44 <_strtod_l+0x9fc>
 80059be:	2600      	movs	r6, #0
 80059c0:	4f62      	ldr	r7, [pc, #392]	; (8005b4c <_strtod_l+0xb04>)
 80059c2:	4d62      	ldr	r5, [pc, #392]	; (8005b4c <_strtod_l+0xb04>)
 80059c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059ca:	0d1b      	lsrs	r3, r3, #20
 80059cc:	051b      	lsls	r3, r3, #20
 80059ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80059d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059d2:	4b5f      	ldr	r3, [pc, #380]	; (8005b50 <_strtod_l+0xb08>)
 80059d4:	429a      	cmp	r2, r3
 80059d6:	f040 80c3 	bne.w	8005b60 <_strtod_l+0xb18>
 80059da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059dc:	4640      	mov	r0, r8
 80059de:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80059e2:	4649      	mov	r1, r9
 80059e4:	f001 ff40 	bl	8007868 <__ulp>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4630      	mov	r0, r6
 80059ee:	4639      	mov	r1, r7
 80059f0:	f7fa fd7c 	bl	80004ec <__aeabi_dmul>
 80059f4:	4642      	mov	r2, r8
 80059f6:	464b      	mov	r3, r9
 80059f8:	f7fa fbc2 	bl	8000180 <__adddf3>
 80059fc:	460b      	mov	r3, r1
 80059fe:	4951      	ldr	r1, [pc, #324]	; (8005b44 <_strtod_l+0xafc>)
 8005a00:	4a54      	ldr	r2, [pc, #336]	; (8005b54 <_strtod_l+0xb0c>)
 8005a02:	4019      	ands	r1, r3
 8005a04:	4291      	cmp	r1, r2
 8005a06:	4680      	mov	r8, r0
 8005a08:	d95d      	bls.n	8005ac6 <_strtod_l+0xa7e>
 8005a0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a0c:	4b4e      	ldr	r3, [pc, #312]	; (8005b48 <_strtod_l+0xb00>)
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d103      	bne.n	8005a1a <_strtod_l+0x9d2>
 8005a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a14:	3301      	adds	r3, #1
 8005a16:	f43f ad56 	beq.w	80054c6 <_strtod_l+0x47e>
 8005a1a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005a1e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005b48 <_strtod_l+0xb00>
 8005a22:	4650      	mov	r0, sl
 8005a24:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005a26:	f001 fbef 	bl	8007208 <_Bfree>
 8005a2a:	4650      	mov	r0, sl
 8005a2c:	9906      	ldr	r1, [sp, #24]
 8005a2e:	f001 fbeb 	bl	8007208 <_Bfree>
 8005a32:	4650      	mov	r0, sl
 8005a34:	9904      	ldr	r1, [sp, #16]
 8005a36:	f001 fbe7 	bl	8007208 <_Bfree>
 8005a3a:	4659      	mov	r1, fp
 8005a3c:	4650      	mov	r0, sl
 8005a3e:	f001 fbe3 	bl	8007208 <_Bfree>
 8005a42:	e627      	b.n	8005694 <_strtod_l+0x64c>
 8005a44:	f1b8 0f00 	cmp.w	r8, #0
 8005a48:	d119      	bne.n	8005a7e <_strtod_l+0xa36>
 8005a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a50:	b9e3      	cbnz	r3, 8005a8c <_strtod_l+0xa44>
 8005a52:	2200      	movs	r2, #0
 8005a54:	4630      	mov	r0, r6
 8005a56:	4639      	mov	r1, r7
 8005a58:	4b3c      	ldr	r3, [pc, #240]	; (8005b4c <_strtod_l+0xb04>)
 8005a5a:	f7fa ffb9 	bl	80009d0 <__aeabi_dcmplt>
 8005a5e:	b9c8      	cbnz	r0, 8005a94 <_strtod_l+0xa4c>
 8005a60:	2200      	movs	r2, #0
 8005a62:	4630      	mov	r0, r6
 8005a64:	4639      	mov	r1, r7
 8005a66:	4b3c      	ldr	r3, [pc, #240]	; (8005b58 <_strtod_l+0xb10>)
 8005a68:	f7fa fd40 	bl	80004ec <__aeabi_dmul>
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	460d      	mov	r5, r1
 8005a70:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005a74:	9416      	str	r4, [sp, #88]	; 0x58
 8005a76:	9317      	str	r3, [sp, #92]	; 0x5c
 8005a78:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005a7c:	e7a2      	b.n	80059c4 <_strtod_l+0x97c>
 8005a7e:	f1b8 0f01 	cmp.w	r8, #1
 8005a82:	d103      	bne.n	8005a8c <_strtod_l+0xa44>
 8005a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f43f ad92 	beq.w	80055b0 <_strtod_l+0x568>
 8005a8c:	2600      	movs	r6, #0
 8005a8e:	2400      	movs	r4, #0
 8005a90:	4f32      	ldr	r7, [pc, #200]	; (8005b5c <_strtod_l+0xb14>)
 8005a92:	e796      	b.n	80059c2 <_strtod_l+0x97a>
 8005a94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005a96:	4d30      	ldr	r5, [pc, #192]	; (8005b58 <_strtod_l+0xb10>)
 8005a98:	e7ea      	b.n	8005a70 <_strtod_l+0xa28>
 8005a9a:	4b2f      	ldr	r3, [pc, #188]	; (8005b58 <_strtod_l+0xb10>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	4639      	mov	r1, r7
 8005aa2:	f7fa fd23 	bl	80004ec <__aeabi_dmul>
 8005aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	460d      	mov	r5, r1
 8005aac:	b933      	cbnz	r3, 8005abc <_strtod_l+0xa74>
 8005aae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ab2:	9010      	str	r0, [sp, #64]	; 0x40
 8005ab4:	9311      	str	r3, [sp, #68]	; 0x44
 8005ab6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005aba:	e783      	b.n	80059c4 <_strtod_l+0x97c>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005ac4:	e7f7      	b.n	8005ab6 <_strtod_l+0xa6e>
 8005ac6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005aca:	9b05      	ldr	r3, [sp, #20]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1a8      	bne.n	8005a22 <_strtod_l+0x9da>
 8005ad0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ad4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ad6:	0d1b      	lsrs	r3, r3, #20
 8005ad8:	051b      	lsls	r3, r3, #20
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d1a1      	bne.n	8005a22 <_strtod_l+0x9da>
 8005ade:	4620      	mov	r0, r4
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	f7fb f959 	bl	8000d98 <__aeabi_d2lz>
 8005ae6:	f7fa fcd3 	bl	8000490 <__aeabi_l2d>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4620      	mov	r0, r4
 8005af0:	4629      	mov	r1, r5
 8005af2:	f7fa fb43 	bl	800017c <__aeabi_dsub>
 8005af6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005af8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005afc:	ea43 0308 	orr.w	r3, r3, r8
 8005b00:	4313      	orrs	r3, r2
 8005b02:	4604      	mov	r4, r0
 8005b04:	460d      	mov	r5, r1
 8005b06:	d066      	beq.n	8005bd6 <_strtod_l+0xb8e>
 8005b08:	a309      	add	r3, pc, #36	; (adr r3, 8005b30 <_strtod_l+0xae8>)
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	f7fa ff5f 	bl	80009d0 <__aeabi_dcmplt>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	f47f ace2 	bne.w	80054dc <_strtod_l+0x494>
 8005b18:	a307      	add	r3, pc, #28	; (adr r3, 8005b38 <_strtod_l+0xaf0>)
 8005b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1e:	4620      	mov	r0, r4
 8005b20:	4629      	mov	r1, r5
 8005b22:	f7fa ff73 	bl	8000a0c <__aeabi_dcmpgt>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	f43f af7b 	beq.w	8005a22 <_strtod_l+0x9da>
 8005b2c:	e4d6      	b.n	80054dc <_strtod_l+0x494>
 8005b2e:	bf00      	nop
 8005b30:	94a03595 	.word	0x94a03595
 8005b34:	3fdfffff 	.word	0x3fdfffff
 8005b38:	35afe535 	.word	0x35afe535
 8005b3c:	3fe00000 	.word	0x3fe00000
 8005b40:	000fffff 	.word	0x000fffff
 8005b44:	7ff00000 	.word	0x7ff00000
 8005b48:	7fefffff 	.word	0x7fefffff
 8005b4c:	3ff00000 	.word	0x3ff00000
 8005b50:	7fe00000 	.word	0x7fe00000
 8005b54:	7c9fffff 	.word	0x7c9fffff
 8005b58:	3fe00000 	.word	0x3fe00000
 8005b5c:	bff00000 	.word	0xbff00000
 8005b60:	9b05      	ldr	r3, [sp, #20]
 8005b62:	b313      	cbz	r3, 8005baa <_strtod_l+0xb62>
 8005b64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005b6a:	d81e      	bhi.n	8005baa <_strtod_l+0xb62>
 8005b6c:	a326      	add	r3, pc, #152	; (adr r3, 8005c08 <_strtod_l+0xbc0>)
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	4620      	mov	r0, r4
 8005b74:	4629      	mov	r1, r5
 8005b76:	f7fa ff35 	bl	80009e4 <__aeabi_dcmple>
 8005b7a:	b190      	cbz	r0, 8005ba2 <_strtod_l+0xb5a>
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f7fa ff8c 	bl	8000a9c <__aeabi_d2uiz>
 8005b84:	2801      	cmp	r0, #1
 8005b86:	bf38      	it	cc
 8005b88:	2001      	movcc	r0, #1
 8005b8a:	f7fa fc35 	bl	80003f8 <__aeabi_ui2d>
 8005b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b90:	4604      	mov	r4, r0
 8005b92:	460d      	mov	r5, r1
 8005b94:	b9d3      	cbnz	r3, 8005bcc <_strtod_l+0xb84>
 8005b96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b9a:	9012      	str	r0, [sp, #72]	; 0x48
 8005b9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b9e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005ba2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ba4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005ba8:	1a9f      	subs	r7, r3, r2
 8005baa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005bae:	f001 fe5b 	bl	8007868 <__ulp>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	4639      	mov	r1, r7
 8005bba:	f7fa fc97 	bl	80004ec <__aeabi_dmul>
 8005bbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005bc2:	f7fa fadd 	bl	8000180 <__adddf3>
 8005bc6:	4680      	mov	r8, r0
 8005bc8:	4689      	mov	r9, r1
 8005bca:	e77e      	b.n	8005aca <_strtod_l+0xa82>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005bd4:	e7e3      	b.n	8005b9e <_strtod_l+0xb56>
 8005bd6:	a30e      	add	r3, pc, #56	; (adr r3, 8005c10 <_strtod_l+0xbc8>)
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f7fa fef8 	bl	80009d0 <__aeabi_dcmplt>
 8005be0:	e7a1      	b.n	8005b26 <_strtod_l+0xade>
 8005be2:	2300      	movs	r3, #0
 8005be4:	930a      	str	r3, [sp, #40]	; 0x28
 8005be6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005be8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	f7ff ba71 	b.w	80050d2 <_strtod_l+0x8a>
 8005bf0:	2a65      	cmp	r2, #101	; 0x65
 8005bf2:	f43f ab63 	beq.w	80052bc <_strtod_l+0x274>
 8005bf6:	2a45      	cmp	r2, #69	; 0x45
 8005bf8:	f43f ab60 	beq.w	80052bc <_strtod_l+0x274>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f7ff bb95 	b.w	800532c <_strtod_l+0x2e4>
 8005c02:	bf00      	nop
 8005c04:	f3af 8000 	nop.w
 8005c08:	ffc00000 	.word	0xffc00000
 8005c0c:	41dfffff 	.word	0x41dfffff
 8005c10:	94a03595 	.word	0x94a03595
 8005c14:	3fcfffff 	.word	0x3fcfffff

08005c18 <strtod>:
 8005c18:	460a      	mov	r2, r1
 8005c1a:	4601      	mov	r1, r0
 8005c1c:	4802      	ldr	r0, [pc, #8]	; (8005c28 <strtod+0x10>)
 8005c1e:	4b03      	ldr	r3, [pc, #12]	; (8005c2c <strtod+0x14>)
 8005c20:	6800      	ldr	r0, [r0, #0]
 8005c22:	f7ff ba11 	b.w	8005048 <_strtod_l>
 8005c26:	bf00      	nop
 8005c28:	20000020 	.word	0x20000020
 8005c2c:	20000088 	.word	0x20000088

08005c30 <strtok>:
 8005c30:	4b16      	ldr	r3, [pc, #88]	; (8005c8c <strtok+0x5c>)
 8005c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c36:	681f      	ldr	r7, [r3, #0]
 8005c38:	4605      	mov	r5, r0
 8005c3a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005c3c:	460e      	mov	r6, r1
 8005c3e:	b9ec      	cbnz	r4, 8005c7c <strtok+0x4c>
 8005c40:	2050      	movs	r0, #80	; 0x50
 8005c42:	f7fe fc59 	bl	80044f8 <malloc>
 8005c46:	4602      	mov	r2, r0
 8005c48:	65b8      	str	r0, [r7, #88]	; 0x58
 8005c4a:	b920      	cbnz	r0, 8005c56 <strtok+0x26>
 8005c4c:	2157      	movs	r1, #87	; 0x57
 8005c4e:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <strtok+0x60>)
 8005c50:	4810      	ldr	r0, [pc, #64]	; (8005c94 <strtok+0x64>)
 8005c52:	f000 f849 	bl	8005ce8 <__assert_func>
 8005c56:	e9c0 4400 	strd	r4, r4, [r0]
 8005c5a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005c5e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005c62:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005c66:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005c6a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005c6e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005c72:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005c76:	6184      	str	r4, [r0, #24]
 8005c78:	7704      	strb	r4, [r0, #28]
 8005c7a:	6244      	str	r4, [r0, #36]	; 0x24
 8005c7c:	4631      	mov	r1, r6
 8005c7e:	4628      	mov	r0, r5
 8005c80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c82:	2301      	movs	r3, #1
 8005c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c88:	f000 b806 	b.w	8005c98 <__strtok_r>
 8005c8c:	20000020 	.word	0x20000020
 8005c90:	0800ab28 	.word	0x0800ab28
 8005c94:	0800ab3f 	.word	0x0800ab3f

08005c98 <__strtok_r>:
 8005c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c9a:	b908      	cbnz	r0, 8005ca0 <__strtok_r+0x8>
 8005c9c:	6810      	ldr	r0, [r2, #0]
 8005c9e:	b188      	cbz	r0, 8005cc4 <__strtok_r+0x2c>
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	460f      	mov	r7, r1
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005caa:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005cae:	b91e      	cbnz	r6, 8005cb8 <__strtok_r+0x20>
 8005cb0:	b965      	cbnz	r5, 8005ccc <__strtok_r+0x34>
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	6015      	str	r5, [r2, #0]
 8005cb6:	e005      	b.n	8005cc4 <__strtok_r+0x2c>
 8005cb8:	42b5      	cmp	r5, r6
 8005cba:	d1f6      	bne.n	8005caa <__strtok_r+0x12>
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1f0      	bne.n	8005ca2 <__strtok_r+0xa>
 8005cc0:	6014      	str	r4, [r2, #0]
 8005cc2:	7003      	strb	r3, [r0, #0]
 8005cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cc6:	461c      	mov	r4, r3
 8005cc8:	e00c      	b.n	8005ce4 <__strtok_r+0x4c>
 8005cca:	b915      	cbnz	r5, 8005cd2 <__strtok_r+0x3a>
 8005ccc:	460e      	mov	r6, r1
 8005cce:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005cd2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005cd6:	42ab      	cmp	r3, r5
 8005cd8:	d1f7      	bne.n	8005cca <__strtok_r+0x32>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0f3      	beq.n	8005cc6 <__strtok_r+0x2e>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005ce4:	6014      	str	r4, [r2, #0]
 8005ce6:	e7ed      	b.n	8005cc4 <__strtok_r+0x2c>

08005ce8 <__assert_func>:
 8005ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005cea:	4614      	mov	r4, r2
 8005cec:	461a      	mov	r2, r3
 8005cee:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <__assert_func+0x2c>)
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68d8      	ldr	r0, [r3, #12]
 8005cf6:	b14c      	cbz	r4, 8005d0c <__assert_func+0x24>
 8005cf8:	4b07      	ldr	r3, [pc, #28]	; (8005d18 <__assert_func+0x30>)
 8005cfa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005cfe:	9100      	str	r1, [sp, #0]
 8005d00:	462b      	mov	r3, r5
 8005d02:	4906      	ldr	r1, [pc, #24]	; (8005d1c <__assert_func+0x34>)
 8005d04:	f000 fe8a 	bl	8006a1c <fiprintf>
 8005d08:	f002 faa6 	bl	8008258 <abort>
 8005d0c:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <__assert_func+0x38>)
 8005d0e:	461c      	mov	r4, r3
 8005d10:	e7f3      	b.n	8005cfa <__assert_func+0x12>
 8005d12:	bf00      	nop
 8005d14:	20000020 	.word	0x20000020
 8005d18:	0800ab9c 	.word	0x0800ab9c
 8005d1c:	0800aba9 	.word	0x0800aba9
 8005d20:	0800abd7 	.word	0x0800abd7

08005d24 <quorem>:
 8005d24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d28:	6903      	ldr	r3, [r0, #16]
 8005d2a:	690c      	ldr	r4, [r1, #16]
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	42a3      	cmp	r3, r4
 8005d30:	f2c0 8082 	blt.w	8005e38 <quorem+0x114>
 8005d34:	3c01      	subs	r4, #1
 8005d36:	f100 0514 	add.w	r5, r0, #20
 8005d3a:	f101 0814 	add.w	r8, r1, #20
 8005d3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d42:	9301      	str	r3, [sp, #4]
 8005d44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005d58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d5c:	d331      	bcc.n	8005dc2 <quorem+0x9e>
 8005d5e:	f04f 0e00 	mov.w	lr, #0
 8005d62:	4640      	mov	r0, r8
 8005d64:	46ac      	mov	ip, r5
 8005d66:	46f2      	mov	sl, lr
 8005d68:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d6c:	b293      	uxth	r3, r2
 8005d6e:	fb06 e303 	mla	r3, r6, r3, lr
 8005d72:	0c12      	lsrs	r2, r2, #16
 8005d74:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	fb06 e202 	mla	r2, r6, r2, lr
 8005d7e:	ebaa 0303 	sub.w	r3, sl, r3
 8005d82:	f8dc a000 	ldr.w	sl, [ip]
 8005d86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d8a:	fa1f fa8a 	uxth.w	sl, sl
 8005d8e:	4453      	add	r3, sl
 8005d90:	f8dc a000 	ldr.w	sl, [ip]
 8005d94:	b292      	uxth	r2, r2
 8005d96:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005da4:	4581      	cmp	r9, r0
 8005da6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005daa:	f84c 3b04 	str.w	r3, [ip], #4
 8005dae:	d2db      	bcs.n	8005d68 <quorem+0x44>
 8005db0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005db4:	b92b      	cbnz	r3, 8005dc2 <quorem+0x9e>
 8005db6:	9b01      	ldr	r3, [sp, #4]
 8005db8:	3b04      	subs	r3, #4
 8005dba:	429d      	cmp	r5, r3
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	d32f      	bcc.n	8005e20 <quorem+0xfc>
 8005dc0:	613c      	str	r4, [r7, #16]
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	f001 fca8 	bl	8007718 <__mcmp>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	db25      	blt.n	8005e18 <quorem+0xf4>
 8005dcc:	4628      	mov	r0, r5
 8005dce:	f04f 0c00 	mov.w	ip, #0
 8005dd2:	3601      	adds	r6, #1
 8005dd4:	f858 1b04 	ldr.w	r1, [r8], #4
 8005dd8:	f8d0 e000 	ldr.w	lr, [r0]
 8005ddc:	b28b      	uxth	r3, r1
 8005dde:	ebac 0303 	sub.w	r3, ip, r3
 8005de2:	fa1f f28e 	uxth.w	r2, lr
 8005de6:	4413      	add	r3, r2
 8005de8:	0c0a      	lsrs	r2, r1, #16
 8005dea:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005dee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005df8:	45c1      	cmp	r9, r8
 8005dfa:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005dfe:	f840 3b04 	str.w	r3, [r0], #4
 8005e02:	d2e7      	bcs.n	8005dd4 <quorem+0xb0>
 8005e04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e0c:	b922      	cbnz	r2, 8005e18 <quorem+0xf4>
 8005e0e:	3b04      	subs	r3, #4
 8005e10:	429d      	cmp	r5, r3
 8005e12:	461a      	mov	r2, r3
 8005e14:	d30a      	bcc.n	8005e2c <quorem+0x108>
 8005e16:	613c      	str	r4, [r7, #16]
 8005e18:	4630      	mov	r0, r6
 8005e1a:	b003      	add	sp, #12
 8005e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	3b04      	subs	r3, #4
 8005e24:	2a00      	cmp	r2, #0
 8005e26:	d1cb      	bne.n	8005dc0 <quorem+0x9c>
 8005e28:	3c01      	subs	r4, #1
 8005e2a:	e7c6      	b.n	8005dba <quorem+0x96>
 8005e2c:	6812      	ldr	r2, [r2, #0]
 8005e2e:	3b04      	subs	r3, #4
 8005e30:	2a00      	cmp	r2, #0
 8005e32:	d1f0      	bne.n	8005e16 <quorem+0xf2>
 8005e34:	3c01      	subs	r4, #1
 8005e36:	e7eb      	b.n	8005e10 <quorem+0xec>
 8005e38:	2000      	movs	r0, #0
 8005e3a:	e7ee      	b.n	8005e1a <quorem+0xf6>
 8005e3c:	0000      	movs	r0, r0
	...

08005e40 <_dtoa_r>:
 8005e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	4616      	mov	r6, r2
 8005e46:	461f      	mov	r7, r3
 8005e48:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005e4a:	b099      	sub	sp, #100	; 0x64
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005e52:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005e56:	b974      	cbnz	r4, 8005e76 <_dtoa_r+0x36>
 8005e58:	2010      	movs	r0, #16
 8005e5a:	f7fe fb4d 	bl	80044f8 <malloc>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	6268      	str	r0, [r5, #36]	; 0x24
 8005e62:	b920      	cbnz	r0, 8005e6e <_dtoa_r+0x2e>
 8005e64:	21ea      	movs	r1, #234	; 0xea
 8005e66:	4ba8      	ldr	r3, [pc, #672]	; (8006108 <_dtoa_r+0x2c8>)
 8005e68:	48a8      	ldr	r0, [pc, #672]	; (800610c <_dtoa_r+0x2cc>)
 8005e6a:	f7ff ff3d 	bl	8005ce8 <__assert_func>
 8005e6e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e72:	6004      	str	r4, [r0, #0]
 8005e74:	60c4      	str	r4, [r0, #12]
 8005e76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e78:	6819      	ldr	r1, [r3, #0]
 8005e7a:	b151      	cbz	r1, 8005e92 <_dtoa_r+0x52>
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	2301      	movs	r3, #1
 8005e80:	4093      	lsls	r3, r2
 8005e82:	604a      	str	r2, [r1, #4]
 8005e84:	608b      	str	r3, [r1, #8]
 8005e86:	4628      	mov	r0, r5
 8005e88:	f001 f9be 	bl	8007208 <_Bfree>
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	1e3b      	subs	r3, r7, #0
 8005e94:	bfaf      	iteee	ge
 8005e96:	2300      	movge	r3, #0
 8005e98:	2201      	movlt	r2, #1
 8005e9a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e9e:	9305      	strlt	r3, [sp, #20]
 8005ea0:	bfa8      	it	ge
 8005ea2:	f8c8 3000 	strge.w	r3, [r8]
 8005ea6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005eaa:	4b99      	ldr	r3, [pc, #612]	; (8006110 <_dtoa_r+0x2d0>)
 8005eac:	bfb8      	it	lt
 8005eae:	f8c8 2000 	strlt.w	r2, [r8]
 8005eb2:	ea33 0309 	bics.w	r3, r3, r9
 8005eb6:	d119      	bne.n	8005eec <_dtoa_r+0xac>
 8005eb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ebc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ec4:	4333      	orrs	r3, r6
 8005ec6:	f000 857f 	beq.w	80069c8 <_dtoa_r+0xb88>
 8005eca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ecc:	b953      	cbnz	r3, 8005ee4 <_dtoa_r+0xa4>
 8005ece:	4b91      	ldr	r3, [pc, #580]	; (8006114 <_dtoa_r+0x2d4>)
 8005ed0:	e022      	b.n	8005f18 <_dtoa_r+0xd8>
 8005ed2:	4b91      	ldr	r3, [pc, #580]	; (8006118 <_dtoa_r+0x2d8>)
 8005ed4:	9303      	str	r3, [sp, #12]
 8005ed6:	3308      	adds	r3, #8
 8005ed8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	9803      	ldr	r0, [sp, #12]
 8005ede:	b019      	add	sp, #100	; 0x64
 8005ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee4:	4b8b      	ldr	r3, [pc, #556]	; (8006114 <_dtoa_r+0x2d4>)
 8005ee6:	9303      	str	r3, [sp, #12]
 8005ee8:	3303      	adds	r3, #3
 8005eea:	e7f5      	b.n	8005ed8 <_dtoa_r+0x98>
 8005eec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005ef0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005ef4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2300      	movs	r3, #0
 8005efc:	f7fa fd5e 	bl	80009bc <__aeabi_dcmpeq>
 8005f00:	4680      	mov	r8, r0
 8005f02:	b158      	cbz	r0, 8005f1c <_dtoa_r+0xdc>
 8005f04:	2301      	movs	r3, #1
 8005f06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 8558 	beq.w	80069c2 <_dtoa_r+0xb82>
 8005f12:	4882      	ldr	r0, [pc, #520]	; (800611c <_dtoa_r+0x2dc>)
 8005f14:	6018      	str	r0, [r3, #0]
 8005f16:	1e43      	subs	r3, r0, #1
 8005f18:	9303      	str	r3, [sp, #12]
 8005f1a:	e7df      	b.n	8005edc <_dtoa_r+0x9c>
 8005f1c:	ab16      	add	r3, sp, #88	; 0x58
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	ab17      	add	r3, sp, #92	; 0x5c
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	4628      	mov	r0, r5
 8005f26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005f2a:	f001 fd17 	bl	800795c <__d2b>
 8005f2e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005f32:	4683      	mov	fp, r0
 8005f34:	2c00      	cmp	r4, #0
 8005f36:	d07f      	beq.n	8006038 <_dtoa_r+0x1f8>
 8005f38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f3e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005f42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f46:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005f4a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005f4e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005f52:	2200      	movs	r2, #0
 8005f54:	4b72      	ldr	r3, [pc, #456]	; (8006120 <_dtoa_r+0x2e0>)
 8005f56:	f7fa f911 	bl	800017c <__aeabi_dsub>
 8005f5a:	a365      	add	r3, pc, #404	; (adr r3, 80060f0 <_dtoa_r+0x2b0>)
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f7fa fac4 	bl	80004ec <__aeabi_dmul>
 8005f64:	a364      	add	r3, pc, #400	; (adr r3, 80060f8 <_dtoa_r+0x2b8>)
 8005f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6a:	f7fa f909 	bl	8000180 <__adddf3>
 8005f6e:	4606      	mov	r6, r0
 8005f70:	4620      	mov	r0, r4
 8005f72:	460f      	mov	r7, r1
 8005f74:	f7fa fa50 	bl	8000418 <__aeabi_i2d>
 8005f78:	a361      	add	r3, pc, #388	; (adr r3, 8006100 <_dtoa_r+0x2c0>)
 8005f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7e:	f7fa fab5 	bl	80004ec <__aeabi_dmul>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4630      	mov	r0, r6
 8005f88:	4639      	mov	r1, r7
 8005f8a:	f7fa f8f9 	bl	8000180 <__adddf3>
 8005f8e:	4606      	mov	r6, r0
 8005f90:	460f      	mov	r7, r1
 8005f92:	f7fa fd5b 	bl	8000a4c <__aeabi_d2iz>
 8005f96:	2200      	movs	r2, #0
 8005f98:	4682      	mov	sl, r0
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	4639      	mov	r1, r7
 8005fa0:	f7fa fd16 	bl	80009d0 <__aeabi_dcmplt>
 8005fa4:	b148      	cbz	r0, 8005fba <_dtoa_r+0x17a>
 8005fa6:	4650      	mov	r0, sl
 8005fa8:	f7fa fa36 	bl	8000418 <__aeabi_i2d>
 8005fac:	4632      	mov	r2, r6
 8005fae:	463b      	mov	r3, r7
 8005fb0:	f7fa fd04 	bl	80009bc <__aeabi_dcmpeq>
 8005fb4:	b908      	cbnz	r0, 8005fba <_dtoa_r+0x17a>
 8005fb6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005fba:	f1ba 0f16 	cmp.w	sl, #22
 8005fbe:	d858      	bhi.n	8006072 <_dtoa_r+0x232>
 8005fc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fc4:	4b57      	ldr	r3, [pc, #348]	; (8006124 <_dtoa_r+0x2e4>)
 8005fc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fce:	f7fa fcff 	bl	80009d0 <__aeabi_dcmplt>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	d04f      	beq.n	8006076 <_dtoa_r+0x236>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005fdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fde:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005fe0:	1b1c      	subs	r4, r3, r4
 8005fe2:	1e63      	subs	r3, r4, #1
 8005fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fe6:	bf49      	itett	mi
 8005fe8:	f1c4 0301 	rsbmi	r3, r4, #1
 8005fec:	2300      	movpl	r3, #0
 8005fee:	9306      	strmi	r3, [sp, #24]
 8005ff0:	2300      	movmi	r3, #0
 8005ff2:	bf54      	ite	pl
 8005ff4:	9306      	strpl	r3, [sp, #24]
 8005ff6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005ff8:	f1ba 0f00 	cmp.w	sl, #0
 8005ffc:	db3d      	blt.n	800607a <_dtoa_r+0x23a>
 8005ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006000:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006004:	4453      	add	r3, sl
 8006006:	9309      	str	r3, [sp, #36]	; 0x24
 8006008:	2300      	movs	r3, #0
 800600a:	930a      	str	r3, [sp, #40]	; 0x28
 800600c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800600e:	2b09      	cmp	r3, #9
 8006010:	f200 808c 	bhi.w	800612c <_dtoa_r+0x2ec>
 8006014:	2b05      	cmp	r3, #5
 8006016:	bfc4      	itt	gt
 8006018:	3b04      	subgt	r3, #4
 800601a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800601c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800601e:	bfc8      	it	gt
 8006020:	2400      	movgt	r4, #0
 8006022:	f1a3 0302 	sub.w	r3, r3, #2
 8006026:	bfd8      	it	le
 8006028:	2401      	movle	r4, #1
 800602a:	2b03      	cmp	r3, #3
 800602c:	f200 808a 	bhi.w	8006144 <_dtoa_r+0x304>
 8006030:	e8df f003 	tbb	[pc, r3]
 8006034:	5b4d4f2d 	.word	0x5b4d4f2d
 8006038:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800603c:	441c      	add	r4, r3
 800603e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006042:	2b20      	cmp	r3, #32
 8006044:	bfc3      	ittte	gt
 8006046:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800604a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800604e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006052:	f1c3 0320 	rsble	r3, r3, #32
 8006056:	bfc6      	itte	gt
 8006058:	fa26 f000 	lsrgt.w	r0, r6, r0
 800605c:	4318      	orrgt	r0, r3
 800605e:	fa06 f003 	lslle.w	r0, r6, r3
 8006062:	f7fa f9c9 	bl	80003f8 <__aeabi_ui2d>
 8006066:	2301      	movs	r3, #1
 8006068:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800606c:	3c01      	subs	r4, #1
 800606e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006070:	e76f      	b.n	8005f52 <_dtoa_r+0x112>
 8006072:	2301      	movs	r3, #1
 8006074:	e7b2      	b.n	8005fdc <_dtoa_r+0x19c>
 8006076:	900f      	str	r0, [sp, #60]	; 0x3c
 8006078:	e7b1      	b.n	8005fde <_dtoa_r+0x19e>
 800607a:	9b06      	ldr	r3, [sp, #24]
 800607c:	eba3 030a 	sub.w	r3, r3, sl
 8006080:	9306      	str	r3, [sp, #24]
 8006082:	f1ca 0300 	rsb	r3, sl, #0
 8006086:	930a      	str	r3, [sp, #40]	; 0x28
 8006088:	2300      	movs	r3, #0
 800608a:	930e      	str	r3, [sp, #56]	; 0x38
 800608c:	e7be      	b.n	800600c <_dtoa_r+0x1cc>
 800608e:	2300      	movs	r3, #0
 8006090:	930b      	str	r3, [sp, #44]	; 0x2c
 8006092:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006094:	2b00      	cmp	r3, #0
 8006096:	dc58      	bgt.n	800614a <_dtoa_r+0x30a>
 8006098:	f04f 0901 	mov.w	r9, #1
 800609c:	464b      	mov	r3, r9
 800609e:	f8cd 9020 	str.w	r9, [sp, #32]
 80060a2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80060a6:	2200      	movs	r2, #0
 80060a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80060aa:	6042      	str	r2, [r0, #4]
 80060ac:	2204      	movs	r2, #4
 80060ae:	f102 0614 	add.w	r6, r2, #20
 80060b2:	429e      	cmp	r6, r3
 80060b4:	6841      	ldr	r1, [r0, #4]
 80060b6:	d94e      	bls.n	8006156 <_dtoa_r+0x316>
 80060b8:	4628      	mov	r0, r5
 80060ba:	f001 f865 	bl	8007188 <_Balloc>
 80060be:	9003      	str	r0, [sp, #12]
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d14c      	bne.n	800615e <_dtoa_r+0x31e>
 80060c4:	4602      	mov	r2, r0
 80060c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80060ca:	4b17      	ldr	r3, [pc, #92]	; (8006128 <_dtoa_r+0x2e8>)
 80060cc:	e6cc      	b.n	8005e68 <_dtoa_r+0x28>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e7de      	b.n	8006090 <_dtoa_r+0x250>
 80060d2:	2300      	movs	r3, #0
 80060d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80060d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060d8:	eb0a 0903 	add.w	r9, sl, r3
 80060dc:	f109 0301 	add.w	r3, r9, #1
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	9308      	str	r3, [sp, #32]
 80060e4:	bfb8      	it	lt
 80060e6:	2301      	movlt	r3, #1
 80060e8:	e7dd      	b.n	80060a6 <_dtoa_r+0x266>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e7f2      	b.n	80060d4 <_dtoa_r+0x294>
 80060ee:	bf00      	nop
 80060f0:	636f4361 	.word	0x636f4361
 80060f4:	3fd287a7 	.word	0x3fd287a7
 80060f8:	8b60c8b3 	.word	0x8b60c8b3
 80060fc:	3fc68a28 	.word	0x3fc68a28
 8006100:	509f79fb 	.word	0x509f79fb
 8006104:	3fd34413 	.word	0x3fd34413
 8006108:	0800ab28 	.word	0x0800ab28
 800610c:	0800abe5 	.word	0x0800abe5
 8006110:	7ff00000 	.word	0x7ff00000
 8006114:	0800abe1 	.word	0x0800abe1
 8006118:	0800abd8 	.word	0x0800abd8
 800611c:	0800aab1 	.word	0x0800aab1
 8006120:	3ff80000 	.word	0x3ff80000
 8006124:	0800ad50 	.word	0x0800ad50
 8006128:	0800ac40 	.word	0x0800ac40
 800612c:	2401      	movs	r4, #1
 800612e:	2300      	movs	r3, #0
 8006130:	940b      	str	r4, [sp, #44]	; 0x2c
 8006132:	9322      	str	r3, [sp, #136]	; 0x88
 8006134:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006138:	2200      	movs	r2, #0
 800613a:	2312      	movs	r3, #18
 800613c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006140:	9223      	str	r2, [sp, #140]	; 0x8c
 8006142:	e7b0      	b.n	80060a6 <_dtoa_r+0x266>
 8006144:	2301      	movs	r3, #1
 8006146:	930b      	str	r3, [sp, #44]	; 0x2c
 8006148:	e7f4      	b.n	8006134 <_dtoa_r+0x2f4>
 800614a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800614e:	464b      	mov	r3, r9
 8006150:	f8cd 9020 	str.w	r9, [sp, #32]
 8006154:	e7a7      	b.n	80060a6 <_dtoa_r+0x266>
 8006156:	3101      	adds	r1, #1
 8006158:	6041      	str	r1, [r0, #4]
 800615a:	0052      	lsls	r2, r2, #1
 800615c:	e7a7      	b.n	80060ae <_dtoa_r+0x26e>
 800615e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006160:	9a03      	ldr	r2, [sp, #12]
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	9b08      	ldr	r3, [sp, #32]
 8006166:	2b0e      	cmp	r3, #14
 8006168:	f200 80a8 	bhi.w	80062bc <_dtoa_r+0x47c>
 800616c:	2c00      	cmp	r4, #0
 800616e:	f000 80a5 	beq.w	80062bc <_dtoa_r+0x47c>
 8006172:	f1ba 0f00 	cmp.w	sl, #0
 8006176:	dd34      	ble.n	80061e2 <_dtoa_r+0x3a2>
 8006178:	4a9a      	ldr	r2, [pc, #616]	; (80063e4 <_dtoa_r+0x5a4>)
 800617a:	f00a 030f 	and.w	r3, sl, #15
 800617e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006182:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006186:	e9d3 3400 	ldrd	r3, r4, [r3]
 800618a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800618e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006192:	d016      	beq.n	80061c2 <_dtoa_r+0x382>
 8006194:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006198:	4b93      	ldr	r3, [pc, #588]	; (80063e8 <_dtoa_r+0x5a8>)
 800619a:	2703      	movs	r7, #3
 800619c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061a0:	f7fa face 	bl	8000740 <__aeabi_ddiv>
 80061a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061a8:	f004 040f 	and.w	r4, r4, #15
 80061ac:	4e8e      	ldr	r6, [pc, #568]	; (80063e8 <_dtoa_r+0x5a8>)
 80061ae:	b954      	cbnz	r4, 80061c6 <_dtoa_r+0x386>
 80061b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061b8:	f7fa fac2 	bl	8000740 <__aeabi_ddiv>
 80061bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061c0:	e029      	b.n	8006216 <_dtoa_r+0x3d6>
 80061c2:	2702      	movs	r7, #2
 80061c4:	e7f2      	b.n	80061ac <_dtoa_r+0x36c>
 80061c6:	07e1      	lsls	r1, r4, #31
 80061c8:	d508      	bpl.n	80061dc <_dtoa_r+0x39c>
 80061ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061d2:	f7fa f98b 	bl	80004ec <__aeabi_dmul>
 80061d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061da:	3701      	adds	r7, #1
 80061dc:	1064      	asrs	r4, r4, #1
 80061de:	3608      	adds	r6, #8
 80061e0:	e7e5      	b.n	80061ae <_dtoa_r+0x36e>
 80061e2:	f000 80a5 	beq.w	8006330 <_dtoa_r+0x4f0>
 80061e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061ea:	f1ca 0400 	rsb	r4, sl, #0
 80061ee:	4b7d      	ldr	r3, [pc, #500]	; (80063e4 <_dtoa_r+0x5a4>)
 80061f0:	f004 020f 	and.w	r2, r4, #15
 80061f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	f7fa f976 	bl	80004ec <__aeabi_dmul>
 8006200:	2702      	movs	r7, #2
 8006202:	2300      	movs	r3, #0
 8006204:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006208:	4e77      	ldr	r6, [pc, #476]	; (80063e8 <_dtoa_r+0x5a8>)
 800620a:	1124      	asrs	r4, r4, #4
 800620c:	2c00      	cmp	r4, #0
 800620e:	f040 8084 	bne.w	800631a <_dtoa_r+0x4da>
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1d2      	bne.n	80061bc <_dtoa_r+0x37c>
 8006216:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 808b 	beq.w	8006334 <_dtoa_r+0x4f4>
 800621e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006222:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006226:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800622a:	2200      	movs	r2, #0
 800622c:	4b6f      	ldr	r3, [pc, #444]	; (80063ec <_dtoa_r+0x5ac>)
 800622e:	f7fa fbcf 	bl	80009d0 <__aeabi_dcmplt>
 8006232:	2800      	cmp	r0, #0
 8006234:	d07e      	beq.n	8006334 <_dtoa_r+0x4f4>
 8006236:	9b08      	ldr	r3, [sp, #32]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d07b      	beq.n	8006334 <_dtoa_r+0x4f4>
 800623c:	f1b9 0f00 	cmp.w	r9, #0
 8006240:	dd38      	ble.n	80062b4 <_dtoa_r+0x474>
 8006242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006246:	2200      	movs	r2, #0
 8006248:	4b69      	ldr	r3, [pc, #420]	; (80063f0 <_dtoa_r+0x5b0>)
 800624a:	f7fa f94f 	bl	80004ec <__aeabi_dmul>
 800624e:	464c      	mov	r4, r9
 8006250:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006254:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8006258:	3701      	adds	r7, #1
 800625a:	4638      	mov	r0, r7
 800625c:	f7fa f8dc 	bl	8000418 <__aeabi_i2d>
 8006260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006264:	f7fa f942 	bl	80004ec <__aeabi_dmul>
 8006268:	2200      	movs	r2, #0
 800626a:	4b62      	ldr	r3, [pc, #392]	; (80063f4 <_dtoa_r+0x5b4>)
 800626c:	f7f9 ff88 	bl	8000180 <__adddf3>
 8006270:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006274:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006278:	9611      	str	r6, [sp, #68]	; 0x44
 800627a:	2c00      	cmp	r4, #0
 800627c:	d15d      	bne.n	800633a <_dtoa_r+0x4fa>
 800627e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006282:	2200      	movs	r2, #0
 8006284:	4b5c      	ldr	r3, [pc, #368]	; (80063f8 <_dtoa_r+0x5b8>)
 8006286:	f7f9 ff79 	bl	800017c <__aeabi_dsub>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006292:	4633      	mov	r3, r6
 8006294:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006296:	f7fa fbb9 	bl	8000a0c <__aeabi_dcmpgt>
 800629a:	2800      	cmp	r0, #0
 800629c:	f040 829c 	bne.w	80067d8 <_dtoa_r+0x998>
 80062a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80062a6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80062aa:	f7fa fb91 	bl	80009d0 <__aeabi_dcmplt>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	f040 8290 	bne.w	80067d4 <_dtoa_r+0x994>
 80062b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80062b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80062bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f2c0 8152 	blt.w	8006568 <_dtoa_r+0x728>
 80062c4:	f1ba 0f0e 	cmp.w	sl, #14
 80062c8:	f300 814e 	bgt.w	8006568 <_dtoa_r+0x728>
 80062cc:	4b45      	ldr	r3, [pc, #276]	; (80063e4 <_dtoa_r+0x5a4>)
 80062ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80062d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062d6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80062da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f280 80db 	bge.w	8006498 <_dtoa_r+0x658>
 80062e2:	9b08      	ldr	r3, [sp, #32]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f300 80d7 	bgt.w	8006498 <_dtoa_r+0x658>
 80062ea:	f040 8272 	bne.w	80067d2 <_dtoa_r+0x992>
 80062ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062f2:	2200      	movs	r2, #0
 80062f4:	4b40      	ldr	r3, [pc, #256]	; (80063f8 <_dtoa_r+0x5b8>)
 80062f6:	f7fa f8f9 	bl	80004ec <__aeabi_dmul>
 80062fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062fe:	f7fa fb7b 	bl	80009f8 <__aeabi_dcmpge>
 8006302:	9c08      	ldr	r4, [sp, #32]
 8006304:	4626      	mov	r6, r4
 8006306:	2800      	cmp	r0, #0
 8006308:	f040 8248 	bne.w	800679c <_dtoa_r+0x95c>
 800630c:	2331      	movs	r3, #49	; 0x31
 800630e:	9f03      	ldr	r7, [sp, #12]
 8006310:	f10a 0a01 	add.w	sl, sl, #1
 8006314:	f807 3b01 	strb.w	r3, [r7], #1
 8006318:	e244      	b.n	80067a4 <_dtoa_r+0x964>
 800631a:	07e2      	lsls	r2, r4, #31
 800631c:	d505      	bpl.n	800632a <_dtoa_r+0x4ea>
 800631e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006322:	f7fa f8e3 	bl	80004ec <__aeabi_dmul>
 8006326:	2301      	movs	r3, #1
 8006328:	3701      	adds	r7, #1
 800632a:	1064      	asrs	r4, r4, #1
 800632c:	3608      	adds	r6, #8
 800632e:	e76d      	b.n	800620c <_dtoa_r+0x3cc>
 8006330:	2702      	movs	r7, #2
 8006332:	e770      	b.n	8006216 <_dtoa_r+0x3d6>
 8006334:	46d0      	mov	r8, sl
 8006336:	9c08      	ldr	r4, [sp, #32]
 8006338:	e78f      	b.n	800625a <_dtoa_r+0x41a>
 800633a:	9903      	ldr	r1, [sp, #12]
 800633c:	4b29      	ldr	r3, [pc, #164]	; (80063e4 <_dtoa_r+0x5a4>)
 800633e:	4421      	add	r1, r4
 8006340:	9112      	str	r1, [sp, #72]	; 0x48
 8006342:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006344:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006348:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800634c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006350:	2900      	cmp	r1, #0
 8006352:	d055      	beq.n	8006400 <_dtoa_r+0x5c0>
 8006354:	2000      	movs	r0, #0
 8006356:	4929      	ldr	r1, [pc, #164]	; (80063fc <_dtoa_r+0x5bc>)
 8006358:	f7fa f9f2 	bl	8000740 <__aeabi_ddiv>
 800635c:	463b      	mov	r3, r7
 800635e:	4632      	mov	r2, r6
 8006360:	f7f9 ff0c 	bl	800017c <__aeabi_dsub>
 8006364:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006368:	9f03      	ldr	r7, [sp, #12]
 800636a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800636e:	f7fa fb6d 	bl	8000a4c <__aeabi_d2iz>
 8006372:	4604      	mov	r4, r0
 8006374:	f7fa f850 	bl	8000418 <__aeabi_i2d>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006380:	f7f9 fefc 	bl	800017c <__aeabi_dsub>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	3430      	adds	r4, #48	; 0x30
 800638a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800638e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006392:	f807 4b01 	strb.w	r4, [r7], #1
 8006396:	f7fa fb1b 	bl	80009d0 <__aeabi_dcmplt>
 800639a:	2800      	cmp	r0, #0
 800639c:	d174      	bne.n	8006488 <_dtoa_r+0x648>
 800639e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063a2:	2000      	movs	r0, #0
 80063a4:	4911      	ldr	r1, [pc, #68]	; (80063ec <_dtoa_r+0x5ac>)
 80063a6:	f7f9 fee9 	bl	800017c <__aeabi_dsub>
 80063aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063ae:	f7fa fb0f 	bl	80009d0 <__aeabi_dcmplt>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	f040 80b7 	bne.w	8006526 <_dtoa_r+0x6e6>
 80063b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063ba:	429f      	cmp	r7, r3
 80063bc:	f43f af7a 	beq.w	80062b4 <_dtoa_r+0x474>
 80063c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063c4:	2200      	movs	r2, #0
 80063c6:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <_dtoa_r+0x5b0>)
 80063c8:	f7fa f890 	bl	80004ec <__aeabi_dmul>
 80063cc:	2200      	movs	r2, #0
 80063ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063d6:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <_dtoa_r+0x5b0>)
 80063d8:	f7fa f888 	bl	80004ec <__aeabi_dmul>
 80063dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063e0:	e7c3      	b.n	800636a <_dtoa_r+0x52a>
 80063e2:	bf00      	nop
 80063e4:	0800ad50 	.word	0x0800ad50
 80063e8:	0800ad28 	.word	0x0800ad28
 80063ec:	3ff00000 	.word	0x3ff00000
 80063f0:	40240000 	.word	0x40240000
 80063f4:	401c0000 	.word	0x401c0000
 80063f8:	40140000 	.word	0x40140000
 80063fc:	3fe00000 	.word	0x3fe00000
 8006400:	4630      	mov	r0, r6
 8006402:	4639      	mov	r1, r7
 8006404:	f7fa f872 	bl	80004ec <__aeabi_dmul>
 8006408:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800640a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800640e:	9c03      	ldr	r4, [sp, #12]
 8006410:	9314      	str	r3, [sp, #80]	; 0x50
 8006412:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006416:	f7fa fb19 	bl	8000a4c <__aeabi_d2iz>
 800641a:	9015      	str	r0, [sp, #84]	; 0x54
 800641c:	f7f9 fffc 	bl	8000418 <__aeabi_i2d>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006428:	f7f9 fea8 	bl	800017c <__aeabi_dsub>
 800642c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800642e:	4606      	mov	r6, r0
 8006430:	3330      	adds	r3, #48	; 0x30
 8006432:	f804 3b01 	strb.w	r3, [r4], #1
 8006436:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006438:	460f      	mov	r7, r1
 800643a:	429c      	cmp	r4, r3
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	d124      	bne.n	800648c <_dtoa_r+0x64c>
 8006442:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006446:	4bb0      	ldr	r3, [pc, #704]	; (8006708 <_dtoa_r+0x8c8>)
 8006448:	f7f9 fe9a 	bl	8000180 <__adddf3>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4630      	mov	r0, r6
 8006452:	4639      	mov	r1, r7
 8006454:	f7fa fada 	bl	8000a0c <__aeabi_dcmpgt>
 8006458:	2800      	cmp	r0, #0
 800645a:	d163      	bne.n	8006524 <_dtoa_r+0x6e4>
 800645c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006460:	2000      	movs	r0, #0
 8006462:	49a9      	ldr	r1, [pc, #676]	; (8006708 <_dtoa_r+0x8c8>)
 8006464:	f7f9 fe8a 	bl	800017c <__aeabi_dsub>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4630      	mov	r0, r6
 800646e:	4639      	mov	r1, r7
 8006470:	f7fa faae 	bl	80009d0 <__aeabi_dcmplt>
 8006474:	2800      	cmp	r0, #0
 8006476:	f43f af1d 	beq.w	80062b4 <_dtoa_r+0x474>
 800647a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800647c:	1e7b      	subs	r3, r7, #1
 800647e:	9314      	str	r3, [sp, #80]	; 0x50
 8006480:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006484:	2b30      	cmp	r3, #48	; 0x30
 8006486:	d0f8      	beq.n	800647a <_dtoa_r+0x63a>
 8006488:	46c2      	mov	sl, r8
 800648a:	e03b      	b.n	8006504 <_dtoa_r+0x6c4>
 800648c:	4b9f      	ldr	r3, [pc, #636]	; (800670c <_dtoa_r+0x8cc>)
 800648e:	f7fa f82d 	bl	80004ec <__aeabi_dmul>
 8006492:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006496:	e7bc      	b.n	8006412 <_dtoa_r+0x5d2>
 8006498:	9f03      	ldr	r7, [sp, #12]
 800649a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800649e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064a2:	4640      	mov	r0, r8
 80064a4:	4649      	mov	r1, r9
 80064a6:	f7fa f94b 	bl	8000740 <__aeabi_ddiv>
 80064aa:	f7fa facf 	bl	8000a4c <__aeabi_d2iz>
 80064ae:	4604      	mov	r4, r0
 80064b0:	f7f9 ffb2 	bl	8000418 <__aeabi_i2d>
 80064b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064b8:	f7fa f818 	bl	80004ec <__aeabi_dmul>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4640      	mov	r0, r8
 80064c2:	4649      	mov	r1, r9
 80064c4:	f7f9 fe5a 	bl	800017c <__aeabi_dsub>
 80064c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80064cc:	f807 6b01 	strb.w	r6, [r7], #1
 80064d0:	9e03      	ldr	r6, [sp, #12]
 80064d2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80064d6:	1bbe      	subs	r6, r7, r6
 80064d8:	45b4      	cmp	ip, r6
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	d136      	bne.n	800654e <_dtoa_r+0x70e>
 80064e0:	f7f9 fe4e 	bl	8000180 <__adddf3>
 80064e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064e8:	4680      	mov	r8, r0
 80064ea:	4689      	mov	r9, r1
 80064ec:	f7fa fa8e 	bl	8000a0c <__aeabi_dcmpgt>
 80064f0:	bb58      	cbnz	r0, 800654a <_dtoa_r+0x70a>
 80064f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064f6:	4640      	mov	r0, r8
 80064f8:	4649      	mov	r1, r9
 80064fa:	f7fa fa5f 	bl	80009bc <__aeabi_dcmpeq>
 80064fe:	b108      	cbz	r0, 8006504 <_dtoa_r+0x6c4>
 8006500:	07e1      	lsls	r1, r4, #31
 8006502:	d422      	bmi.n	800654a <_dtoa_r+0x70a>
 8006504:	4628      	mov	r0, r5
 8006506:	4659      	mov	r1, fp
 8006508:	f000 fe7e 	bl	8007208 <_Bfree>
 800650c:	2300      	movs	r3, #0
 800650e:	703b      	strb	r3, [r7, #0]
 8006510:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006512:	f10a 0001 	add.w	r0, sl, #1
 8006516:	6018      	str	r0, [r3, #0]
 8006518:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800651a:	2b00      	cmp	r3, #0
 800651c:	f43f acde 	beq.w	8005edc <_dtoa_r+0x9c>
 8006520:	601f      	str	r7, [r3, #0]
 8006522:	e4db      	b.n	8005edc <_dtoa_r+0x9c>
 8006524:	4627      	mov	r7, r4
 8006526:	463b      	mov	r3, r7
 8006528:	461f      	mov	r7, r3
 800652a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800652e:	2a39      	cmp	r2, #57	; 0x39
 8006530:	d107      	bne.n	8006542 <_dtoa_r+0x702>
 8006532:	9a03      	ldr	r2, [sp, #12]
 8006534:	429a      	cmp	r2, r3
 8006536:	d1f7      	bne.n	8006528 <_dtoa_r+0x6e8>
 8006538:	2230      	movs	r2, #48	; 0x30
 800653a:	9903      	ldr	r1, [sp, #12]
 800653c:	f108 0801 	add.w	r8, r8, #1
 8006540:	700a      	strb	r2, [r1, #0]
 8006542:	781a      	ldrb	r2, [r3, #0]
 8006544:	3201      	adds	r2, #1
 8006546:	701a      	strb	r2, [r3, #0]
 8006548:	e79e      	b.n	8006488 <_dtoa_r+0x648>
 800654a:	46d0      	mov	r8, sl
 800654c:	e7eb      	b.n	8006526 <_dtoa_r+0x6e6>
 800654e:	2200      	movs	r2, #0
 8006550:	4b6e      	ldr	r3, [pc, #440]	; (800670c <_dtoa_r+0x8cc>)
 8006552:	f7f9 ffcb 	bl	80004ec <__aeabi_dmul>
 8006556:	2200      	movs	r2, #0
 8006558:	2300      	movs	r3, #0
 800655a:	4680      	mov	r8, r0
 800655c:	4689      	mov	r9, r1
 800655e:	f7fa fa2d 	bl	80009bc <__aeabi_dcmpeq>
 8006562:	2800      	cmp	r0, #0
 8006564:	d09b      	beq.n	800649e <_dtoa_r+0x65e>
 8006566:	e7cd      	b.n	8006504 <_dtoa_r+0x6c4>
 8006568:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800656a:	2a00      	cmp	r2, #0
 800656c:	f000 80d0 	beq.w	8006710 <_dtoa_r+0x8d0>
 8006570:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006572:	2a01      	cmp	r2, #1
 8006574:	f300 80ae 	bgt.w	80066d4 <_dtoa_r+0x894>
 8006578:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800657a:	2a00      	cmp	r2, #0
 800657c:	f000 80a6 	beq.w	80066cc <_dtoa_r+0x88c>
 8006580:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006584:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006586:	9f06      	ldr	r7, [sp, #24]
 8006588:	9a06      	ldr	r2, [sp, #24]
 800658a:	2101      	movs	r1, #1
 800658c:	441a      	add	r2, r3
 800658e:	9206      	str	r2, [sp, #24]
 8006590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006592:	4628      	mov	r0, r5
 8006594:	441a      	add	r2, r3
 8006596:	9209      	str	r2, [sp, #36]	; 0x24
 8006598:	f000 ff36 	bl	8007408 <__i2b>
 800659c:	4606      	mov	r6, r0
 800659e:	2f00      	cmp	r7, #0
 80065a0:	dd0c      	ble.n	80065bc <_dtoa_r+0x77c>
 80065a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	dd09      	ble.n	80065bc <_dtoa_r+0x77c>
 80065a8:	42bb      	cmp	r3, r7
 80065aa:	bfa8      	it	ge
 80065ac:	463b      	movge	r3, r7
 80065ae:	9a06      	ldr	r2, [sp, #24]
 80065b0:	1aff      	subs	r7, r7, r3
 80065b2:	1ad2      	subs	r2, r2, r3
 80065b4:	9206      	str	r2, [sp, #24]
 80065b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	9309      	str	r3, [sp, #36]	; 0x24
 80065bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065be:	b1f3      	cbz	r3, 80065fe <_dtoa_r+0x7be>
 80065c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 80a8 	beq.w	8006718 <_dtoa_r+0x8d8>
 80065c8:	2c00      	cmp	r4, #0
 80065ca:	dd10      	ble.n	80065ee <_dtoa_r+0x7ae>
 80065cc:	4631      	mov	r1, r6
 80065ce:	4622      	mov	r2, r4
 80065d0:	4628      	mov	r0, r5
 80065d2:	f000 ffd7 	bl	8007584 <__pow5mult>
 80065d6:	465a      	mov	r2, fp
 80065d8:	4601      	mov	r1, r0
 80065da:	4606      	mov	r6, r0
 80065dc:	4628      	mov	r0, r5
 80065de:	f000 ff29 	bl	8007434 <__multiply>
 80065e2:	4680      	mov	r8, r0
 80065e4:	4659      	mov	r1, fp
 80065e6:	4628      	mov	r0, r5
 80065e8:	f000 fe0e 	bl	8007208 <_Bfree>
 80065ec:	46c3      	mov	fp, r8
 80065ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f0:	1b1a      	subs	r2, r3, r4
 80065f2:	d004      	beq.n	80065fe <_dtoa_r+0x7be>
 80065f4:	4659      	mov	r1, fp
 80065f6:	4628      	mov	r0, r5
 80065f8:	f000 ffc4 	bl	8007584 <__pow5mult>
 80065fc:	4683      	mov	fp, r0
 80065fe:	2101      	movs	r1, #1
 8006600:	4628      	mov	r0, r5
 8006602:	f000 ff01 	bl	8007408 <__i2b>
 8006606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006608:	4604      	mov	r4, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	f340 8086 	ble.w	800671c <_dtoa_r+0x8dc>
 8006610:	461a      	mov	r2, r3
 8006612:	4601      	mov	r1, r0
 8006614:	4628      	mov	r0, r5
 8006616:	f000 ffb5 	bl	8007584 <__pow5mult>
 800661a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800661c:	4604      	mov	r4, r0
 800661e:	2b01      	cmp	r3, #1
 8006620:	dd7f      	ble.n	8006722 <_dtoa_r+0x8e2>
 8006622:	f04f 0800 	mov.w	r8, #0
 8006626:	6923      	ldr	r3, [r4, #16]
 8006628:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800662c:	6918      	ldr	r0, [r3, #16]
 800662e:	f000 fe9d 	bl	800736c <__hi0bits>
 8006632:	f1c0 0020 	rsb	r0, r0, #32
 8006636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006638:	4418      	add	r0, r3
 800663a:	f010 001f 	ands.w	r0, r0, #31
 800663e:	f000 8092 	beq.w	8006766 <_dtoa_r+0x926>
 8006642:	f1c0 0320 	rsb	r3, r0, #32
 8006646:	2b04      	cmp	r3, #4
 8006648:	f340 808a 	ble.w	8006760 <_dtoa_r+0x920>
 800664c:	f1c0 001c 	rsb	r0, r0, #28
 8006650:	9b06      	ldr	r3, [sp, #24]
 8006652:	4407      	add	r7, r0
 8006654:	4403      	add	r3, r0
 8006656:	9306      	str	r3, [sp, #24]
 8006658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800665a:	4403      	add	r3, r0
 800665c:	9309      	str	r3, [sp, #36]	; 0x24
 800665e:	9b06      	ldr	r3, [sp, #24]
 8006660:	2b00      	cmp	r3, #0
 8006662:	dd05      	ble.n	8006670 <_dtoa_r+0x830>
 8006664:	4659      	mov	r1, fp
 8006666:	461a      	mov	r2, r3
 8006668:	4628      	mov	r0, r5
 800666a:	f000 ffe5 	bl	8007638 <__lshift>
 800666e:	4683      	mov	fp, r0
 8006670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006672:	2b00      	cmp	r3, #0
 8006674:	dd05      	ble.n	8006682 <_dtoa_r+0x842>
 8006676:	4621      	mov	r1, r4
 8006678:	461a      	mov	r2, r3
 800667a:	4628      	mov	r0, r5
 800667c:	f000 ffdc 	bl	8007638 <__lshift>
 8006680:	4604      	mov	r4, r0
 8006682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006684:	2b00      	cmp	r3, #0
 8006686:	d070      	beq.n	800676a <_dtoa_r+0x92a>
 8006688:	4621      	mov	r1, r4
 800668a:	4658      	mov	r0, fp
 800668c:	f001 f844 	bl	8007718 <__mcmp>
 8006690:	2800      	cmp	r0, #0
 8006692:	da6a      	bge.n	800676a <_dtoa_r+0x92a>
 8006694:	2300      	movs	r3, #0
 8006696:	4659      	mov	r1, fp
 8006698:	220a      	movs	r2, #10
 800669a:	4628      	mov	r0, r5
 800669c:	f000 fdd6 	bl	800724c <__multadd>
 80066a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066a2:	4683      	mov	fp, r0
 80066a4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 8194 	beq.w	80069d6 <_dtoa_r+0xb96>
 80066ae:	4631      	mov	r1, r6
 80066b0:	2300      	movs	r3, #0
 80066b2:	220a      	movs	r2, #10
 80066b4:	4628      	mov	r0, r5
 80066b6:	f000 fdc9 	bl	800724c <__multadd>
 80066ba:	f1b9 0f00 	cmp.w	r9, #0
 80066be:	4606      	mov	r6, r0
 80066c0:	f300 8093 	bgt.w	80067ea <_dtoa_r+0x9aa>
 80066c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	dc57      	bgt.n	800677a <_dtoa_r+0x93a>
 80066ca:	e08e      	b.n	80067ea <_dtoa_r+0x9aa>
 80066cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80066ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80066d2:	e757      	b.n	8006584 <_dtoa_r+0x744>
 80066d4:	9b08      	ldr	r3, [sp, #32]
 80066d6:	1e5c      	subs	r4, r3, #1
 80066d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066da:	42a3      	cmp	r3, r4
 80066dc:	bfb7      	itett	lt
 80066de:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80066e0:	1b1c      	subge	r4, r3, r4
 80066e2:	1ae2      	sublt	r2, r4, r3
 80066e4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80066e6:	bfbe      	ittt	lt
 80066e8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80066ea:	189b      	addlt	r3, r3, r2
 80066ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80066ee:	9b08      	ldr	r3, [sp, #32]
 80066f0:	bfb8      	it	lt
 80066f2:	2400      	movlt	r4, #0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	bfbb      	ittet	lt
 80066f8:	9b06      	ldrlt	r3, [sp, #24]
 80066fa:	9a08      	ldrlt	r2, [sp, #32]
 80066fc:	9f06      	ldrge	r7, [sp, #24]
 80066fe:	1a9f      	sublt	r7, r3, r2
 8006700:	bfac      	ite	ge
 8006702:	9b08      	ldrge	r3, [sp, #32]
 8006704:	2300      	movlt	r3, #0
 8006706:	e73f      	b.n	8006588 <_dtoa_r+0x748>
 8006708:	3fe00000 	.word	0x3fe00000
 800670c:	40240000 	.word	0x40240000
 8006710:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006712:	9f06      	ldr	r7, [sp, #24]
 8006714:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006716:	e742      	b.n	800659e <_dtoa_r+0x75e>
 8006718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800671a:	e76b      	b.n	80065f4 <_dtoa_r+0x7b4>
 800671c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800671e:	2b01      	cmp	r3, #1
 8006720:	dc19      	bgt.n	8006756 <_dtoa_r+0x916>
 8006722:	9b04      	ldr	r3, [sp, #16]
 8006724:	b9bb      	cbnz	r3, 8006756 <_dtoa_r+0x916>
 8006726:	9b05      	ldr	r3, [sp, #20]
 8006728:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800672c:	b99b      	cbnz	r3, 8006756 <_dtoa_r+0x916>
 800672e:	9b05      	ldr	r3, [sp, #20]
 8006730:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006734:	0d1b      	lsrs	r3, r3, #20
 8006736:	051b      	lsls	r3, r3, #20
 8006738:	b183      	cbz	r3, 800675c <_dtoa_r+0x91c>
 800673a:	f04f 0801 	mov.w	r8, #1
 800673e:	9b06      	ldr	r3, [sp, #24]
 8006740:	3301      	adds	r3, #1
 8006742:	9306      	str	r3, [sp, #24]
 8006744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006746:	3301      	adds	r3, #1
 8006748:	9309      	str	r3, [sp, #36]	; 0x24
 800674a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800674c:	2b00      	cmp	r3, #0
 800674e:	f47f af6a 	bne.w	8006626 <_dtoa_r+0x7e6>
 8006752:	2001      	movs	r0, #1
 8006754:	e76f      	b.n	8006636 <_dtoa_r+0x7f6>
 8006756:	f04f 0800 	mov.w	r8, #0
 800675a:	e7f6      	b.n	800674a <_dtoa_r+0x90a>
 800675c:	4698      	mov	r8, r3
 800675e:	e7f4      	b.n	800674a <_dtoa_r+0x90a>
 8006760:	f43f af7d 	beq.w	800665e <_dtoa_r+0x81e>
 8006764:	4618      	mov	r0, r3
 8006766:	301c      	adds	r0, #28
 8006768:	e772      	b.n	8006650 <_dtoa_r+0x810>
 800676a:	9b08      	ldr	r3, [sp, #32]
 800676c:	2b00      	cmp	r3, #0
 800676e:	dc36      	bgt.n	80067de <_dtoa_r+0x99e>
 8006770:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006772:	2b02      	cmp	r3, #2
 8006774:	dd33      	ble.n	80067de <_dtoa_r+0x99e>
 8006776:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800677a:	f1b9 0f00 	cmp.w	r9, #0
 800677e:	d10d      	bne.n	800679c <_dtoa_r+0x95c>
 8006780:	4621      	mov	r1, r4
 8006782:	464b      	mov	r3, r9
 8006784:	2205      	movs	r2, #5
 8006786:	4628      	mov	r0, r5
 8006788:	f000 fd60 	bl	800724c <__multadd>
 800678c:	4601      	mov	r1, r0
 800678e:	4604      	mov	r4, r0
 8006790:	4658      	mov	r0, fp
 8006792:	f000 ffc1 	bl	8007718 <__mcmp>
 8006796:	2800      	cmp	r0, #0
 8006798:	f73f adb8 	bgt.w	800630c <_dtoa_r+0x4cc>
 800679c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800679e:	9f03      	ldr	r7, [sp, #12]
 80067a0:	ea6f 0a03 	mvn.w	sl, r3
 80067a4:	f04f 0800 	mov.w	r8, #0
 80067a8:	4621      	mov	r1, r4
 80067aa:	4628      	mov	r0, r5
 80067ac:	f000 fd2c 	bl	8007208 <_Bfree>
 80067b0:	2e00      	cmp	r6, #0
 80067b2:	f43f aea7 	beq.w	8006504 <_dtoa_r+0x6c4>
 80067b6:	f1b8 0f00 	cmp.w	r8, #0
 80067ba:	d005      	beq.n	80067c8 <_dtoa_r+0x988>
 80067bc:	45b0      	cmp	r8, r6
 80067be:	d003      	beq.n	80067c8 <_dtoa_r+0x988>
 80067c0:	4641      	mov	r1, r8
 80067c2:	4628      	mov	r0, r5
 80067c4:	f000 fd20 	bl	8007208 <_Bfree>
 80067c8:	4631      	mov	r1, r6
 80067ca:	4628      	mov	r0, r5
 80067cc:	f000 fd1c 	bl	8007208 <_Bfree>
 80067d0:	e698      	b.n	8006504 <_dtoa_r+0x6c4>
 80067d2:	2400      	movs	r4, #0
 80067d4:	4626      	mov	r6, r4
 80067d6:	e7e1      	b.n	800679c <_dtoa_r+0x95c>
 80067d8:	46c2      	mov	sl, r8
 80067da:	4626      	mov	r6, r4
 80067dc:	e596      	b.n	800630c <_dtoa_r+0x4cc>
 80067de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 80fd 	beq.w	80069e4 <_dtoa_r+0xba4>
 80067ea:	2f00      	cmp	r7, #0
 80067ec:	dd05      	ble.n	80067fa <_dtoa_r+0x9ba>
 80067ee:	4631      	mov	r1, r6
 80067f0:	463a      	mov	r2, r7
 80067f2:	4628      	mov	r0, r5
 80067f4:	f000 ff20 	bl	8007638 <__lshift>
 80067f8:	4606      	mov	r6, r0
 80067fa:	f1b8 0f00 	cmp.w	r8, #0
 80067fe:	d05c      	beq.n	80068ba <_dtoa_r+0xa7a>
 8006800:	4628      	mov	r0, r5
 8006802:	6871      	ldr	r1, [r6, #4]
 8006804:	f000 fcc0 	bl	8007188 <_Balloc>
 8006808:	4607      	mov	r7, r0
 800680a:	b928      	cbnz	r0, 8006818 <_dtoa_r+0x9d8>
 800680c:	4602      	mov	r2, r0
 800680e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006812:	4b7f      	ldr	r3, [pc, #508]	; (8006a10 <_dtoa_r+0xbd0>)
 8006814:	f7ff bb28 	b.w	8005e68 <_dtoa_r+0x28>
 8006818:	6932      	ldr	r2, [r6, #16]
 800681a:	f106 010c 	add.w	r1, r6, #12
 800681e:	3202      	adds	r2, #2
 8006820:	0092      	lsls	r2, r2, #2
 8006822:	300c      	adds	r0, #12
 8006824:	f000 fc96 	bl	8007154 <memcpy>
 8006828:	2201      	movs	r2, #1
 800682a:	4639      	mov	r1, r7
 800682c:	4628      	mov	r0, r5
 800682e:	f000 ff03 	bl	8007638 <__lshift>
 8006832:	46b0      	mov	r8, r6
 8006834:	4606      	mov	r6, r0
 8006836:	9b03      	ldr	r3, [sp, #12]
 8006838:	3301      	adds	r3, #1
 800683a:	9308      	str	r3, [sp, #32]
 800683c:	9b03      	ldr	r3, [sp, #12]
 800683e:	444b      	add	r3, r9
 8006840:	930a      	str	r3, [sp, #40]	; 0x28
 8006842:	9b04      	ldr	r3, [sp, #16]
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	9309      	str	r3, [sp, #36]	; 0x24
 800684a:	9b08      	ldr	r3, [sp, #32]
 800684c:	4621      	mov	r1, r4
 800684e:	3b01      	subs	r3, #1
 8006850:	4658      	mov	r0, fp
 8006852:	9304      	str	r3, [sp, #16]
 8006854:	f7ff fa66 	bl	8005d24 <quorem>
 8006858:	4603      	mov	r3, r0
 800685a:	4641      	mov	r1, r8
 800685c:	3330      	adds	r3, #48	; 0x30
 800685e:	9006      	str	r0, [sp, #24]
 8006860:	4658      	mov	r0, fp
 8006862:	930b      	str	r3, [sp, #44]	; 0x2c
 8006864:	f000 ff58 	bl	8007718 <__mcmp>
 8006868:	4632      	mov	r2, r6
 800686a:	4681      	mov	r9, r0
 800686c:	4621      	mov	r1, r4
 800686e:	4628      	mov	r0, r5
 8006870:	f000 ff6e 	bl	8007750 <__mdiff>
 8006874:	68c2      	ldr	r2, [r0, #12]
 8006876:	4607      	mov	r7, r0
 8006878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800687a:	bb02      	cbnz	r2, 80068be <_dtoa_r+0xa7e>
 800687c:	4601      	mov	r1, r0
 800687e:	4658      	mov	r0, fp
 8006880:	f000 ff4a 	bl	8007718 <__mcmp>
 8006884:	4602      	mov	r2, r0
 8006886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006888:	4639      	mov	r1, r7
 800688a:	4628      	mov	r0, r5
 800688c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006890:	f000 fcba 	bl	8007208 <_Bfree>
 8006894:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006898:	9f08      	ldr	r7, [sp, #32]
 800689a:	ea43 0102 	orr.w	r1, r3, r2
 800689e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a0:	430b      	orrs	r3, r1
 80068a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068a4:	d10d      	bne.n	80068c2 <_dtoa_r+0xa82>
 80068a6:	2b39      	cmp	r3, #57	; 0x39
 80068a8:	d029      	beq.n	80068fe <_dtoa_r+0xabe>
 80068aa:	f1b9 0f00 	cmp.w	r9, #0
 80068ae:	dd01      	ble.n	80068b4 <_dtoa_r+0xa74>
 80068b0:	9b06      	ldr	r3, [sp, #24]
 80068b2:	3331      	adds	r3, #49	; 0x31
 80068b4:	9a04      	ldr	r2, [sp, #16]
 80068b6:	7013      	strb	r3, [r2, #0]
 80068b8:	e776      	b.n	80067a8 <_dtoa_r+0x968>
 80068ba:	4630      	mov	r0, r6
 80068bc:	e7b9      	b.n	8006832 <_dtoa_r+0x9f2>
 80068be:	2201      	movs	r2, #1
 80068c0:	e7e2      	b.n	8006888 <_dtoa_r+0xa48>
 80068c2:	f1b9 0f00 	cmp.w	r9, #0
 80068c6:	db06      	blt.n	80068d6 <_dtoa_r+0xa96>
 80068c8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80068ca:	ea41 0909 	orr.w	r9, r1, r9
 80068ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068d0:	ea59 0101 	orrs.w	r1, r9, r1
 80068d4:	d120      	bne.n	8006918 <_dtoa_r+0xad8>
 80068d6:	2a00      	cmp	r2, #0
 80068d8:	ddec      	ble.n	80068b4 <_dtoa_r+0xa74>
 80068da:	4659      	mov	r1, fp
 80068dc:	2201      	movs	r2, #1
 80068de:	4628      	mov	r0, r5
 80068e0:	9308      	str	r3, [sp, #32]
 80068e2:	f000 fea9 	bl	8007638 <__lshift>
 80068e6:	4621      	mov	r1, r4
 80068e8:	4683      	mov	fp, r0
 80068ea:	f000 ff15 	bl	8007718 <__mcmp>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	9b08      	ldr	r3, [sp, #32]
 80068f2:	dc02      	bgt.n	80068fa <_dtoa_r+0xaba>
 80068f4:	d1de      	bne.n	80068b4 <_dtoa_r+0xa74>
 80068f6:	07da      	lsls	r2, r3, #31
 80068f8:	d5dc      	bpl.n	80068b4 <_dtoa_r+0xa74>
 80068fa:	2b39      	cmp	r3, #57	; 0x39
 80068fc:	d1d8      	bne.n	80068b0 <_dtoa_r+0xa70>
 80068fe:	2339      	movs	r3, #57	; 0x39
 8006900:	9a04      	ldr	r2, [sp, #16]
 8006902:	7013      	strb	r3, [r2, #0]
 8006904:	463b      	mov	r3, r7
 8006906:	461f      	mov	r7, r3
 8006908:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800690c:	3b01      	subs	r3, #1
 800690e:	2a39      	cmp	r2, #57	; 0x39
 8006910:	d050      	beq.n	80069b4 <_dtoa_r+0xb74>
 8006912:	3201      	adds	r2, #1
 8006914:	701a      	strb	r2, [r3, #0]
 8006916:	e747      	b.n	80067a8 <_dtoa_r+0x968>
 8006918:	2a00      	cmp	r2, #0
 800691a:	dd03      	ble.n	8006924 <_dtoa_r+0xae4>
 800691c:	2b39      	cmp	r3, #57	; 0x39
 800691e:	d0ee      	beq.n	80068fe <_dtoa_r+0xabe>
 8006920:	3301      	adds	r3, #1
 8006922:	e7c7      	b.n	80068b4 <_dtoa_r+0xa74>
 8006924:	9a08      	ldr	r2, [sp, #32]
 8006926:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006928:	f802 3c01 	strb.w	r3, [r2, #-1]
 800692c:	428a      	cmp	r2, r1
 800692e:	d02a      	beq.n	8006986 <_dtoa_r+0xb46>
 8006930:	4659      	mov	r1, fp
 8006932:	2300      	movs	r3, #0
 8006934:	220a      	movs	r2, #10
 8006936:	4628      	mov	r0, r5
 8006938:	f000 fc88 	bl	800724c <__multadd>
 800693c:	45b0      	cmp	r8, r6
 800693e:	4683      	mov	fp, r0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	f04f 020a 	mov.w	r2, #10
 8006948:	4641      	mov	r1, r8
 800694a:	4628      	mov	r0, r5
 800694c:	d107      	bne.n	800695e <_dtoa_r+0xb1e>
 800694e:	f000 fc7d 	bl	800724c <__multadd>
 8006952:	4680      	mov	r8, r0
 8006954:	4606      	mov	r6, r0
 8006956:	9b08      	ldr	r3, [sp, #32]
 8006958:	3301      	adds	r3, #1
 800695a:	9308      	str	r3, [sp, #32]
 800695c:	e775      	b.n	800684a <_dtoa_r+0xa0a>
 800695e:	f000 fc75 	bl	800724c <__multadd>
 8006962:	4631      	mov	r1, r6
 8006964:	4680      	mov	r8, r0
 8006966:	2300      	movs	r3, #0
 8006968:	220a      	movs	r2, #10
 800696a:	4628      	mov	r0, r5
 800696c:	f000 fc6e 	bl	800724c <__multadd>
 8006970:	4606      	mov	r6, r0
 8006972:	e7f0      	b.n	8006956 <_dtoa_r+0xb16>
 8006974:	f1b9 0f00 	cmp.w	r9, #0
 8006978:	bfcc      	ite	gt
 800697a:	464f      	movgt	r7, r9
 800697c:	2701      	movle	r7, #1
 800697e:	f04f 0800 	mov.w	r8, #0
 8006982:	9a03      	ldr	r2, [sp, #12]
 8006984:	4417      	add	r7, r2
 8006986:	4659      	mov	r1, fp
 8006988:	2201      	movs	r2, #1
 800698a:	4628      	mov	r0, r5
 800698c:	9308      	str	r3, [sp, #32]
 800698e:	f000 fe53 	bl	8007638 <__lshift>
 8006992:	4621      	mov	r1, r4
 8006994:	4683      	mov	fp, r0
 8006996:	f000 febf 	bl	8007718 <__mcmp>
 800699a:	2800      	cmp	r0, #0
 800699c:	dcb2      	bgt.n	8006904 <_dtoa_r+0xac4>
 800699e:	d102      	bne.n	80069a6 <_dtoa_r+0xb66>
 80069a0:	9b08      	ldr	r3, [sp, #32]
 80069a2:	07db      	lsls	r3, r3, #31
 80069a4:	d4ae      	bmi.n	8006904 <_dtoa_r+0xac4>
 80069a6:	463b      	mov	r3, r7
 80069a8:	461f      	mov	r7, r3
 80069aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069ae:	2a30      	cmp	r2, #48	; 0x30
 80069b0:	d0fa      	beq.n	80069a8 <_dtoa_r+0xb68>
 80069b2:	e6f9      	b.n	80067a8 <_dtoa_r+0x968>
 80069b4:	9a03      	ldr	r2, [sp, #12]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d1a5      	bne.n	8006906 <_dtoa_r+0xac6>
 80069ba:	2331      	movs	r3, #49	; 0x31
 80069bc:	f10a 0a01 	add.w	sl, sl, #1
 80069c0:	e779      	b.n	80068b6 <_dtoa_r+0xa76>
 80069c2:	4b14      	ldr	r3, [pc, #80]	; (8006a14 <_dtoa_r+0xbd4>)
 80069c4:	f7ff baa8 	b.w	8005f18 <_dtoa_r+0xd8>
 80069c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f47f aa81 	bne.w	8005ed2 <_dtoa_r+0x92>
 80069d0:	4b11      	ldr	r3, [pc, #68]	; (8006a18 <_dtoa_r+0xbd8>)
 80069d2:	f7ff baa1 	b.w	8005f18 <_dtoa_r+0xd8>
 80069d6:	f1b9 0f00 	cmp.w	r9, #0
 80069da:	dc03      	bgt.n	80069e4 <_dtoa_r+0xba4>
 80069dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069de:	2b02      	cmp	r3, #2
 80069e0:	f73f aecb 	bgt.w	800677a <_dtoa_r+0x93a>
 80069e4:	9f03      	ldr	r7, [sp, #12]
 80069e6:	4621      	mov	r1, r4
 80069e8:	4658      	mov	r0, fp
 80069ea:	f7ff f99b 	bl	8005d24 <quorem>
 80069ee:	9a03      	ldr	r2, [sp, #12]
 80069f0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80069f4:	f807 3b01 	strb.w	r3, [r7], #1
 80069f8:	1aba      	subs	r2, r7, r2
 80069fa:	4591      	cmp	r9, r2
 80069fc:	ddba      	ble.n	8006974 <_dtoa_r+0xb34>
 80069fe:	4659      	mov	r1, fp
 8006a00:	2300      	movs	r3, #0
 8006a02:	220a      	movs	r2, #10
 8006a04:	4628      	mov	r0, r5
 8006a06:	f000 fc21 	bl	800724c <__multadd>
 8006a0a:	4683      	mov	fp, r0
 8006a0c:	e7eb      	b.n	80069e6 <_dtoa_r+0xba6>
 8006a0e:	bf00      	nop
 8006a10:	0800ac40 	.word	0x0800ac40
 8006a14:	0800aab0 	.word	0x0800aab0
 8006a18:	0800abd8 	.word	0x0800abd8

08006a1c <fiprintf>:
 8006a1c:	b40e      	push	{r1, r2, r3}
 8006a1e:	b503      	push	{r0, r1, lr}
 8006a20:	4601      	mov	r1, r0
 8006a22:	ab03      	add	r3, sp, #12
 8006a24:	4805      	ldr	r0, [pc, #20]	; (8006a3c <fiprintf+0x20>)
 8006a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a2a:	6800      	ldr	r0, [r0, #0]
 8006a2c:	9301      	str	r3, [sp, #4]
 8006a2e:	f001 f9fb 	bl	8007e28 <_vfiprintf_r>
 8006a32:	b002      	add	sp, #8
 8006a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a38:	b003      	add	sp, #12
 8006a3a:	4770      	bx	lr
 8006a3c:	20000020 	.word	0x20000020

08006a40 <rshift>:
 8006a40:	6903      	ldr	r3, [r0, #16]
 8006a42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006a4a:	f100 0414 	add.w	r4, r0, #20
 8006a4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006a52:	dd46      	ble.n	8006ae2 <rshift+0xa2>
 8006a54:	f011 011f 	ands.w	r1, r1, #31
 8006a58:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006a5c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006a60:	d10c      	bne.n	8006a7c <rshift+0x3c>
 8006a62:	4629      	mov	r1, r5
 8006a64:	f100 0710 	add.w	r7, r0, #16
 8006a68:	42b1      	cmp	r1, r6
 8006a6a:	d335      	bcc.n	8006ad8 <rshift+0x98>
 8006a6c:	1a9b      	subs	r3, r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	1eea      	subs	r2, r5, #3
 8006a72:	4296      	cmp	r6, r2
 8006a74:	bf38      	it	cc
 8006a76:	2300      	movcc	r3, #0
 8006a78:	4423      	add	r3, r4
 8006a7a:	e015      	b.n	8006aa8 <rshift+0x68>
 8006a7c:	46a1      	mov	r9, r4
 8006a7e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006a82:	f1c1 0820 	rsb	r8, r1, #32
 8006a86:	40cf      	lsrs	r7, r1
 8006a88:	f105 0e04 	add.w	lr, r5, #4
 8006a8c:	4576      	cmp	r6, lr
 8006a8e:	46f4      	mov	ip, lr
 8006a90:	d816      	bhi.n	8006ac0 <rshift+0x80>
 8006a92:	1a9a      	subs	r2, r3, r2
 8006a94:	0092      	lsls	r2, r2, #2
 8006a96:	3a04      	subs	r2, #4
 8006a98:	3501      	adds	r5, #1
 8006a9a:	42ae      	cmp	r6, r5
 8006a9c:	bf38      	it	cc
 8006a9e:	2200      	movcc	r2, #0
 8006aa0:	18a3      	adds	r3, r4, r2
 8006aa2:	50a7      	str	r7, [r4, r2]
 8006aa4:	b107      	cbz	r7, 8006aa8 <rshift+0x68>
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	42a3      	cmp	r3, r4
 8006aaa:	eba3 0204 	sub.w	r2, r3, r4
 8006aae:	bf08      	it	eq
 8006ab0:	2300      	moveq	r3, #0
 8006ab2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006ab6:	6102      	str	r2, [r0, #16]
 8006ab8:	bf08      	it	eq
 8006aba:	6143      	streq	r3, [r0, #20]
 8006abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ac0:	f8dc c000 	ldr.w	ip, [ip]
 8006ac4:	fa0c fc08 	lsl.w	ip, ip, r8
 8006ac8:	ea4c 0707 	orr.w	r7, ip, r7
 8006acc:	f849 7b04 	str.w	r7, [r9], #4
 8006ad0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ad4:	40cf      	lsrs	r7, r1
 8006ad6:	e7d9      	b.n	8006a8c <rshift+0x4c>
 8006ad8:	f851 cb04 	ldr.w	ip, [r1], #4
 8006adc:	f847 cf04 	str.w	ip, [r7, #4]!
 8006ae0:	e7c2      	b.n	8006a68 <rshift+0x28>
 8006ae2:	4623      	mov	r3, r4
 8006ae4:	e7e0      	b.n	8006aa8 <rshift+0x68>

08006ae6 <__hexdig_fun>:
 8006ae6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006aea:	2b09      	cmp	r3, #9
 8006aec:	d802      	bhi.n	8006af4 <__hexdig_fun+0xe>
 8006aee:	3820      	subs	r0, #32
 8006af0:	b2c0      	uxtb	r0, r0
 8006af2:	4770      	bx	lr
 8006af4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006af8:	2b05      	cmp	r3, #5
 8006afa:	d801      	bhi.n	8006b00 <__hexdig_fun+0x1a>
 8006afc:	3847      	subs	r0, #71	; 0x47
 8006afe:	e7f7      	b.n	8006af0 <__hexdig_fun+0xa>
 8006b00:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006b04:	2b05      	cmp	r3, #5
 8006b06:	d801      	bhi.n	8006b0c <__hexdig_fun+0x26>
 8006b08:	3827      	subs	r0, #39	; 0x27
 8006b0a:	e7f1      	b.n	8006af0 <__hexdig_fun+0xa>
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	4770      	bx	lr

08006b10 <__gethex>:
 8006b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b14:	b08b      	sub	sp, #44	; 0x2c
 8006b16:	9305      	str	r3, [sp, #20]
 8006b18:	4bb2      	ldr	r3, [pc, #712]	; (8006de4 <__gethex+0x2d4>)
 8006b1a:	9002      	str	r0, [sp, #8]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	468b      	mov	fp, r1
 8006b20:	4618      	mov	r0, r3
 8006b22:	4690      	mov	r8, r2
 8006b24:	9303      	str	r3, [sp, #12]
 8006b26:	f7f9 fb1d 	bl	8000164 <strlen>
 8006b2a:	4682      	mov	sl, r0
 8006b2c:	9b03      	ldr	r3, [sp, #12]
 8006b2e:	f8db 2000 	ldr.w	r2, [fp]
 8006b32:	4403      	add	r3, r0
 8006b34:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006b38:	9306      	str	r3, [sp, #24]
 8006b3a:	1c93      	adds	r3, r2, #2
 8006b3c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006b40:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006b44:	32fe      	adds	r2, #254	; 0xfe
 8006b46:	18d1      	adds	r1, r2, r3
 8006b48:	461f      	mov	r7, r3
 8006b4a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006b4e:	9101      	str	r1, [sp, #4]
 8006b50:	2830      	cmp	r0, #48	; 0x30
 8006b52:	d0f8      	beq.n	8006b46 <__gethex+0x36>
 8006b54:	f7ff ffc7 	bl	8006ae6 <__hexdig_fun>
 8006b58:	4604      	mov	r4, r0
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d13a      	bne.n	8006bd4 <__gethex+0xc4>
 8006b5e:	4652      	mov	r2, sl
 8006b60:	4638      	mov	r0, r7
 8006b62:	9903      	ldr	r1, [sp, #12]
 8006b64:	f001 fa96 	bl	8008094 <strncmp>
 8006b68:	4605      	mov	r5, r0
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d166      	bne.n	8006c3c <__gethex+0x12c>
 8006b6e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006b72:	eb07 060a 	add.w	r6, r7, sl
 8006b76:	f7ff ffb6 	bl	8006ae6 <__hexdig_fun>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	d060      	beq.n	8006c40 <__gethex+0x130>
 8006b7e:	4633      	mov	r3, r6
 8006b80:	7818      	ldrb	r0, [r3, #0]
 8006b82:	461f      	mov	r7, r3
 8006b84:	2830      	cmp	r0, #48	; 0x30
 8006b86:	f103 0301 	add.w	r3, r3, #1
 8006b8a:	d0f9      	beq.n	8006b80 <__gethex+0x70>
 8006b8c:	f7ff ffab 	bl	8006ae6 <__hexdig_fun>
 8006b90:	2301      	movs	r3, #1
 8006b92:	fab0 f480 	clz	r4, r0
 8006b96:	4635      	mov	r5, r6
 8006b98:	0964      	lsrs	r4, r4, #5
 8006b9a:	9301      	str	r3, [sp, #4]
 8006b9c:	463a      	mov	r2, r7
 8006b9e:	4616      	mov	r6, r2
 8006ba0:	7830      	ldrb	r0, [r6, #0]
 8006ba2:	3201      	adds	r2, #1
 8006ba4:	f7ff ff9f 	bl	8006ae6 <__hexdig_fun>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d1f8      	bne.n	8006b9e <__gethex+0x8e>
 8006bac:	4652      	mov	r2, sl
 8006bae:	4630      	mov	r0, r6
 8006bb0:	9903      	ldr	r1, [sp, #12]
 8006bb2:	f001 fa6f 	bl	8008094 <strncmp>
 8006bb6:	b980      	cbnz	r0, 8006bda <__gethex+0xca>
 8006bb8:	b94d      	cbnz	r5, 8006bce <__gethex+0xbe>
 8006bba:	eb06 050a 	add.w	r5, r6, sl
 8006bbe:	462a      	mov	r2, r5
 8006bc0:	4616      	mov	r6, r2
 8006bc2:	7830      	ldrb	r0, [r6, #0]
 8006bc4:	3201      	adds	r2, #1
 8006bc6:	f7ff ff8e 	bl	8006ae6 <__hexdig_fun>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d1f8      	bne.n	8006bc0 <__gethex+0xb0>
 8006bce:	1bad      	subs	r5, r5, r6
 8006bd0:	00ad      	lsls	r5, r5, #2
 8006bd2:	e004      	b.n	8006bde <__gethex+0xce>
 8006bd4:	2400      	movs	r4, #0
 8006bd6:	4625      	mov	r5, r4
 8006bd8:	e7e0      	b.n	8006b9c <__gethex+0x8c>
 8006bda:	2d00      	cmp	r5, #0
 8006bdc:	d1f7      	bne.n	8006bce <__gethex+0xbe>
 8006bde:	7833      	ldrb	r3, [r6, #0]
 8006be0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006be4:	2b50      	cmp	r3, #80	; 0x50
 8006be6:	d139      	bne.n	8006c5c <__gethex+0x14c>
 8006be8:	7873      	ldrb	r3, [r6, #1]
 8006bea:	2b2b      	cmp	r3, #43	; 0x2b
 8006bec:	d02a      	beq.n	8006c44 <__gethex+0x134>
 8006bee:	2b2d      	cmp	r3, #45	; 0x2d
 8006bf0:	d02c      	beq.n	8006c4c <__gethex+0x13c>
 8006bf2:	f04f 0900 	mov.w	r9, #0
 8006bf6:	1c71      	adds	r1, r6, #1
 8006bf8:	7808      	ldrb	r0, [r1, #0]
 8006bfa:	f7ff ff74 	bl	8006ae6 <__hexdig_fun>
 8006bfe:	1e43      	subs	r3, r0, #1
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b18      	cmp	r3, #24
 8006c04:	d82a      	bhi.n	8006c5c <__gethex+0x14c>
 8006c06:	f1a0 0210 	sub.w	r2, r0, #16
 8006c0a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006c0e:	f7ff ff6a 	bl	8006ae6 <__hexdig_fun>
 8006c12:	1e43      	subs	r3, r0, #1
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b18      	cmp	r3, #24
 8006c18:	d91b      	bls.n	8006c52 <__gethex+0x142>
 8006c1a:	f1b9 0f00 	cmp.w	r9, #0
 8006c1e:	d000      	beq.n	8006c22 <__gethex+0x112>
 8006c20:	4252      	negs	r2, r2
 8006c22:	4415      	add	r5, r2
 8006c24:	f8cb 1000 	str.w	r1, [fp]
 8006c28:	b1d4      	cbz	r4, 8006c60 <__gethex+0x150>
 8006c2a:	9b01      	ldr	r3, [sp, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	bf14      	ite	ne
 8006c30:	2700      	movne	r7, #0
 8006c32:	2706      	moveq	r7, #6
 8006c34:	4638      	mov	r0, r7
 8006c36:	b00b      	add	sp, #44	; 0x2c
 8006c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3c:	463e      	mov	r6, r7
 8006c3e:	4625      	mov	r5, r4
 8006c40:	2401      	movs	r4, #1
 8006c42:	e7cc      	b.n	8006bde <__gethex+0xce>
 8006c44:	f04f 0900 	mov.w	r9, #0
 8006c48:	1cb1      	adds	r1, r6, #2
 8006c4a:	e7d5      	b.n	8006bf8 <__gethex+0xe8>
 8006c4c:	f04f 0901 	mov.w	r9, #1
 8006c50:	e7fa      	b.n	8006c48 <__gethex+0x138>
 8006c52:	230a      	movs	r3, #10
 8006c54:	fb03 0202 	mla	r2, r3, r2, r0
 8006c58:	3a10      	subs	r2, #16
 8006c5a:	e7d6      	b.n	8006c0a <__gethex+0xfa>
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	e7e1      	b.n	8006c24 <__gethex+0x114>
 8006c60:	4621      	mov	r1, r4
 8006c62:	1bf3      	subs	r3, r6, r7
 8006c64:	3b01      	subs	r3, #1
 8006c66:	2b07      	cmp	r3, #7
 8006c68:	dc0a      	bgt.n	8006c80 <__gethex+0x170>
 8006c6a:	9802      	ldr	r0, [sp, #8]
 8006c6c:	f000 fa8c 	bl	8007188 <_Balloc>
 8006c70:	4604      	mov	r4, r0
 8006c72:	b940      	cbnz	r0, 8006c86 <__gethex+0x176>
 8006c74:	4602      	mov	r2, r0
 8006c76:	21de      	movs	r1, #222	; 0xde
 8006c78:	4b5b      	ldr	r3, [pc, #364]	; (8006de8 <__gethex+0x2d8>)
 8006c7a:	485c      	ldr	r0, [pc, #368]	; (8006dec <__gethex+0x2dc>)
 8006c7c:	f7ff f834 	bl	8005ce8 <__assert_func>
 8006c80:	3101      	adds	r1, #1
 8006c82:	105b      	asrs	r3, r3, #1
 8006c84:	e7ef      	b.n	8006c66 <__gethex+0x156>
 8006c86:	f04f 0b00 	mov.w	fp, #0
 8006c8a:	f100 0914 	add.w	r9, r0, #20
 8006c8e:	f1ca 0301 	rsb	r3, sl, #1
 8006c92:	f8cd 9010 	str.w	r9, [sp, #16]
 8006c96:	f8cd b004 	str.w	fp, [sp, #4]
 8006c9a:	9308      	str	r3, [sp, #32]
 8006c9c:	42b7      	cmp	r7, r6
 8006c9e:	d33f      	bcc.n	8006d20 <__gethex+0x210>
 8006ca0:	9f04      	ldr	r7, [sp, #16]
 8006ca2:	9b01      	ldr	r3, [sp, #4]
 8006ca4:	f847 3b04 	str.w	r3, [r7], #4
 8006ca8:	eba7 0709 	sub.w	r7, r7, r9
 8006cac:	10bf      	asrs	r7, r7, #2
 8006cae:	6127      	str	r7, [r4, #16]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fb5b 	bl	800736c <__hi0bits>
 8006cb6:	017f      	lsls	r7, r7, #5
 8006cb8:	f8d8 6000 	ldr.w	r6, [r8]
 8006cbc:	1a3f      	subs	r7, r7, r0
 8006cbe:	42b7      	cmp	r7, r6
 8006cc0:	dd62      	ble.n	8006d88 <__gethex+0x278>
 8006cc2:	1bbf      	subs	r7, r7, r6
 8006cc4:	4639      	mov	r1, r7
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f000 fef5 	bl	8007ab6 <__any_on>
 8006ccc:	4682      	mov	sl, r0
 8006cce:	b1a8      	cbz	r0, 8006cfc <__gethex+0x1ec>
 8006cd0:	f04f 0a01 	mov.w	sl, #1
 8006cd4:	1e7b      	subs	r3, r7, #1
 8006cd6:	1159      	asrs	r1, r3, #5
 8006cd8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006cdc:	f003 021f 	and.w	r2, r3, #31
 8006ce0:	fa0a f202 	lsl.w	r2, sl, r2
 8006ce4:	420a      	tst	r2, r1
 8006ce6:	d009      	beq.n	8006cfc <__gethex+0x1ec>
 8006ce8:	4553      	cmp	r3, sl
 8006cea:	dd05      	ble.n	8006cf8 <__gethex+0x1e8>
 8006cec:	4620      	mov	r0, r4
 8006cee:	1eb9      	subs	r1, r7, #2
 8006cf0:	f000 fee1 	bl	8007ab6 <__any_on>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d144      	bne.n	8006d82 <__gethex+0x272>
 8006cf8:	f04f 0a02 	mov.w	sl, #2
 8006cfc:	4639      	mov	r1, r7
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f7ff fe9e 	bl	8006a40 <rshift>
 8006d04:	443d      	add	r5, r7
 8006d06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d0a:	42ab      	cmp	r3, r5
 8006d0c:	da4a      	bge.n	8006da4 <__gethex+0x294>
 8006d0e:	4621      	mov	r1, r4
 8006d10:	9802      	ldr	r0, [sp, #8]
 8006d12:	f000 fa79 	bl	8007208 <_Bfree>
 8006d16:	2300      	movs	r3, #0
 8006d18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d1a:	27a3      	movs	r7, #163	; 0xa3
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	e789      	b.n	8006c34 <__gethex+0x124>
 8006d20:	1e73      	subs	r3, r6, #1
 8006d22:	9a06      	ldr	r2, [sp, #24]
 8006d24:	9307      	str	r3, [sp, #28]
 8006d26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d019      	beq.n	8006d62 <__gethex+0x252>
 8006d2e:	f1bb 0f20 	cmp.w	fp, #32
 8006d32:	d107      	bne.n	8006d44 <__gethex+0x234>
 8006d34:	9b04      	ldr	r3, [sp, #16]
 8006d36:	9a01      	ldr	r2, [sp, #4]
 8006d38:	f843 2b04 	str.w	r2, [r3], #4
 8006d3c:	9304      	str	r3, [sp, #16]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	469b      	mov	fp, r3
 8006d42:	9301      	str	r3, [sp, #4]
 8006d44:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006d48:	f7ff fecd 	bl	8006ae6 <__hexdig_fun>
 8006d4c:	9b01      	ldr	r3, [sp, #4]
 8006d4e:	f000 000f 	and.w	r0, r0, #15
 8006d52:	fa00 f00b 	lsl.w	r0, r0, fp
 8006d56:	4303      	orrs	r3, r0
 8006d58:	9301      	str	r3, [sp, #4]
 8006d5a:	f10b 0b04 	add.w	fp, fp, #4
 8006d5e:	9b07      	ldr	r3, [sp, #28]
 8006d60:	e00d      	b.n	8006d7e <__gethex+0x26e>
 8006d62:	9a08      	ldr	r2, [sp, #32]
 8006d64:	1e73      	subs	r3, r6, #1
 8006d66:	4413      	add	r3, r2
 8006d68:	42bb      	cmp	r3, r7
 8006d6a:	d3e0      	bcc.n	8006d2e <__gethex+0x21e>
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	4652      	mov	r2, sl
 8006d70:	9903      	ldr	r1, [sp, #12]
 8006d72:	9309      	str	r3, [sp, #36]	; 0x24
 8006d74:	f001 f98e 	bl	8008094 <strncmp>
 8006d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d1d7      	bne.n	8006d2e <__gethex+0x21e>
 8006d7e:	461e      	mov	r6, r3
 8006d80:	e78c      	b.n	8006c9c <__gethex+0x18c>
 8006d82:	f04f 0a03 	mov.w	sl, #3
 8006d86:	e7b9      	b.n	8006cfc <__gethex+0x1ec>
 8006d88:	da09      	bge.n	8006d9e <__gethex+0x28e>
 8006d8a:	1bf7      	subs	r7, r6, r7
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	463a      	mov	r2, r7
 8006d90:	9802      	ldr	r0, [sp, #8]
 8006d92:	f000 fc51 	bl	8007638 <__lshift>
 8006d96:	4604      	mov	r4, r0
 8006d98:	1bed      	subs	r5, r5, r7
 8006d9a:	f100 0914 	add.w	r9, r0, #20
 8006d9e:	f04f 0a00 	mov.w	sl, #0
 8006da2:	e7b0      	b.n	8006d06 <__gethex+0x1f6>
 8006da4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006da8:	42a8      	cmp	r0, r5
 8006daa:	dd72      	ble.n	8006e92 <__gethex+0x382>
 8006dac:	1b45      	subs	r5, r0, r5
 8006dae:	42ae      	cmp	r6, r5
 8006db0:	dc35      	bgt.n	8006e1e <__gethex+0x30e>
 8006db2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d029      	beq.n	8006e0e <__gethex+0x2fe>
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d02b      	beq.n	8006e16 <__gethex+0x306>
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d11c      	bne.n	8006dfc <__gethex+0x2ec>
 8006dc2:	42ae      	cmp	r6, r5
 8006dc4:	d11a      	bne.n	8006dfc <__gethex+0x2ec>
 8006dc6:	2e01      	cmp	r6, #1
 8006dc8:	d112      	bne.n	8006df0 <__gethex+0x2e0>
 8006dca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006dce:	9a05      	ldr	r2, [sp, #20]
 8006dd0:	2762      	movs	r7, #98	; 0x62
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	6123      	str	r3, [r4, #16]
 8006dd8:	f8c9 3000 	str.w	r3, [r9]
 8006ddc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006dde:	601c      	str	r4, [r3, #0]
 8006de0:	e728      	b.n	8006c34 <__gethex+0x124>
 8006de2:	bf00      	nop
 8006de4:	0800acb8 	.word	0x0800acb8
 8006de8:	0800ac40 	.word	0x0800ac40
 8006dec:	0800ac51 	.word	0x0800ac51
 8006df0:	4620      	mov	r0, r4
 8006df2:	1e71      	subs	r1, r6, #1
 8006df4:	f000 fe5f 	bl	8007ab6 <__any_on>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d1e6      	bne.n	8006dca <__gethex+0x2ba>
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	9802      	ldr	r0, [sp, #8]
 8006e00:	f000 fa02 	bl	8007208 <_Bfree>
 8006e04:	2300      	movs	r3, #0
 8006e06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e08:	2750      	movs	r7, #80	; 0x50
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	e712      	b.n	8006c34 <__gethex+0x124>
 8006e0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1f3      	bne.n	8006dfc <__gethex+0x2ec>
 8006e14:	e7d9      	b.n	8006dca <__gethex+0x2ba>
 8006e16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1d6      	bne.n	8006dca <__gethex+0x2ba>
 8006e1c:	e7ee      	b.n	8006dfc <__gethex+0x2ec>
 8006e1e:	1e6f      	subs	r7, r5, #1
 8006e20:	f1ba 0f00 	cmp.w	sl, #0
 8006e24:	d132      	bne.n	8006e8c <__gethex+0x37c>
 8006e26:	b127      	cbz	r7, 8006e32 <__gethex+0x322>
 8006e28:	4639      	mov	r1, r7
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f000 fe43 	bl	8007ab6 <__any_on>
 8006e30:	4682      	mov	sl, r0
 8006e32:	2101      	movs	r1, #1
 8006e34:	117b      	asrs	r3, r7, #5
 8006e36:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006e3a:	f007 071f 	and.w	r7, r7, #31
 8006e3e:	fa01 f707 	lsl.w	r7, r1, r7
 8006e42:	421f      	tst	r7, r3
 8006e44:	f04f 0702 	mov.w	r7, #2
 8006e48:	4629      	mov	r1, r5
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	bf18      	it	ne
 8006e4e:	f04a 0a02 	orrne.w	sl, sl, #2
 8006e52:	1b76      	subs	r6, r6, r5
 8006e54:	f7ff fdf4 	bl	8006a40 <rshift>
 8006e58:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006e5c:	f1ba 0f00 	cmp.w	sl, #0
 8006e60:	d048      	beq.n	8006ef4 <__gethex+0x3e4>
 8006e62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d015      	beq.n	8006e96 <__gethex+0x386>
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d017      	beq.n	8006e9e <__gethex+0x38e>
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d109      	bne.n	8006e86 <__gethex+0x376>
 8006e72:	f01a 0f02 	tst.w	sl, #2
 8006e76:	d006      	beq.n	8006e86 <__gethex+0x376>
 8006e78:	f8d9 0000 	ldr.w	r0, [r9]
 8006e7c:	ea4a 0a00 	orr.w	sl, sl, r0
 8006e80:	f01a 0f01 	tst.w	sl, #1
 8006e84:	d10e      	bne.n	8006ea4 <__gethex+0x394>
 8006e86:	f047 0710 	orr.w	r7, r7, #16
 8006e8a:	e033      	b.n	8006ef4 <__gethex+0x3e4>
 8006e8c:	f04f 0a01 	mov.w	sl, #1
 8006e90:	e7cf      	b.n	8006e32 <__gethex+0x322>
 8006e92:	2701      	movs	r7, #1
 8006e94:	e7e2      	b.n	8006e5c <__gethex+0x34c>
 8006e96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e98:	f1c3 0301 	rsb	r3, r3, #1
 8006e9c:	9315      	str	r3, [sp, #84]	; 0x54
 8006e9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0f0      	beq.n	8006e86 <__gethex+0x376>
 8006ea4:	f04f 0c00 	mov.w	ip, #0
 8006ea8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006eac:	f104 0314 	add.w	r3, r4, #20
 8006eb0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006eb4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ebe:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006ec2:	d01c      	beq.n	8006efe <__gethex+0x3ee>
 8006ec4:	3201      	adds	r2, #1
 8006ec6:	6002      	str	r2, [r0, #0]
 8006ec8:	2f02      	cmp	r7, #2
 8006eca:	f104 0314 	add.w	r3, r4, #20
 8006ece:	d13d      	bne.n	8006f4c <__gethex+0x43c>
 8006ed0:	f8d8 2000 	ldr.w	r2, [r8]
 8006ed4:	3a01      	subs	r2, #1
 8006ed6:	42b2      	cmp	r2, r6
 8006ed8:	d10a      	bne.n	8006ef0 <__gethex+0x3e0>
 8006eda:	2201      	movs	r2, #1
 8006edc:	1171      	asrs	r1, r6, #5
 8006ede:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ee2:	f006 061f 	and.w	r6, r6, #31
 8006ee6:	fa02 f606 	lsl.w	r6, r2, r6
 8006eea:	421e      	tst	r6, r3
 8006eec:	bf18      	it	ne
 8006eee:	4617      	movne	r7, r2
 8006ef0:	f047 0720 	orr.w	r7, r7, #32
 8006ef4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ef6:	601c      	str	r4, [r3, #0]
 8006ef8:	9b05      	ldr	r3, [sp, #20]
 8006efa:	601d      	str	r5, [r3, #0]
 8006efc:	e69a      	b.n	8006c34 <__gethex+0x124>
 8006efe:	4299      	cmp	r1, r3
 8006f00:	f843 cc04 	str.w	ip, [r3, #-4]
 8006f04:	d8d8      	bhi.n	8006eb8 <__gethex+0x3a8>
 8006f06:	68a3      	ldr	r3, [r4, #8]
 8006f08:	459b      	cmp	fp, r3
 8006f0a:	db17      	blt.n	8006f3c <__gethex+0x42c>
 8006f0c:	6861      	ldr	r1, [r4, #4]
 8006f0e:	9802      	ldr	r0, [sp, #8]
 8006f10:	3101      	adds	r1, #1
 8006f12:	f000 f939 	bl	8007188 <_Balloc>
 8006f16:	4681      	mov	r9, r0
 8006f18:	b918      	cbnz	r0, 8006f22 <__gethex+0x412>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	2184      	movs	r1, #132	; 0x84
 8006f1e:	4b19      	ldr	r3, [pc, #100]	; (8006f84 <__gethex+0x474>)
 8006f20:	e6ab      	b.n	8006c7a <__gethex+0x16a>
 8006f22:	6922      	ldr	r2, [r4, #16]
 8006f24:	f104 010c 	add.w	r1, r4, #12
 8006f28:	3202      	adds	r2, #2
 8006f2a:	0092      	lsls	r2, r2, #2
 8006f2c:	300c      	adds	r0, #12
 8006f2e:	f000 f911 	bl	8007154 <memcpy>
 8006f32:	4621      	mov	r1, r4
 8006f34:	9802      	ldr	r0, [sp, #8]
 8006f36:	f000 f967 	bl	8007208 <_Bfree>
 8006f3a:	464c      	mov	r4, r9
 8006f3c:	6923      	ldr	r3, [r4, #16]
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	6122      	str	r2, [r4, #16]
 8006f42:	2201      	movs	r2, #1
 8006f44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f48:	615a      	str	r2, [r3, #20]
 8006f4a:	e7bd      	b.n	8006ec8 <__gethex+0x3b8>
 8006f4c:	6922      	ldr	r2, [r4, #16]
 8006f4e:	455a      	cmp	r2, fp
 8006f50:	dd0b      	ble.n	8006f6a <__gethex+0x45a>
 8006f52:	2101      	movs	r1, #1
 8006f54:	4620      	mov	r0, r4
 8006f56:	f7ff fd73 	bl	8006a40 <rshift>
 8006f5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f5e:	3501      	adds	r5, #1
 8006f60:	42ab      	cmp	r3, r5
 8006f62:	f6ff aed4 	blt.w	8006d0e <__gethex+0x1fe>
 8006f66:	2701      	movs	r7, #1
 8006f68:	e7c2      	b.n	8006ef0 <__gethex+0x3e0>
 8006f6a:	f016 061f 	ands.w	r6, r6, #31
 8006f6e:	d0fa      	beq.n	8006f66 <__gethex+0x456>
 8006f70:	4453      	add	r3, sl
 8006f72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006f76:	f000 f9f9 	bl	800736c <__hi0bits>
 8006f7a:	f1c6 0620 	rsb	r6, r6, #32
 8006f7e:	42b0      	cmp	r0, r6
 8006f80:	dbe7      	blt.n	8006f52 <__gethex+0x442>
 8006f82:	e7f0      	b.n	8006f66 <__gethex+0x456>
 8006f84:	0800ac40 	.word	0x0800ac40

08006f88 <L_shift>:
 8006f88:	f1c2 0208 	rsb	r2, r2, #8
 8006f8c:	0092      	lsls	r2, r2, #2
 8006f8e:	b570      	push	{r4, r5, r6, lr}
 8006f90:	f1c2 0620 	rsb	r6, r2, #32
 8006f94:	6843      	ldr	r3, [r0, #4]
 8006f96:	6804      	ldr	r4, [r0, #0]
 8006f98:	fa03 f506 	lsl.w	r5, r3, r6
 8006f9c:	432c      	orrs	r4, r5
 8006f9e:	40d3      	lsrs	r3, r2
 8006fa0:	6004      	str	r4, [r0, #0]
 8006fa2:	f840 3f04 	str.w	r3, [r0, #4]!
 8006fa6:	4288      	cmp	r0, r1
 8006fa8:	d3f4      	bcc.n	8006f94 <L_shift+0xc>
 8006faa:	bd70      	pop	{r4, r5, r6, pc}

08006fac <__match>:
 8006fac:	b530      	push	{r4, r5, lr}
 8006fae:	6803      	ldr	r3, [r0, #0]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fb6:	b914      	cbnz	r4, 8006fbe <__match+0x12>
 8006fb8:	6003      	str	r3, [r0, #0]
 8006fba:	2001      	movs	r0, #1
 8006fbc:	bd30      	pop	{r4, r5, pc}
 8006fbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fc2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006fc6:	2d19      	cmp	r5, #25
 8006fc8:	bf98      	it	ls
 8006fca:	3220      	addls	r2, #32
 8006fcc:	42a2      	cmp	r2, r4
 8006fce:	d0f0      	beq.n	8006fb2 <__match+0x6>
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	e7f3      	b.n	8006fbc <__match+0x10>

08006fd4 <__hexnan>:
 8006fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd8:	2500      	movs	r5, #0
 8006fda:	680b      	ldr	r3, [r1, #0]
 8006fdc:	4682      	mov	sl, r0
 8006fde:	115e      	asrs	r6, r3, #5
 8006fe0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006fe4:	f013 031f 	ands.w	r3, r3, #31
 8006fe8:	bf18      	it	ne
 8006fea:	3604      	addne	r6, #4
 8006fec:	1f37      	subs	r7, r6, #4
 8006fee:	46b9      	mov	r9, r7
 8006ff0:	463c      	mov	r4, r7
 8006ff2:	46ab      	mov	fp, r5
 8006ff4:	b087      	sub	sp, #28
 8006ff6:	4690      	mov	r8, r2
 8006ff8:	6802      	ldr	r2, [r0, #0]
 8006ffa:	9301      	str	r3, [sp, #4]
 8006ffc:	f846 5c04 	str.w	r5, [r6, #-4]
 8007000:	9502      	str	r5, [sp, #8]
 8007002:	7851      	ldrb	r1, [r2, #1]
 8007004:	1c53      	adds	r3, r2, #1
 8007006:	9303      	str	r3, [sp, #12]
 8007008:	b341      	cbz	r1, 800705c <__hexnan+0x88>
 800700a:	4608      	mov	r0, r1
 800700c:	9205      	str	r2, [sp, #20]
 800700e:	9104      	str	r1, [sp, #16]
 8007010:	f7ff fd69 	bl	8006ae6 <__hexdig_fun>
 8007014:	2800      	cmp	r0, #0
 8007016:	d14f      	bne.n	80070b8 <__hexnan+0xe4>
 8007018:	9904      	ldr	r1, [sp, #16]
 800701a:	9a05      	ldr	r2, [sp, #20]
 800701c:	2920      	cmp	r1, #32
 800701e:	d818      	bhi.n	8007052 <__hexnan+0x7e>
 8007020:	9b02      	ldr	r3, [sp, #8]
 8007022:	459b      	cmp	fp, r3
 8007024:	dd13      	ble.n	800704e <__hexnan+0x7a>
 8007026:	454c      	cmp	r4, r9
 8007028:	d206      	bcs.n	8007038 <__hexnan+0x64>
 800702a:	2d07      	cmp	r5, #7
 800702c:	dc04      	bgt.n	8007038 <__hexnan+0x64>
 800702e:	462a      	mov	r2, r5
 8007030:	4649      	mov	r1, r9
 8007032:	4620      	mov	r0, r4
 8007034:	f7ff ffa8 	bl	8006f88 <L_shift>
 8007038:	4544      	cmp	r4, r8
 800703a:	d950      	bls.n	80070de <__hexnan+0x10a>
 800703c:	2300      	movs	r3, #0
 800703e:	f1a4 0904 	sub.w	r9, r4, #4
 8007042:	f844 3c04 	str.w	r3, [r4, #-4]
 8007046:	461d      	mov	r5, r3
 8007048:	464c      	mov	r4, r9
 800704a:	f8cd b008 	str.w	fp, [sp, #8]
 800704e:	9a03      	ldr	r2, [sp, #12]
 8007050:	e7d7      	b.n	8007002 <__hexnan+0x2e>
 8007052:	2929      	cmp	r1, #41	; 0x29
 8007054:	d156      	bne.n	8007104 <__hexnan+0x130>
 8007056:	3202      	adds	r2, #2
 8007058:	f8ca 2000 	str.w	r2, [sl]
 800705c:	f1bb 0f00 	cmp.w	fp, #0
 8007060:	d050      	beq.n	8007104 <__hexnan+0x130>
 8007062:	454c      	cmp	r4, r9
 8007064:	d206      	bcs.n	8007074 <__hexnan+0xa0>
 8007066:	2d07      	cmp	r5, #7
 8007068:	dc04      	bgt.n	8007074 <__hexnan+0xa0>
 800706a:	462a      	mov	r2, r5
 800706c:	4649      	mov	r1, r9
 800706e:	4620      	mov	r0, r4
 8007070:	f7ff ff8a 	bl	8006f88 <L_shift>
 8007074:	4544      	cmp	r4, r8
 8007076:	d934      	bls.n	80070e2 <__hexnan+0x10e>
 8007078:	4623      	mov	r3, r4
 800707a:	f1a8 0204 	sub.w	r2, r8, #4
 800707e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007082:	429f      	cmp	r7, r3
 8007084:	f842 1f04 	str.w	r1, [r2, #4]!
 8007088:	d2f9      	bcs.n	800707e <__hexnan+0xaa>
 800708a:	1b3b      	subs	r3, r7, r4
 800708c:	f023 0303 	bic.w	r3, r3, #3
 8007090:	3304      	adds	r3, #4
 8007092:	3401      	adds	r4, #1
 8007094:	3e03      	subs	r6, #3
 8007096:	42b4      	cmp	r4, r6
 8007098:	bf88      	it	hi
 800709a:	2304      	movhi	r3, #4
 800709c:	2200      	movs	r2, #0
 800709e:	4443      	add	r3, r8
 80070a0:	f843 2b04 	str.w	r2, [r3], #4
 80070a4:	429f      	cmp	r7, r3
 80070a6:	d2fb      	bcs.n	80070a0 <__hexnan+0xcc>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	b91b      	cbnz	r3, 80070b4 <__hexnan+0xe0>
 80070ac:	4547      	cmp	r7, r8
 80070ae:	d127      	bne.n	8007100 <__hexnan+0x12c>
 80070b0:	2301      	movs	r3, #1
 80070b2:	603b      	str	r3, [r7, #0]
 80070b4:	2005      	movs	r0, #5
 80070b6:	e026      	b.n	8007106 <__hexnan+0x132>
 80070b8:	3501      	adds	r5, #1
 80070ba:	2d08      	cmp	r5, #8
 80070bc:	f10b 0b01 	add.w	fp, fp, #1
 80070c0:	dd06      	ble.n	80070d0 <__hexnan+0xfc>
 80070c2:	4544      	cmp	r4, r8
 80070c4:	d9c3      	bls.n	800704e <__hexnan+0x7a>
 80070c6:	2300      	movs	r3, #0
 80070c8:	2501      	movs	r5, #1
 80070ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80070ce:	3c04      	subs	r4, #4
 80070d0:	6822      	ldr	r2, [r4, #0]
 80070d2:	f000 000f 	and.w	r0, r0, #15
 80070d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80070da:	6022      	str	r2, [r4, #0]
 80070dc:	e7b7      	b.n	800704e <__hexnan+0x7a>
 80070de:	2508      	movs	r5, #8
 80070e0:	e7b5      	b.n	800704e <__hexnan+0x7a>
 80070e2:	9b01      	ldr	r3, [sp, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0df      	beq.n	80070a8 <__hexnan+0xd4>
 80070e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070ec:	f1c3 0320 	rsb	r3, r3, #32
 80070f0:	fa22 f303 	lsr.w	r3, r2, r3
 80070f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80070f8:	401a      	ands	r2, r3
 80070fa:	f846 2c04 	str.w	r2, [r6, #-4]
 80070fe:	e7d3      	b.n	80070a8 <__hexnan+0xd4>
 8007100:	3f04      	subs	r7, #4
 8007102:	e7d1      	b.n	80070a8 <__hexnan+0xd4>
 8007104:	2004      	movs	r0, #4
 8007106:	b007      	add	sp, #28
 8007108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800710c <_localeconv_r>:
 800710c:	4800      	ldr	r0, [pc, #0]	; (8007110 <_localeconv_r+0x4>)
 800710e:	4770      	bx	lr
 8007110:	20000178 	.word	0x20000178

08007114 <__ascii_mbtowc>:
 8007114:	b082      	sub	sp, #8
 8007116:	b901      	cbnz	r1, 800711a <__ascii_mbtowc+0x6>
 8007118:	a901      	add	r1, sp, #4
 800711a:	b142      	cbz	r2, 800712e <__ascii_mbtowc+0x1a>
 800711c:	b14b      	cbz	r3, 8007132 <__ascii_mbtowc+0x1e>
 800711e:	7813      	ldrb	r3, [r2, #0]
 8007120:	600b      	str	r3, [r1, #0]
 8007122:	7812      	ldrb	r2, [r2, #0]
 8007124:	1e10      	subs	r0, r2, #0
 8007126:	bf18      	it	ne
 8007128:	2001      	movne	r0, #1
 800712a:	b002      	add	sp, #8
 800712c:	4770      	bx	lr
 800712e:	4610      	mov	r0, r2
 8007130:	e7fb      	b.n	800712a <__ascii_mbtowc+0x16>
 8007132:	f06f 0001 	mvn.w	r0, #1
 8007136:	e7f8      	b.n	800712a <__ascii_mbtowc+0x16>

08007138 <memchr>:
 8007138:	4603      	mov	r3, r0
 800713a:	b510      	push	{r4, lr}
 800713c:	b2c9      	uxtb	r1, r1
 800713e:	4402      	add	r2, r0
 8007140:	4293      	cmp	r3, r2
 8007142:	4618      	mov	r0, r3
 8007144:	d101      	bne.n	800714a <memchr+0x12>
 8007146:	2000      	movs	r0, #0
 8007148:	e003      	b.n	8007152 <memchr+0x1a>
 800714a:	7804      	ldrb	r4, [r0, #0]
 800714c:	3301      	adds	r3, #1
 800714e:	428c      	cmp	r4, r1
 8007150:	d1f6      	bne.n	8007140 <memchr+0x8>
 8007152:	bd10      	pop	{r4, pc}

08007154 <memcpy>:
 8007154:	440a      	add	r2, r1
 8007156:	4291      	cmp	r1, r2
 8007158:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800715c:	d100      	bne.n	8007160 <memcpy+0xc>
 800715e:	4770      	bx	lr
 8007160:	b510      	push	{r4, lr}
 8007162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007166:	4291      	cmp	r1, r2
 8007168:	f803 4f01 	strb.w	r4, [r3, #1]!
 800716c:	d1f9      	bne.n	8007162 <memcpy+0xe>
 800716e:	bd10      	pop	{r4, pc}

08007170 <__malloc_lock>:
 8007170:	4801      	ldr	r0, [pc, #4]	; (8007178 <__malloc_lock+0x8>)
 8007172:	f001 ba2d 	b.w	80085d0 <__retarget_lock_acquire_recursive>
 8007176:	bf00      	nop
 8007178:	20000854 	.word	0x20000854

0800717c <__malloc_unlock>:
 800717c:	4801      	ldr	r0, [pc, #4]	; (8007184 <__malloc_unlock+0x8>)
 800717e:	f001 ba28 	b.w	80085d2 <__retarget_lock_release_recursive>
 8007182:	bf00      	nop
 8007184:	20000854 	.word	0x20000854

08007188 <_Balloc>:
 8007188:	b570      	push	{r4, r5, r6, lr}
 800718a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800718c:	4604      	mov	r4, r0
 800718e:	460d      	mov	r5, r1
 8007190:	b976      	cbnz	r6, 80071b0 <_Balloc+0x28>
 8007192:	2010      	movs	r0, #16
 8007194:	f7fd f9b0 	bl	80044f8 <malloc>
 8007198:	4602      	mov	r2, r0
 800719a:	6260      	str	r0, [r4, #36]	; 0x24
 800719c:	b920      	cbnz	r0, 80071a8 <_Balloc+0x20>
 800719e:	2166      	movs	r1, #102	; 0x66
 80071a0:	4b17      	ldr	r3, [pc, #92]	; (8007200 <_Balloc+0x78>)
 80071a2:	4818      	ldr	r0, [pc, #96]	; (8007204 <_Balloc+0x7c>)
 80071a4:	f7fe fda0 	bl	8005ce8 <__assert_func>
 80071a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071ac:	6006      	str	r6, [r0, #0]
 80071ae:	60c6      	str	r6, [r0, #12]
 80071b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071b2:	68f3      	ldr	r3, [r6, #12]
 80071b4:	b183      	cbz	r3, 80071d8 <_Balloc+0x50>
 80071b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071be:	b9b8      	cbnz	r0, 80071f0 <_Balloc+0x68>
 80071c0:	2101      	movs	r1, #1
 80071c2:	fa01 f605 	lsl.w	r6, r1, r5
 80071c6:	1d72      	adds	r2, r6, #5
 80071c8:	4620      	mov	r0, r4
 80071ca:	0092      	lsls	r2, r2, #2
 80071cc:	f000 fc94 	bl	8007af8 <_calloc_r>
 80071d0:	b160      	cbz	r0, 80071ec <_Balloc+0x64>
 80071d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071d6:	e00e      	b.n	80071f6 <_Balloc+0x6e>
 80071d8:	2221      	movs	r2, #33	; 0x21
 80071da:	2104      	movs	r1, #4
 80071dc:	4620      	mov	r0, r4
 80071de:	f000 fc8b 	bl	8007af8 <_calloc_r>
 80071e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071e4:	60f0      	str	r0, [r6, #12]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e4      	bne.n	80071b6 <_Balloc+0x2e>
 80071ec:	2000      	movs	r0, #0
 80071ee:	bd70      	pop	{r4, r5, r6, pc}
 80071f0:	6802      	ldr	r2, [r0, #0]
 80071f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071f6:	2300      	movs	r3, #0
 80071f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071fc:	e7f7      	b.n	80071ee <_Balloc+0x66>
 80071fe:	bf00      	nop
 8007200:	0800ab28 	.word	0x0800ab28
 8007204:	0800accc 	.word	0x0800accc

08007208 <_Bfree>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800720c:	4605      	mov	r5, r0
 800720e:	460c      	mov	r4, r1
 8007210:	b976      	cbnz	r6, 8007230 <_Bfree+0x28>
 8007212:	2010      	movs	r0, #16
 8007214:	f7fd f970 	bl	80044f8 <malloc>
 8007218:	4602      	mov	r2, r0
 800721a:	6268      	str	r0, [r5, #36]	; 0x24
 800721c:	b920      	cbnz	r0, 8007228 <_Bfree+0x20>
 800721e:	218a      	movs	r1, #138	; 0x8a
 8007220:	4b08      	ldr	r3, [pc, #32]	; (8007244 <_Bfree+0x3c>)
 8007222:	4809      	ldr	r0, [pc, #36]	; (8007248 <_Bfree+0x40>)
 8007224:	f7fe fd60 	bl	8005ce8 <__assert_func>
 8007228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800722c:	6006      	str	r6, [r0, #0]
 800722e:	60c6      	str	r6, [r0, #12]
 8007230:	b13c      	cbz	r4, 8007242 <_Bfree+0x3a>
 8007232:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007234:	6862      	ldr	r2, [r4, #4]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800723c:	6021      	str	r1, [r4, #0]
 800723e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007242:	bd70      	pop	{r4, r5, r6, pc}
 8007244:	0800ab28 	.word	0x0800ab28
 8007248:	0800accc 	.word	0x0800accc

0800724c <__multadd>:
 800724c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007250:	4607      	mov	r7, r0
 8007252:	460c      	mov	r4, r1
 8007254:	461e      	mov	r6, r3
 8007256:	2000      	movs	r0, #0
 8007258:	690d      	ldr	r5, [r1, #16]
 800725a:	f101 0c14 	add.w	ip, r1, #20
 800725e:	f8dc 3000 	ldr.w	r3, [ip]
 8007262:	3001      	adds	r0, #1
 8007264:	b299      	uxth	r1, r3
 8007266:	fb02 6101 	mla	r1, r2, r1, r6
 800726a:	0c1e      	lsrs	r6, r3, #16
 800726c:	0c0b      	lsrs	r3, r1, #16
 800726e:	fb02 3306 	mla	r3, r2, r6, r3
 8007272:	b289      	uxth	r1, r1
 8007274:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007278:	4285      	cmp	r5, r0
 800727a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800727e:	f84c 1b04 	str.w	r1, [ip], #4
 8007282:	dcec      	bgt.n	800725e <__multadd+0x12>
 8007284:	b30e      	cbz	r6, 80072ca <__multadd+0x7e>
 8007286:	68a3      	ldr	r3, [r4, #8]
 8007288:	42ab      	cmp	r3, r5
 800728a:	dc19      	bgt.n	80072c0 <__multadd+0x74>
 800728c:	6861      	ldr	r1, [r4, #4]
 800728e:	4638      	mov	r0, r7
 8007290:	3101      	adds	r1, #1
 8007292:	f7ff ff79 	bl	8007188 <_Balloc>
 8007296:	4680      	mov	r8, r0
 8007298:	b928      	cbnz	r0, 80072a6 <__multadd+0x5a>
 800729a:	4602      	mov	r2, r0
 800729c:	21b5      	movs	r1, #181	; 0xb5
 800729e:	4b0c      	ldr	r3, [pc, #48]	; (80072d0 <__multadd+0x84>)
 80072a0:	480c      	ldr	r0, [pc, #48]	; (80072d4 <__multadd+0x88>)
 80072a2:	f7fe fd21 	bl	8005ce8 <__assert_func>
 80072a6:	6922      	ldr	r2, [r4, #16]
 80072a8:	f104 010c 	add.w	r1, r4, #12
 80072ac:	3202      	adds	r2, #2
 80072ae:	0092      	lsls	r2, r2, #2
 80072b0:	300c      	adds	r0, #12
 80072b2:	f7ff ff4f 	bl	8007154 <memcpy>
 80072b6:	4621      	mov	r1, r4
 80072b8:	4638      	mov	r0, r7
 80072ba:	f7ff ffa5 	bl	8007208 <_Bfree>
 80072be:	4644      	mov	r4, r8
 80072c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072c4:	3501      	adds	r5, #1
 80072c6:	615e      	str	r6, [r3, #20]
 80072c8:	6125      	str	r5, [r4, #16]
 80072ca:	4620      	mov	r0, r4
 80072cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072d0:	0800ac40 	.word	0x0800ac40
 80072d4:	0800accc 	.word	0x0800accc

080072d8 <__s2b>:
 80072d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072dc:	4615      	mov	r5, r2
 80072de:	2209      	movs	r2, #9
 80072e0:	461f      	mov	r7, r3
 80072e2:	3308      	adds	r3, #8
 80072e4:	460c      	mov	r4, r1
 80072e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80072ea:	4606      	mov	r6, r0
 80072ec:	2201      	movs	r2, #1
 80072ee:	2100      	movs	r1, #0
 80072f0:	429a      	cmp	r2, r3
 80072f2:	db09      	blt.n	8007308 <__s2b+0x30>
 80072f4:	4630      	mov	r0, r6
 80072f6:	f7ff ff47 	bl	8007188 <_Balloc>
 80072fa:	b940      	cbnz	r0, 800730e <__s2b+0x36>
 80072fc:	4602      	mov	r2, r0
 80072fe:	21ce      	movs	r1, #206	; 0xce
 8007300:	4b18      	ldr	r3, [pc, #96]	; (8007364 <__s2b+0x8c>)
 8007302:	4819      	ldr	r0, [pc, #100]	; (8007368 <__s2b+0x90>)
 8007304:	f7fe fcf0 	bl	8005ce8 <__assert_func>
 8007308:	0052      	lsls	r2, r2, #1
 800730a:	3101      	adds	r1, #1
 800730c:	e7f0      	b.n	80072f0 <__s2b+0x18>
 800730e:	9b08      	ldr	r3, [sp, #32]
 8007310:	2d09      	cmp	r5, #9
 8007312:	6143      	str	r3, [r0, #20]
 8007314:	f04f 0301 	mov.w	r3, #1
 8007318:	6103      	str	r3, [r0, #16]
 800731a:	dd16      	ble.n	800734a <__s2b+0x72>
 800731c:	f104 0909 	add.w	r9, r4, #9
 8007320:	46c8      	mov	r8, r9
 8007322:	442c      	add	r4, r5
 8007324:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007328:	4601      	mov	r1, r0
 800732a:	220a      	movs	r2, #10
 800732c:	4630      	mov	r0, r6
 800732e:	3b30      	subs	r3, #48	; 0x30
 8007330:	f7ff ff8c 	bl	800724c <__multadd>
 8007334:	45a0      	cmp	r8, r4
 8007336:	d1f5      	bne.n	8007324 <__s2b+0x4c>
 8007338:	f1a5 0408 	sub.w	r4, r5, #8
 800733c:	444c      	add	r4, r9
 800733e:	1b2d      	subs	r5, r5, r4
 8007340:	1963      	adds	r3, r4, r5
 8007342:	42bb      	cmp	r3, r7
 8007344:	db04      	blt.n	8007350 <__s2b+0x78>
 8007346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800734a:	2509      	movs	r5, #9
 800734c:	340a      	adds	r4, #10
 800734e:	e7f6      	b.n	800733e <__s2b+0x66>
 8007350:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007354:	4601      	mov	r1, r0
 8007356:	220a      	movs	r2, #10
 8007358:	4630      	mov	r0, r6
 800735a:	3b30      	subs	r3, #48	; 0x30
 800735c:	f7ff ff76 	bl	800724c <__multadd>
 8007360:	e7ee      	b.n	8007340 <__s2b+0x68>
 8007362:	bf00      	nop
 8007364:	0800ac40 	.word	0x0800ac40
 8007368:	0800accc 	.word	0x0800accc

0800736c <__hi0bits>:
 800736c:	0c02      	lsrs	r2, r0, #16
 800736e:	0412      	lsls	r2, r2, #16
 8007370:	4603      	mov	r3, r0
 8007372:	b9ca      	cbnz	r2, 80073a8 <__hi0bits+0x3c>
 8007374:	0403      	lsls	r3, r0, #16
 8007376:	2010      	movs	r0, #16
 8007378:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800737c:	bf04      	itt	eq
 800737e:	021b      	lsleq	r3, r3, #8
 8007380:	3008      	addeq	r0, #8
 8007382:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007386:	bf04      	itt	eq
 8007388:	011b      	lsleq	r3, r3, #4
 800738a:	3004      	addeq	r0, #4
 800738c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007390:	bf04      	itt	eq
 8007392:	009b      	lsleq	r3, r3, #2
 8007394:	3002      	addeq	r0, #2
 8007396:	2b00      	cmp	r3, #0
 8007398:	db05      	blt.n	80073a6 <__hi0bits+0x3a>
 800739a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800739e:	f100 0001 	add.w	r0, r0, #1
 80073a2:	bf08      	it	eq
 80073a4:	2020      	moveq	r0, #32
 80073a6:	4770      	bx	lr
 80073a8:	2000      	movs	r0, #0
 80073aa:	e7e5      	b.n	8007378 <__hi0bits+0xc>

080073ac <__lo0bits>:
 80073ac:	6803      	ldr	r3, [r0, #0]
 80073ae:	4602      	mov	r2, r0
 80073b0:	f013 0007 	ands.w	r0, r3, #7
 80073b4:	d00b      	beq.n	80073ce <__lo0bits+0x22>
 80073b6:	07d9      	lsls	r1, r3, #31
 80073b8:	d421      	bmi.n	80073fe <__lo0bits+0x52>
 80073ba:	0798      	lsls	r0, r3, #30
 80073bc:	bf49      	itett	mi
 80073be:	085b      	lsrmi	r3, r3, #1
 80073c0:	089b      	lsrpl	r3, r3, #2
 80073c2:	2001      	movmi	r0, #1
 80073c4:	6013      	strmi	r3, [r2, #0]
 80073c6:	bf5c      	itt	pl
 80073c8:	2002      	movpl	r0, #2
 80073ca:	6013      	strpl	r3, [r2, #0]
 80073cc:	4770      	bx	lr
 80073ce:	b299      	uxth	r1, r3
 80073d0:	b909      	cbnz	r1, 80073d6 <__lo0bits+0x2a>
 80073d2:	2010      	movs	r0, #16
 80073d4:	0c1b      	lsrs	r3, r3, #16
 80073d6:	b2d9      	uxtb	r1, r3
 80073d8:	b909      	cbnz	r1, 80073de <__lo0bits+0x32>
 80073da:	3008      	adds	r0, #8
 80073dc:	0a1b      	lsrs	r3, r3, #8
 80073de:	0719      	lsls	r1, r3, #28
 80073e0:	bf04      	itt	eq
 80073e2:	091b      	lsreq	r3, r3, #4
 80073e4:	3004      	addeq	r0, #4
 80073e6:	0799      	lsls	r1, r3, #30
 80073e8:	bf04      	itt	eq
 80073ea:	089b      	lsreq	r3, r3, #2
 80073ec:	3002      	addeq	r0, #2
 80073ee:	07d9      	lsls	r1, r3, #31
 80073f0:	d403      	bmi.n	80073fa <__lo0bits+0x4e>
 80073f2:	085b      	lsrs	r3, r3, #1
 80073f4:	f100 0001 	add.w	r0, r0, #1
 80073f8:	d003      	beq.n	8007402 <__lo0bits+0x56>
 80073fa:	6013      	str	r3, [r2, #0]
 80073fc:	4770      	bx	lr
 80073fe:	2000      	movs	r0, #0
 8007400:	4770      	bx	lr
 8007402:	2020      	movs	r0, #32
 8007404:	4770      	bx	lr
	...

08007408 <__i2b>:
 8007408:	b510      	push	{r4, lr}
 800740a:	460c      	mov	r4, r1
 800740c:	2101      	movs	r1, #1
 800740e:	f7ff febb 	bl	8007188 <_Balloc>
 8007412:	4602      	mov	r2, r0
 8007414:	b928      	cbnz	r0, 8007422 <__i2b+0x1a>
 8007416:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800741a:	4b04      	ldr	r3, [pc, #16]	; (800742c <__i2b+0x24>)
 800741c:	4804      	ldr	r0, [pc, #16]	; (8007430 <__i2b+0x28>)
 800741e:	f7fe fc63 	bl	8005ce8 <__assert_func>
 8007422:	2301      	movs	r3, #1
 8007424:	6144      	str	r4, [r0, #20]
 8007426:	6103      	str	r3, [r0, #16]
 8007428:	bd10      	pop	{r4, pc}
 800742a:	bf00      	nop
 800742c:	0800ac40 	.word	0x0800ac40
 8007430:	0800accc 	.word	0x0800accc

08007434 <__multiply>:
 8007434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007438:	4691      	mov	r9, r2
 800743a:	690a      	ldr	r2, [r1, #16]
 800743c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007440:	460c      	mov	r4, r1
 8007442:	429a      	cmp	r2, r3
 8007444:	bfbe      	ittt	lt
 8007446:	460b      	movlt	r3, r1
 8007448:	464c      	movlt	r4, r9
 800744a:	4699      	movlt	r9, r3
 800744c:	6927      	ldr	r7, [r4, #16]
 800744e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007452:	68a3      	ldr	r3, [r4, #8]
 8007454:	6861      	ldr	r1, [r4, #4]
 8007456:	eb07 060a 	add.w	r6, r7, sl
 800745a:	42b3      	cmp	r3, r6
 800745c:	b085      	sub	sp, #20
 800745e:	bfb8      	it	lt
 8007460:	3101      	addlt	r1, #1
 8007462:	f7ff fe91 	bl	8007188 <_Balloc>
 8007466:	b930      	cbnz	r0, 8007476 <__multiply+0x42>
 8007468:	4602      	mov	r2, r0
 800746a:	f240 115d 	movw	r1, #349	; 0x15d
 800746e:	4b43      	ldr	r3, [pc, #268]	; (800757c <__multiply+0x148>)
 8007470:	4843      	ldr	r0, [pc, #268]	; (8007580 <__multiply+0x14c>)
 8007472:	f7fe fc39 	bl	8005ce8 <__assert_func>
 8007476:	f100 0514 	add.w	r5, r0, #20
 800747a:	462b      	mov	r3, r5
 800747c:	2200      	movs	r2, #0
 800747e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007482:	4543      	cmp	r3, r8
 8007484:	d321      	bcc.n	80074ca <__multiply+0x96>
 8007486:	f104 0314 	add.w	r3, r4, #20
 800748a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800748e:	f109 0314 	add.w	r3, r9, #20
 8007492:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007496:	9202      	str	r2, [sp, #8]
 8007498:	1b3a      	subs	r2, r7, r4
 800749a:	3a15      	subs	r2, #21
 800749c:	f022 0203 	bic.w	r2, r2, #3
 80074a0:	3204      	adds	r2, #4
 80074a2:	f104 0115 	add.w	r1, r4, #21
 80074a6:	428f      	cmp	r7, r1
 80074a8:	bf38      	it	cc
 80074aa:	2204      	movcc	r2, #4
 80074ac:	9201      	str	r2, [sp, #4]
 80074ae:	9a02      	ldr	r2, [sp, #8]
 80074b0:	9303      	str	r3, [sp, #12]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d80c      	bhi.n	80074d0 <__multiply+0x9c>
 80074b6:	2e00      	cmp	r6, #0
 80074b8:	dd03      	ble.n	80074c2 <__multiply+0x8e>
 80074ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d059      	beq.n	8007576 <__multiply+0x142>
 80074c2:	6106      	str	r6, [r0, #16]
 80074c4:	b005      	add	sp, #20
 80074c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ca:	f843 2b04 	str.w	r2, [r3], #4
 80074ce:	e7d8      	b.n	8007482 <__multiply+0x4e>
 80074d0:	f8b3 a000 	ldrh.w	sl, [r3]
 80074d4:	f1ba 0f00 	cmp.w	sl, #0
 80074d8:	d023      	beq.n	8007522 <__multiply+0xee>
 80074da:	46a9      	mov	r9, r5
 80074dc:	f04f 0c00 	mov.w	ip, #0
 80074e0:	f104 0e14 	add.w	lr, r4, #20
 80074e4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80074e8:	f8d9 1000 	ldr.w	r1, [r9]
 80074ec:	fa1f fb82 	uxth.w	fp, r2
 80074f0:	b289      	uxth	r1, r1
 80074f2:	fb0a 110b 	mla	r1, sl, fp, r1
 80074f6:	4461      	add	r1, ip
 80074f8:	f8d9 c000 	ldr.w	ip, [r9]
 80074fc:	0c12      	lsrs	r2, r2, #16
 80074fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007502:	fb0a c202 	mla	r2, sl, r2, ip
 8007506:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800750a:	b289      	uxth	r1, r1
 800750c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007510:	4577      	cmp	r7, lr
 8007512:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007516:	f849 1b04 	str.w	r1, [r9], #4
 800751a:	d8e3      	bhi.n	80074e4 <__multiply+0xb0>
 800751c:	9a01      	ldr	r2, [sp, #4]
 800751e:	f845 c002 	str.w	ip, [r5, r2]
 8007522:	9a03      	ldr	r2, [sp, #12]
 8007524:	3304      	adds	r3, #4
 8007526:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800752a:	f1b9 0f00 	cmp.w	r9, #0
 800752e:	d020      	beq.n	8007572 <__multiply+0x13e>
 8007530:	46ae      	mov	lr, r5
 8007532:	f04f 0a00 	mov.w	sl, #0
 8007536:	6829      	ldr	r1, [r5, #0]
 8007538:	f104 0c14 	add.w	ip, r4, #20
 800753c:	f8bc b000 	ldrh.w	fp, [ip]
 8007540:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007544:	b289      	uxth	r1, r1
 8007546:	fb09 220b 	mla	r2, r9, fp, r2
 800754a:	4492      	add	sl, r2
 800754c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007550:	f84e 1b04 	str.w	r1, [lr], #4
 8007554:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007558:	f8be 1000 	ldrh.w	r1, [lr]
 800755c:	0c12      	lsrs	r2, r2, #16
 800755e:	fb09 1102 	mla	r1, r9, r2, r1
 8007562:	4567      	cmp	r7, ip
 8007564:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007568:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800756c:	d8e6      	bhi.n	800753c <__multiply+0x108>
 800756e:	9a01      	ldr	r2, [sp, #4]
 8007570:	50a9      	str	r1, [r5, r2]
 8007572:	3504      	adds	r5, #4
 8007574:	e79b      	b.n	80074ae <__multiply+0x7a>
 8007576:	3e01      	subs	r6, #1
 8007578:	e79d      	b.n	80074b6 <__multiply+0x82>
 800757a:	bf00      	nop
 800757c:	0800ac40 	.word	0x0800ac40
 8007580:	0800accc 	.word	0x0800accc

08007584 <__pow5mult>:
 8007584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007588:	4615      	mov	r5, r2
 800758a:	f012 0203 	ands.w	r2, r2, #3
 800758e:	4606      	mov	r6, r0
 8007590:	460f      	mov	r7, r1
 8007592:	d007      	beq.n	80075a4 <__pow5mult+0x20>
 8007594:	4c25      	ldr	r4, [pc, #148]	; (800762c <__pow5mult+0xa8>)
 8007596:	3a01      	subs	r2, #1
 8007598:	2300      	movs	r3, #0
 800759a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800759e:	f7ff fe55 	bl	800724c <__multadd>
 80075a2:	4607      	mov	r7, r0
 80075a4:	10ad      	asrs	r5, r5, #2
 80075a6:	d03d      	beq.n	8007624 <__pow5mult+0xa0>
 80075a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80075aa:	b97c      	cbnz	r4, 80075cc <__pow5mult+0x48>
 80075ac:	2010      	movs	r0, #16
 80075ae:	f7fc ffa3 	bl	80044f8 <malloc>
 80075b2:	4602      	mov	r2, r0
 80075b4:	6270      	str	r0, [r6, #36]	; 0x24
 80075b6:	b928      	cbnz	r0, 80075c4 <__pow5mult+0x40>
 80075b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80075bc:	4b1c      	ldr	r3, [pc, #112]	; (8007630 <__pow5mult+0xac>)
 80075be:	481d      	ldr	r0, [pc, #116]	; (8007634 <__pow5mult+0xb0>)
 80075c0:	f7fe fb92 	bl	8005ce8 <__assert_func>
 80075c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075c8:	6004      	str	r4, [r0, #0]
 80075ca:	60c4      	str	r4, [r0, #12]
 80075cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80075d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075d4:	b94c      	cbnz	r4, 80075ea <__pow5mult+0x66>
 80075d6:	f240 2171 	movw	r1, #625	; 0x271
 80075da:	4630      	mov	r0, r6
 80075dc:	f7ff ff14 	bl	8007408 <__i2b>
 80075e0:	2300      	movs	r3, #0
 80075e2:	4604      	mov	r4, r0
 80075e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80075e8:	6003      	str	r3, [r0, #0]
 80075ea:	f04f 0900 	mov.w	r9, #0
 80075ee:	07eb      	lsls	r3, r5, #31
 80075f0:	d50a      	bpl.n	8007608 <__pow5mult+0x84>
 80075f2:	4639      	mov	r1, r7
 80075f4:	4622      	mov	r2, r4
 80075f6:	4630      	mov	r0, r6
 80075f8:	f7ff ff1c 	bl	8007434 <__multiply>
 80075fc:	4680      	mov	r8, r0
 80075fe:	4639      	mov	r1, r7
 8007600:	4630      	mov	r0, r6
 8007602:	f7ff fe01 	bl	8007208 <_Bfree>
 8007606:	4647      	mov	r7, r8
 8007608:	106d      	asrs	r5, r5, #1
 800760a:	d00b      	beq.n	8007624 <__pow5mult+0xa0>
 800760c:	6820      	ldr	r0, [r4, #0]
 800760e:	b938      	cbnz	r0, 8007620 <__pow5mult+0x9c>
 8007610:	4622      	mov	r2, r4
 8007612:	4621      	mov	r1, r4
 8007614:	4630      	mov	r0, r6
 8007616:	f7ff ff0d 	bl	8007434 <__multiply>
 800761a:	6020      	str	r0, [r4, #0]
 800761c:	f8c0 9000 	str.w	r9, [r0]
 8007620:	4604      	mov	r4, r0
 8007622:	e7e4      	b.n	80075ee <__pow5mult+0x6a>
 8007624:	4638      	mov	r0, r7
 8007626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800762a:	bf00      	nop
 800762c:	0800ae18 	.word	0x0800ae18
 8007630:	0800ab28 	.word	0x0800ab28
 8007634:	0800accc 	.word	0x0800accc

08007638 <__lshift>:
 8007638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800763c:	460c      	mov	r4, r1
 800763e:	4607      	mov	r7, r0
 8007640:	4691      	mov	r9, r2
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	6849      	ldr	r1, [r1, #4]
 8007646:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800764a:	68a3      	ldr	r3, [r4, #8]
 800764c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007650:	f108 0601 	add.w	r6, r8, #1
 8007654:	42b3      	cmp	r3, r6
 8007656:	db0b      	blt.n	8007670 <__lshift+0x38>
 8007658:	4638      	mov	r0, r7
 800765a:	f7ff fd95 	bl	8007188 <_Balloc>
 800765e:	4605      	mov	r5, r0
 8007660:	b948      	cbnz	r0, 8007676 <__lshift+0x3e>
 8007662:	4602      	mov	r2, r0
 8007664:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007668:	4b29      	ldr	r3, [pc, #164]	; (8007710 <__lshift+0xd8>)
 800766a:	482a      	ldr	r0, [pc, #168]	; (8007714 <__lshift+0xdc>)
 800766c:	f7fe fb3c 	bl	8005ce8 <__assert_func>
 8007670:	3101      	adds	r1, #1
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	e7ee      	b.n	8007654 <__lshift+0x1c>
 8007676:	2300      	movs	r3, #0
 8007678:	f100 0114 	add.w	r1, r0, #20
 800767c:	f100 0210 	add.w	r2, r0, #16
 8007680:	4618      	mov	r0, r3
 8007682:	4553      	cmp	r3, sl
 8007684:	db37      	blt.n	80076f6 <__lshift+0xbe>
 8007686:	6920      	ldr	r0, [r4, #16]
 8007688:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800768c:	f104 0314 	add.w	r3, r4, #20
 8007690:	f019 091f 	ands.w	r9, r9, #31
 8007694:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007698:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800769c:	d02f      	beq.n	80076fe <__lshift+0xc6>
 800769e:	468a      	mov	sl, r1
 80076a0:	f04f 0c00 	mov.w	ip, #0
 80076a4:	f1c9 0e20 	rsb	lr, r9, #32
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	fa02 f209 	lsl.w	r2, r2, r9
 80076ae:	ea42 020c 	orr.w	r2, r2, ip
 80076b2:	f84a 2b04 	str.w	r2, [sl], #4
 80076b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ba:	4298      	cmp	r0, r3
 80076bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80076c0:	d8f2      	bhi.n	80076a8 <__lshift+0x70>
 80076c2:	1b03      	subs	r3, r0, r4
 80076c4:	3b15      	subs	r3, #21
 80076c6:	f023 0303 	bic.w	r3, r3, #3
 80076ca:	3304      	adds	r3, #4
 80076cc:	f104 0215 	add.w	r2, r4, #21
 80076d0:	4290      	cmp	r0, r2
 80076d2:	bf38      	it	cc
 80076d4:	2304      	movcc	r3, #4
 80076d6:	f841 c003 	str.w	ip, [r1, r3]
 80076da:	f1bc 0f00 	cmp.w	ip, #0
 80076de:	d001      	beq.n	80076e4 <__lshift+0xac>
 80076e0:	f108 0602 	add.w	r6, r8, #2
 80076e4:	3e01      	subs	r6, #1
 80076e6:	4638      	mov	r0, r7
 80076e8:	4621      	mov	r1, r4
 80076ea:	612e      	str	r6, [r5, #16]
 80076ec:	f7ff fd8c 	bl	8007208 <_Bfree>
 80076f0:	4628      	mov	r0, r5
 80076f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80076fa:	3301      	adds	r3, #1
 80076fc:	e7c1      	b.n	8007682 <__lshift+0x4a>
 80076fe:	3904      	subs	r1, #4
 8007700:	f853 2b04 	ldr.w	r2, [r3], #4
 8007704:	4298      	cmp	r0, r3
 8007706:	f841 2f04 	str.w	r2, [r1, #4]!
 800770a:	d8f9      	bhi.n	8007700 <__lshift+0xc8>
 800770c:	e7ea      	b.n	80076e4 <__lshift+0xac>
 800770e:	bf00      	nop
 8007710:	0800ac40 	.word	0x0800ac40
 8007714:	0800accc 	.word	0x0800accc

08007718 <__mcmp>:
 8007718:	4603      	mov	r3, r0
 800771a:	690a      	ldr	r2, [r1, #16]
 800771c:	6900      	ldr	r0, [r0, #16]
 800771e:	b530      	push	{r4, r5, lr}
 8007720:	1a80      	subs	r0, r0, r2
 8007722:	d10d      	bne.n	8007740 <__mcmp+0x28>
 8007724:	3314      	adds	r3, #20
 8007726:	3114      	adds	r1, #20
 8007728:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800772c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007730:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007734:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007738:	4295      	cmp	r5, r2
 800773a:	d002      	beq.n	8007742 <__mcmp+0x2a>
 800773c:	d304      	bcc.n	8007748 <__mcmp+0x30>
 800773e:	2001      	movs	r0, #1
 8007740:	bd30      	pop	{r4, r5, pc}
 8007742:	42a3      	cmp	r3, r4
 8007744:	d3f4      	bcc.n	8007730 <__mcmp+0x18>
 8007746:	e7fb      	b.n	8007740 <__mcmp+0x28>
 8007748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800774c:	e7f8      	b.n	8007740 <__mcmp+0x28>
	...

08007750 <__mdiff>:
 8007750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	460d      	mov	r5, r1
 8007756:	4607      	mov	r7, r0
 8007758:	4611      	mov	r1, r2
 800775a:	4628      	mov	r0, r5
 800775c:	4614      	mov	r4, r2
 800775e:	f7ff ffdb 	bl	8007718 <__mcmp>
 8007762:	1e06      	subs	r6, r0, #0
 8007764:	d111      	bne.n	800778a <__mdiff+0x3a>
 8007766:	4631      	mov	r1, r6
 8007768:	4638      	mov	r0, r7
 800776a:	f7ff fd0d 	bl	8007188 <_Balloc>
 800776e:	4602      	mov	r2, r0
 8007770:	b928      	cbnz	r0, 800777e <__mdiff+0x2e>
 8007772:	f240 2132 	movw	r1, #562	; 0x232
 8007776:	4b3a      	ldr	r3, [pc, #232]	; (8007860 <__mdiff+0x110>)
 8007778:	483a      	ldr	r0, [pc, #232]	; (8007864 <__mdiff+0x114>)
 800777a:	f7fe fab5 	bl	8005ce8 <__assert_func>
 800777e:	2301      	movs	r3, #1
 8007780:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007784:	4610      	mov	r0, r2
 8007786:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778a:	bfa4      	itt	ge
 800778c:	4623      	movge	r3, r4
 800778e:	462c      	movge	r4, r5
 8007790:	4638      	mov	r0, r7
 8007792:	6861      	ldr	r1, [r4, #4]
 8007794:	bfa6      	itte	ge
 8007796:	461d      	movge	r5, r3
 8007798:	2600      	movge	r6, #0
 800779a:	2601      	movlt	r6, #1
 800779c:	f7ff fcf4 	bl	8007188 <_Balloc>
 80077a0:	4602      	mov	r2, r0
 80077a2:	b918      	cbnz	r0, 80077ac <__mdiff+0x5c>
 80077a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80077a8:	4b2d      	ldr	r3, [pc, #180]	; (8007860 <__mdiff+0x110>)
 80077aa:	e7e5      	b.n	8007778 <__mdiff+0x28>
 80077ac:	f102 0814 	add.w	r8, r2, #20
 80077b0:	46c2      	mov	sl, r8
 80077b2:	f04f 0c00 	mov.w	ip, #0
 80077b6:	6927      	ldr	r7, [r4, #16]
 80077b8:	60c6      	str	r6, [r0, #12]
 80077ba:	692e      	ldr	r6, [r5, #16]
 80077bc:	f104 0014 	add.w	r0, r4, #20
 80077c0:	f105 0914 	add.w	r9, r5, #20
 80077c4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80077c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80077cc:	3410      	adds	r4, #16
 80077ce:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80077d2:	f859 3b04 	ldr.w	r3, [r9], #4
 80077d6:	fa1f f18b 	uxth.w	r1, fp
 80077da:	448c      	add	ip, r1
 80077dc:	b299      	uxth	r1, r3
 80077de:	0c1b      	lsrs	r3, r3, #16
 80077e0:	ebac 0101 	sub.w	r1, ip, r1
 80077e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80077e8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80077ec:	b289      	uxth	r1, r1
 80077ee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80077f2:	454e      	cmp	r6, r9
 80077f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80077f8:	f84a 3b04 	str.w	r3, [sl], #4
 80077fc:	d8e7      	bhi.n	80077ce <__mdiff+0x7e>
 80077fe:	1b73      	subs	r3, r6, r5
 8007800:	3b15      	subs	r3, #21
 8007802:	f023 0303 	bic.w	r3, r3, #3
 8007806:	3515      	adds	r5, #21
 8007808:	3304      	adds	r3, #4
 800780a:	42ae      	cmp	r6, r5
 800780c:	bf38      	it	cc
 800780e:	2304      	movcc	r3, #4
 8007810:	4418      	add	r0, r3
 8007812:	4443      	add	r3, r8
 8007814:	461e      	mov	r6, r3
 8007816:	4605      	mov	r5, r0
 8007818:	4575      	cmp	r5, lr
 800781a:	d30e      	bcc.n	800783a <__mdiff+0xea>
 800781c:	f10e 0103 	add.w	r1, lr, #3
 8007820:	1a09      	subs	r1, r1, r0
 8007822:	f021 0103 	bic.w	r1, r1, #3
 8007826:	3803      	subs	r0, #3
 8007828:	4586      	cmp	lr, r0
 800782a:	bf38      	it	cc
 800782c:	2100      	movcc	r1, #0
 800782e:	4419      	add	r1, r3
 8007830:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007834:	b18b      	cbz	r3, 800785a <__mdiff+0x10a>
 8007836:	6117      	str	r7, [r2, #16]
 8007838:	e7a4      	b.n	8007784 <__mdiff+0x34>
 800783a:	f855 8b04 	ldr.w	r8, [r5], #4
 800783e:	fa1f f188 	uxth.w	r1, r8
 8007842:	4461      	add	r1, ip
 8007844:	140c      	asrs	r4, r1, #16
 8007846:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800784a:	b289      	uxth	r1, r1
 800784c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007850:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007854:	f846 1b04 	str.w	r1, [r6], #4
 8007858:	e7de      	b.n	8007818 <__mdiff+0xc8>
 800785a:	3f01      	subs	r7, #1
 800785c:	e7e8      	b.n	8007830 <__mdiff+0xe0>
 800785e:	bf00      	nop
 8007860:	0800ac40 	.word	0x0800ac40
 8007864:	0800accc 	.word	0x0800accc

08007868 <__ulp>:
 8007868:	4b11      	ldr	r3, [pc, #68]	; (80078b0 <__ulp+0x48>)
 800786a:	400b      	ands	r3, r1
 800786c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007870:	2b00      	cmp	r3, #0
 8007872:	dd02      	ble.n	800787a <__ulp+0x12>
 8007874:	2000      	movs	r0, #0
 8007876:	4619      	mov	r1, r3
 8007878:	4770      	bx	lr
 800787a:	425b      	negs	r3, r3
 800787c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007880:	f04f 0000 	mov.w	r0, #0
 8007884:	f04f 0100 	mov.w	r1, #0
 8007888:	ea4f 5223 	mov.w	r2, r3, asr #20
 800788c:	da04      	bge.n	8007898 <__ulp+0x30>
 800788e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007892:	fa43 f102 	asr.w	r1, r3, r2
 8007896:	4770      	bx	lr
 8007898:	f1a2 0314 	sub.w	r3, r2, #20
 800789c:	2b1e      	cmp	r3, #30
 800789e:	bfd6      	itet	le
 80078a0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80078a4:	2301      	movgt	r3, #1
 80078a6:	fa22 f303 	lsrle.w	r3, r2, r3
 80078aa:	4618      	mov	r0, r3
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	7ff00000 	.word	0x7ff00000

080078b4 <__b2d>:
 80078b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b8:	6907      	ldr	r7, [r0, #16]
 80078ba:	f100 0914 	add.w	r9, r0, #20
 80078be:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80078c2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80078c6:	f1a7 0804 	sub.w	r8, r7, #4
 80078ca:	4630      	mov	r0, r6
 80078cc:	f7ff fd4e 	bl	800736c <__hi0bits>
 80078d0:	f1c0 0320 	rsb	r3, r0, #32
 80078d4:	280a      	cmp	r0, #10
 80078d6:	600b      	str	r3, [r1, #0]
 80078d8:	491f      	ldr	r1, [pc, #124]	; (8007958 <__b2d+0xa4>)
 80078da:	dc17      	bgt.n	800790c <__b2d+0x58>
 80078dc:	45c1      	cmp	r9, r8
 80078de:	bf28      	it	cs
 80078e0:	2200      	movcs	r2, #0
 80078e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80078e6:	fa26 f30c 	lsr.w	r3, r6, ip
 80078ea:	bf38      	it	cc
 80078ec:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80078f0:	ea43 0501 	orr.w	r5, r3, r1
 80078f4:	f100 0315 	add.w	r3, r0, #21
 80078f8:	fa06 f303 	lsl.w	r3, r6, r3
 80078fc:	fa22 f20c 	lsr.w	r2, r2, ip
 8007900:	ea43 0402 	orr.w	r4, r3, r2
 8007904:	4620      	mov	r0, r4
 8007906:	4629      	mov	r1, r5
 8007908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800790c:	45c1      	cmp	r9, r8
 800790e:	bf2e      	itee	cs
 8007910:	2200      	movcs	r2, #0
 8007912:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007916:	f1a7 0808 	subcc.w	r8, r7, #8
 800791a:	f1b0 030b 	subs.w	r3, r0, #11
 800791e:	d016      	beq.n	800794e <__b2d+0x9a>
 8007920:	f1c3 0720 	rsb	r7, r3, #32
 8007924:	fa22 f107 	lsr.w	r1, r2, r7
 8007928:	45c8      	cmp	r8, r9
 800792a:	fa06 f603 	lsl.w	r6, r6, r3
 800792e:	ea46 0601 	orr.w	r6, r6, r1
 8007932:	bf94      	ite	ls
 8007934:	2100      	movls	r1, #0
 8007936:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800793a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800793e:	fa02 f003 	lsl.w	r0, r2, r3
 8007942:	40f9      	lsrs	r1, r7
 8007944:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007948:	ea40 0401 	orr.w	r4, r0, r1
 800794c:	e7da      	b.n	8007904 <__b2d+0x50>
 800794e:	4614      	mov	r4, r2
 8007950:	ea46 0501 	orr.w	r5, r6, r1
 8007954:	e7d6      	b.n	8007904 <__b2d+0x50>
 8007956:	bf00      	nop
 8007958:	3ff00000 	.word	0x3ff00000

0800795c <__d2b>:
 800795c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007960:	2101      	movs	r1, #1
 8007962:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007966:	4690      	mov	r8, r2
 8007968:	461d      	mov	r5, r3
 800796a:	f7ff fc0d 	bl	8007188 <_Balloc>
 800796e:	4604      	mov	r4, r0
 8007970:	b930      	cbnz	r0, 8007980 <__d2b+0x24>
 8007972:	4602      	mov	r2, r0
 8007974:	f240 310a 	movw	r1, #778	; 0x30a
 8007978:	4b24      	ldr	r3, [pc, #144]	; (8007a0c <__d2b+0xb0>)
 800797a:	4825      	ldr	r0, [pc, #148]	; (8007a10 <__d2b+0xb4>)
 800797c:	f7fe f9b4 	bl	8005ce8 <__assert_func>
 8007980:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007984:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007988:	bb2d      	cbnz	r5, 80079d6 <__d2b+0x7a>
 800798a:	9301      	str	r3, [sp, #4]
 800798c:	f1b8 0300 	subs.w	r3, r8, #0
 8007990:	d026      	beq.n	80079e0 <__d2b+0x84>
 8007992:	4668      	mov	r0, sp
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	f7ff fd09 	bl	80073ac <__lo0bits>
 800799a:	9900      	ldr	r1, [sp, #0]
 800799c:	b1f0      	cbz	r0, 80079dc <__d2b+0x80>
 800799e:	9a01      	ldr	r2, [sp, #4]
 80079a0:	f1c0 0320 	rsb	r3, r0, #32
 80079a4:	fa02 f303 	lsl.w	r3, r2, r3
 80079a8:	430b      	orrs	r3, r1
 80079aa:	40c2      	lsrs	r2, r0
 80079ac:	6163      	str	r3, [r4, #20]
 80079ae:	9201      	str	r2, [sp, #4]
 80079b0:	9b01      	ldr	r3, [sp, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	bf14      	ite	ne
 80079b6:	2102      	movne	r1, #2
 80079b8:	2101      	moveq	r1, #1
 80079ba:	61a3      	str	r3, [r4, #24]
 80079bc:	6121      	str	r1, [r4, #16]
 80079be:	b1c5      	cbz	r5, 80079f2 <__d2b+0x96>
 80079c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80079c4:	4405      	add	r5, r0
 80079c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079ca:	603d      	str	r5, [r7, #0]
 80079cc:	6030      	str	r0, [r6, #0]
 80079ce:	4620      	mov	r0, r4
 80079d0:	b002      	add	sp, #8
 80079d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079da:	e7d6      	b.n	800798a <__d2b+0x2e>
 80079dc:	6161      	str	r1, [r4, #20]
 80079de:	e7e7      	b.n	80079b0 <__d2b+0x54>
 80079e0:	a801      	add	r0, sp, #4
 80079e2:	f7ff fce3 	bl	80073ac <__lo0bits>
 80079e6:	2101      	movs	r1, #1
 80079e8:	9b01      	ldr	r3, [sp, #4]
 80079ea:	6121      	str	r1, [r4, #16]
 80079ec:	6163      	str	r3, [r4, #20]
 80079ee:	3020      	adds	r0, #32
 80079f0:	e7e5      	b.n	80079be <__d2b+0x62>
 80079f2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80079f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079fa:	6038      	str	r0, [r7, #0]
 80079fc:	6918      	ldr	r0, [r3, #16]
 80079fe:	f7ff fcb5 	bl	800736c <__hi0bits>
 8007a02:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007a06:	6031      	str	r1, [r6, #0]
 8007a08:	e7e1      	b.n	80079ce <__d2b+0x72>
 8007a0a:	bf00      	nop
 8007a0c:	0800ac40 	.word	0x0800ac40
 8007a10:	0800accc 	.word	0x0800accc

08007a14 <__ratio>:
 8007a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a18:	4688      	mov	r8, r1
 8007a1a:	4669      	mov	r1, sp
 8007a1c:	4681      	mov	r9, r0
 8007a1e:	f7ff ff49 	bl	80078b4 <__b2d>
 8007a22:	460f      	mov	r7, r1
 8007a24:	4604      	mov	r4, r0
 8007a26:	460d      	mov	r5, r1
 8007a28:	4640      	mov	r0, r8
 8007a2a:	a901      	add	r1, sp, #4
 8007a2c:	f7ff ff42 	bl	80078b4 <__b2d>
 8007a30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a34:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007a38:	468b      	mov	fp, r1
 8007a3a:	eba3 0c02 	sub.w	ip, r3, r2
 8007a3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007a42:	1a9b      	subs	r3, r3, r2
 8007a44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	bfd5      	itete	le
 8007a4c:	460a      	movle	r2, r1
 8007a4e:	462a      	movgt	r2, r5
 8007a50:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007a54:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007a58:	bfd8      	it	le
 8007a5a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007a5e:	465b      	mov	r3, fp
 8007a60:	4602      	mov	r2, r0
 8007a62:	4639      	mov	r1, r7
 8007a64:	4620      	mov	r0, r4
 8007a66:	f7f8 fe6b 	bl	8000740 <__aeabi_ddiv>
 8007a6a:	b003      	add	sp, #12
 8007a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a70 <__copybits>:
 8007a70:	3901      	subs	r1, #1
 8007a72:	b570      	push	{r4, r5, r6, lr}
 8007a74:	1149      	asrs	r1, r1, #5
 8007a76:	6914      	ldr	r4, [r2, #16]
 8007a78:	3101      	adds	r1, #1
 8007a7a:	f102 0314 	add.w	r3, r2, #20
 8007a7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007a82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007a86:	1f05      	subs	r5, r0, #4
 8007a88:	42a3      	cmp	r3, r4
 8007a8a:	d30c      	bcc.n	8007aa6 <__copybits+0x36>
 8007a8c:	1aa3      	subs	r3, r4, r2
 8007a8e:	3b11      	subs	r3, #17
 8007a90:	f023 0303 	bic.w	r3, r3, #3
 8007a94:	3211      	adds	r2, #17
 8007a96:	42a2      	cmp	r2, r4
 8007a98:	bf88      	it	hi
 8007a9a:	2300      	movhi	r3, #0
 8007a9c:	4418      	add	r0, r3
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	4288      	cmp	r0, r1
 8007aa2:	d305      	bcc.n	8007ab0 <__copybits+0x40>
 8007aa4:	bd70      	pop	{r4, r5, r6, pc}
 8007aa6:	f853 6b04 	ldr.w	r6, [r3], #4
 8007aaa:	f845 6f04 	str.w	r6, [r5, #4]!
 8007aae:	e7eb      	b.n	8007a88 <__copybits+0x18>
 8007ab0:	f840 3b04 	str.w	r3, [r0], #4
 8007ab4:	e7f4      	b.n	8007aa0 <__copybits+0x30>

08007ab6 <__any_on>:
 8007ab6:	f100 0214 	add.w	r2, r0, #20
 8007aba:	6900      	ldr	r0, [r0, #16]
 8007abc:	114b      	asrs	r3, r1, #5
 8007abe:	4298      	cmp	r0, r3
 8007ac0:	b510      	push	{r4, lr}
 8007ac2:	db11      	blt.n	8007ae8 <__any_on+0x32>
 8007ac4:	dd0a      	ble.n	8007adc <__any_on+0x26>
 8007ac6:	f011 011f 	ands.w	r1, r1, #31
 8007aca:	d007      	beq.n	8007adc <__any_on+0x26>
 8007acc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007ad0:	fa24 f001 	lsr.w	r0, r4, r1
 8007ad4:	fa00 f101 	lsl.w	r1, r0, r1
 8007ad8:	428c      	cmp	r4, r1
 8007ada:	d10b      	bne.n	8007af4 <__any_on+0x3e>
 8007adc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d803      	bhi.n	8007aec <__any_on+0x36>
 8007ae4:	2000      	movs	r0, #0
 8007ae6:	bd10      	pop	{r4, pc}
 8007ae8:	4603      	mov	r3, r0
 8007aea:	e7f7      	b.n	8007adc <__any_on+0x26>
 8007aec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007af0:	2900      	cmp	r1, #0
 8007af2:	d0f5      	beq.n	8007ae0 <__any_on+0x2a>
 8007af4:	2001      	movs	r0, #1
 8007af6:	e7f6      	b.n	8007ae6 <__any_on+0x30>

08007af8 <_calloc_r>:
 8007af8:	b570      	push	{r4, r5, r6, lr}
 8007afa:	fba1 5402 	umull	r5, r4, r1, r2
 8007afe:	b934      	cbnz	r4, 8007b0e <_calloc_r+0x16>
 8007b00:	4629      	mov	r1, r5
 8007b02:	f7fc fd71 	bl	80045e8 <_malloc_r>
 8007b06:	4606      	mov	r6, r0
 8007b08:	b928      	cbnz	r0, 8007b16 <_calloc_r+0x1e>
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	bd70      	pop	{r4, r5, r6, pc}
 8007b0e:	220c      	movs	r2, #12
 8007b10:	2600      	movs	r6, #0
 8007b12:	6002      	str	r2, [r0, #0]
 8007b14:	e7f9      	b.n	8007b0a <_calloc_r+0x12>
 8007b16:	462a      	mov	r2, r5
 8007b18:	4621      	mov	r1, r4
 8007b1a:	f7fc fcf5 	bl	8004508 <memset>
 8007b1e:	e7f4      	b.n	8007b0a <_calloc_r+0x12>

08007b20 <__ssputs_r>:
 8007b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b24:	688e      	ldr	r6, [r1, #8]
 8007b26:	4682      	mov	sl, r0
 8007b28:	429e      	cmp	r6, r3
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	4690      	mov	r8, r2
 8007b2e:	461f      	mov	r7, r3
 8007b30:	d838      	bhi.n	8007ba4 <__ssputs_r+0x84>
 8007b32:	898a      	ldrh	r2, [r1, #12]
 8007b34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b38:	d032      	beq.n	8007ba0 <__ssputs_r+0x80>
 8007b3a:	6825      	ldr	r5, [r4, #0]
 8007b3c:	6909      	ldr	r1, [r1, #16]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	eba5 0901 	sub.w	r9, r5, r1
 8007b44:	6965      	ldr	r5, [r4, #20]
 8007b46:	444b      	add	r3, r9
 8007b48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b50:	106d      	asrs	r5, r5, #1
 8007b52:	429d      	cmp	r5, r3
 8007b54:	bf38      	it	cc
 8007b56:	461d      	movcc	r5, r3
 8007b58:	0553      	lsls	r3, r2, #21
 8007b5a:	d531      	bpl.n	8007bc0 <__ssputs_r+0xa0>
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	f7fc fd43 	bl	80045e8 <_malloc_r>
 8007b62:	4606      	mov	r6, r0
 8007b64:	b950      	cbnz	r0, 8007b7c <__ssputs_r+0x5c>
 8007b66:	230c      	movs	r3, #12
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b6c:	f8ca 3000 	str.w	r3, [sl]
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b76:	81a3      	strh	r3, [r4, #12]
 8007b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b7c:	464a      	mov	r2, r9
 8007b7e:	6921      	ldr	r1, [r4, #16]
 8007b80:	f7ff fae8 	bl	8007154 <memcpy>
 8007b84:	89a3      	ldrh	r3, [r4, #12]
 8007b86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b8e:	81a3      	strh	r3, [r4, #12]
 8007b90:	6126      	str	r6, [r4, #16]
 8007b92:	444e      	add	r6, r9
 8007b94:	6026      	str	r6, [r4, #0]
 8007b96:	463e      	mov	r6, r7
 8007b98:	6165      	str	r5, [r4, #20]
 8007b9a:	eba5 0509 	sub.w	r5, r5, r9
 8007b9e:	60a5      	str	r5, [r4, #8]
 8007ba0:	42be      	cmp	r6, r7
 8007ba2:	d900      	bls.n	8007ba6 <__ssputs_r+0x86>
 8007ba4:	463e      	mov	r6, r7
 8007ba6:	4632      	mov	r2, r6
 8007ba8:	4641      	mov	r1, r8
 8007baa:	6820      	ldr	r0, [r4, #0]
 8007bac:	f000 fd78 	bl	80086a0 <memmove>
 8007bb0:	68a3      	ldr	r3, [r4, #8]
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	1b9b      	subs	r3, r3, r6
 8007bb6:	60a3      	str	r3, [r4, #8]
 8007bb8:	6823      	ldr	r3, [r4, #0]
 8007bba:	4433      	add	r3, r6
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	e7db      	b.n	8007b78 <__ssputs_r+0x58>
 8007bc0:	462a      	mov	r2, r5
 8007bc2:	f000 fd87 	bl	80086d4 <_realloc_r>
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d1e1      	bne.n	8007b90 <__ssputs_r+0x70>
 8007bcc:	4650      	mov	r0, sl
 8007bce:	6921      	ldr	r1, [r4, #16]
 8007bd0:	f7fc fca2 	bl	8004518 <_free_r>
 8007bd4:	e7c7      	b.n	8007b66 <__ssputs_r+0x46>
	...

08007bd8 <_svfiprintf_r>:
 8007bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bdc:	4698      	mov	r8, r3
 8007bde:	898b      	ldrh	r3, [r1, #12]
 8007be0:	4607      	mov	r7, r0
 8007be2:	061b      	lsls	r3, r3, #24
 8007be4:	460d      	mov	r5, r1
 8007be6:	4614      	mov	r4, r2
 8007be8:	b09d      	sub	sp, #116	; 0x74
 8007bea:	d50e      	bpl.n	8007c0a <_svfiprintf_r+0x32>
 8007bec:	690b      	ldr	r3, [r1, #16]
 8007bee:	b963      	cbnz	r3, 8007c0a <_svfiprintf_r+0x32>
 8007bf0:	2140      	movs	r1, #64	; 0x40
 8007bf2:	f7fc fcf9 	bl	80045e8 <_malloc_r>
 8007bf6:	6028      	str	r0, [r5, #0]
 8007bf8:	6128      	str	r0, [r5, #16]
 8007bfa:	b920      	cbnz	r0, 8007c06 <_svfiprintf_r+0x2e>
 8007bfc:	230c      	movs	r3, #12
 8007bfe:	603b      	str	r3, [r7, #0]
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c04:	e0d1      	b.n	8007daa <_svfiprintf_r+0x1d2>
 8007c06:	2340      	movs	r3, #64	; 0x40
 8007c08:	616b      	str	r3, [r5, #20]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c0e:	2320      	movs	r3, #32
 8007c10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c14:	2330      	movs	r3, #48	; 0x30
 8007c16:	f04f 0901 	mov.w	r9, #1
 8007c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007dc4 <_svfiprintf_r+0x1ec>
 8007c22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c26:	4623      	mov	r3, r4
 8007c28:	469a      	mov	sl, r3
 8007c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c2e:	b10a      	cbz	r2, 8007c34 <_svfiprintf_r+0x5c>
 8007c30:	2a25      	cmp	r2, #37	; 0x25
 8007c32:	d1f9      	bne.n	8007c28 <_svfiprintf_r+0x50>
 8007c34:	ebba 0b04 	subs.w	fp, sl, r4
 8007c38:	d00b      	beq.n	8007c52 <_svfiprintf_r+0x7a>
 8007c3a:	465b      	mov	r3, fp
 8007c3c:	4622      	mov	r2, r4
 8007c3e:	4629      	mov	r1, r5
 8007c40:	4638      	mov	r0, r7
 8007c42:	f7ff ff6d 	bl	8007b20 <__ssputs_r>
 8007c46:	3001      	adds	r0, #1
 8007c48:	f000 80aa 	beq.w	8007da0 <_svfiprintf_r+0x1c8>
 8007c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c4e:	445a      	add	r2, fp
 8007c50:	9209      	str	r2, [sp, #36]	; 0x24
 8007c52:	f89a 3000 	ldrb.w	r3, [sl]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 80a2 	beq.w	8007da0 <_svfiprintf_r+0x1c8>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c66:	f10a 0a01 	add.w	sl, sl, #1
 8007c6a:	9304      	str	r3, [sp, #16]
 8007c6c:	9307      	str	r3, [sp, #28]
 8007c6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c72:	931a      	str	r3, [sp, #104]	; 0x68
 8007c74:	4654      	mov	r4, sl
 8007c76:	2205      	movs	r2, #5
 8007c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c7c:	4851      	ldr	r0, [pc, #324]	; (8007dc4 <_svfiprintf_r+0x1ec>)
 8007c7e:	f7ff fa5b 	bl	8007138 <memchr>
 8007c82:	9a04      	ldr	r2, [sp, #16]
 8007c84:	b9d8      	cbnz	r0, 8007cbe <_svfiprintf_r+0xe6>
 8007c86:	06d0      	lsls	r0, r2, #27
 8007c88:	bf44      	itt	mi
 8007c8a:	2320      	movmi	r3, #32
 8007c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c90:	0711      	lsls	r1, r2, #28
 8007c92:	bf44      	itt	mi
 8007c94:	232b      	movmi	r3, #43	; 0x2b
 8007c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007ca0:	d015      	beq.n	8007cce <_svfiprintf_r+0xf6>
 8007ca2:	4654      	mov	r4, sl
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	f04f 0c0a 	mov.w	ip, #10
 8007caa:	9a07      	ldr	r2, [sp, #28]
 8007cac:	4621      	mov	r1, r4
 8007cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cb2:	3b30      	subs	r3, #48	; 0x30
 8007cb4:	2b09      	cmp	r3, #9
 8007cb6:	d94e      	bls.n	8007d56 <_svfiprintf_r+0x17e>
 8007cb8:	b1b0      	cbz	r0, 8007ce8 <_svfiprintf_r+0x110>
 8007cba:	9207      	str	r2, [sp, #28]
 8007cbc:	e014      	b.n	8007ce8 <_svfiprintf_r+0x110>
 8007cbe:	eba0 0308 	sub.w	r3, r0, r8
 8007cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	46a2      	mov	sl, r4
 8007cca:	9304      	str	r3, [sp, #16]
 8007ccc:	e7d2      	b.n	8007c74 <_svfiprintf_r+0x9c>
 8007cce:	9b03      	ldr	r3, [sp, #12]
 8007cd0:	1d19      	adds	r1, r3, #4
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	9103      	str	r1, [sp, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	bfbb      	ittet	lt
 8007cda:	425b      	neglt	r3, r3
 8007cdc:	f042 0202 	orrlt.w	r2, r2, #2
 8007ce0:	9307      	strge	r3, [sp, #28]
 8007ce2:	9307      	strlt	r3, [sp, #28]
 8007ce4:	bfb8      	it	lt
 8007ce6:	9204      	strlt	r2, [sp, #16]
 8007ce8:	7823      	ldrb	r3, [r4, #0]
 8007cea:	2b2e      	cmp	r3, #46	; 0x2e
 8007cec:	d10c      	bne.n	8007d08 <_svfiprintf_r+0x130>
 8007cee:	7863      	ldrb	r3, [r4, #1]
 8007cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8007cf2:	d135      	bne.n	8007d60 <_svfiprintf_r+0x188>
 8007cf4:	9b03      	ldr	r3, [sp, #12]
 8007cf6:	3402      	adds	r4, #2
 8007cf8:	1d1a      	adds	r2, r3, #4
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	9203      	str	r2, [sp, #12]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	bfb8      	it	lt
 8007d02:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007d06:	9305      	str	r3, [sp, #20]
 8007d08:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007dc8 <_svfiprintf_r+0x1f0>
 8007d0c:	2203      	movs	r2, #3
 8007d0e:	4650      	mov	r0, sl
 8007d10:	7821      	ldrb	r1, [r4, #0]
 8007d12:	f7ff fa11 	bl	8007138 <memchr>
 8007d16:	b140      	cbz	r0, 8007d2a <_svfiprintf_r+0x152>
 8007d18:	2340      	movs	r3, #64	; 0x40
 8007d1a:	eba0 000a 	sub.w	r0, r0, sl
 8007d1e:	fa03 f000 	lsl.w	r0, r3, r0
 8007d22:	9b04      	ldr	r3, [sp, #16]
 8007d24:	3401      	adds	r4, #1
 8007d26:	4303      	orrs	r3, r0
 8007d28:	9304      	str	r3, [sp, #16]
 8007d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d2e:	2206      	movs	r2, #6
 8007d30:	4826      	ldr	r0, [pc, #152]	; (8007dcc <_svfiprintf_r+0x1f4>)
 8007d32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d36:	f7ff f9ff 	bl	8007138 <memchr>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d038      	beq.n	8007db0 <_svfiprintf_r+0x1d8>
 8007d3e:	4b24      	ldr	r3, [pc, #144]	; (8007dd0 <_svfiprintf_r+0x1f8>)
 8007d40:	bb1b      	cbnz	r3, 8007d8a <_svfiprintf_r+0x1b2>
 8007d42:	9b03      	ldr	r3, [sp, #12]
 8007d44:	3307      	adds	r3, #7
 8007d46:	f023 0307 	bic.w	r3, r3, #7
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	9303      	str	r3, [sp, #12]
 8007d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d50:	4433      	add	r3, r6
 8007d52:	9309      	str	r3, [sp, #36]	; 0x24
 8007d54:	e767      	b.n	8007c26 <_svfiprintf_r+0x4e>
 8007d56:	460c      	mov	r4, r1
 8007d58:	2001      	movs	r0, #1
 8007d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d5e:	e7a5      	b.n	8007cac <_svfiprintf_r+0xd4>
 8007d60:	2300      	movs	r3, #0
 8007d62:	f04f 0c0a 	mov.w	ip, #10
 8007d66:	4619      	mov	r1, r3
 8007d68:	3401      	adds	r4, #1
 8007d6a:	9305      	str	r3, [sp, #20]
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d72:	3a30      	subs	r2, #48	; 0x30
 8007d74:	2a09      	cmp	r2, #9
 8007d76:	d903      	bls.n	8007d80 <_svfiprintf_r+0x1a8>
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0c5      	beq.n	8007d08 <_svfiprintf_r+0x130>
 8007d7c:	9105      	str	r1, [sp, #20]
 8007d7e:	e7c3      	b.n	8007d08 <_svfiprintf_r+0x130>
 8007d80:	4604      	mov	r4, r0
 8007d82:	2301      	movs	r3, #1
 8007d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d88:	e7f0      	b.n	8007d6c <_svfiprintf_r+0x194>
 8007d8a:	ab03      	add	r3, sp, #12
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	462a      	mov	r2, r5
 8007d90:	4638      	mov	r0, r7
 8007d92:	4b10      	ldr	r3, [pc, #64]	; (8007dd4 <_svfiprintf_r+0x1fc>)
 8007d94:	a904      	add	r1, sp, #16
 8007d96:	f7fc fd39 	bl	800480c <_printf_float>
 8007d9a:	1c42      	adds	r2, r0, #1
 8007d9c:	4606      	mov	r6, r0
 8007d9e:	d1d6      	bne.n	8007d4e <_svfiprintf_r+0x176>
 8007da0:	89ab      	ldrh	r3, [r5, #12]
 8007da2:	065b      	lsls	r3, r3, #25
 8007da4:	f53f af2c 	bmi.w	8007c00 <_svfiprintf_r+0x28>
 8007da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007daa:	b01d      	add	sp, #116	; 0x74
 8007dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db0:	ab03      	add	r3, sp, #12
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	462a      	mov	r2, r5
 8007db6:	4638      	mov	r0, r7
 8007db8:	4b06      	ldr	r3, [pc, #24]	; (8007dd4 <_svfiprintf_r+0x1fc>)
 8007dba:	a904      	add	r1, sp, #16
 8007dbc:	f7fc ffc2 	bl	8004d44 <_printf_i>
 8007dc0:	e7eb      	b.n	8007d9a <_svfiprintf_r+0x1c2>
 8007dc2:	bf00      	nop
 8007dc4:	0800ae24 	.word	0x0800ae24
 8007dc8:	0800ae2a 	.word	0x0800ae2a
 8007dcc:	0800ae2e 	.word	0x0800ae2e
 8007dd0:	0800480d 	.word	0x0800480d
 8007dd4:	08007b21 	.word	0x08007b21

08007dd8 <__sfputc_r>:
 8007dd8:	6893      	ldr	r3, [r2, #8]
 8007dda:	b410      	push	{r4}
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	6093      	str	r3, [r2, #8]
 8007de2:	da07      	bge.n	8007df4 <__sfputc_r+0x1c>
 8007de4:	6994      	ldr	r4, [r2, #24]
 8007de6:	42a3      	cmp	r3, r4
 8007de8:	db01      	blt.n	8007dee <__sfputc_r+0x16>
 8007dea:	290a      	cmp	r1, #10
 8007dec:	d102      	bne.n	8007df4 <__sfputc_r+0x1c>
 8007dee:	bc10      	pop	{r4}
 8007df0:	f000 b964 	b.w	80080bc <__swbuf_r>
 8007df4:	6813      	ldr	r3, [r2, #0]
 8007df6:	1c58      	adds	r0, r3, #1
 8007df8:	6010      	str	r0, [r2, #0]
 8007dfa:	7019      	strb	r1, [r3, #0]
 8007dfc:	4608      	mov	r0, r1
 8007dfe:	bc10      	pop	{r4}
 8007e00:	4770      	bx	lr

08007e02 <__sfputs_r>:
 8007e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e04:	4606      	mov	r6, r0
 8007e06:	460f      	mov	r7, r1
 8007e08:	4614      	mov	r4, r2
 8007e0a:	18d5      	adds	r5, r2, r3
 8007e0c:	42ac      	cmp	r4, r5
 8007e0e:	d101      	bne.n	8007e14 <__sfputs_r+0x12>
 8007e10:	2000      	movs	r0, #0
 8007e12:	e007      	b.n	8007e24 <__sfputs_r+0x22>
 8007e14:	463a      	mov	r2, r7
 8007e16:	4630      	mov	r0, r6
 8007e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1c:	f7ff ffdc 	bl	8007dd8 <__sfputc_r>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d1f3      	bne.n	8007e0c <__sfputs_r+0xa>
 8007e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e28 <_vfiprintf_r>:
 8007e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	460d      	mov	r5, r1
 8007e2e:	4614      	mov	r4, r2
 8007e30:	4698      	mov	r8, r3
 8007e32:	4606      	mov	r6, r0
 8007e34:	b09d      	sub	sp, #116	; 0x74
 8007e36:	b118      	cbz	r0, 8007e40 <_vfiprintf_r+0x18>
 8007e38:	6983      	ldr	r3, [r0, #24]
 8007e3a:	b90b      	cbnz	r3, 8007e40 <_vfiprintf_r+0x18>
 8007e3c:	f000 fb2a 	bl	8008494 <__sinit>
 8007e40:	4b89      	ldr	r3, [pc, #548]	; (8008068 <_vfiprintf_r+0x240>)
 8007e42:	429d      	cmp	r5, r3
 8007e44:	d11b      	bne.n	8007e7e <_vfiprintf_r+0x56>
 8007e46:	6875      	ldr	r5, [r6, #4]
 8007e48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e4a:	07d9      	lsls	r1, r3, #31
 8007e4c:	d405      	bmi.n	8007e5a <_vfiprintf_r+0x32>
 8007e4e:	89ab      	ldrh	r3, [r5, #12]
 8007e50:	059a      	lsls	r2, r3, #22
 8007e52:	d402      	bmi.n	8007e5a <_vfiprintf_r+0x32>
 8007e54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e56:	f000 fbbb 	bl	80085d0 <__retarget_lock_acquire_recursive>
 8007e5a:	89ab      	ldrh	r3, [r5, #12]
 8007e5c:	071b      	lsls	r3, r3, #28
 8007e5e:	d501      	bpl.n	8007e64 <_vfiprintf_r+0x3c>
 8007e60:	692b      	ldr	r3, [r5, #16]
 8007e62:	b9eb      	cbnz	r3, 8007ea0 <_vfiprintf_r+0x78>
 8007e64:	4629      	mov	r1, r5
 8007e66:	4630      	mov	r0, r6
 8007e68:	f000 f988 	bl	800817c <__swsetup_r>
 8007e6c:	b1c0      	cbz	r0, 8007ea0 <_vfiprintf_r+0x78>
 8007e6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e70:	07dc      	lsls	r4, r3, #31
 8007e72:	d50e      	bpl.n	8007e92 <_vfiprintf_r+0x6a>
 8007e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e78:	b01d      	add	sp, #116	; 0x74
 8007e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7e:	4b7b      	ldr	r3, [pc, #492]	; (800806c <_vfiprintf_r+0x244>)
 8007e80:	429d      	cmp	r5, r3
 8007e82:	d101      	bne.n	8007e88 <_vfiprintf_r+0x60>
 8007e84:	68b5      	ldr	r5, [r6, #8]
 8007e86:	e7df      	b.n	8007e48 <_vfiprintf_r+0x20>
 8007e88:	4b79      	ldr	r3, [pc, #484]	; (8008070 <_vfiprintf_r+0x248>)
 8007e8a:	429d      	cmp	r5, r3
 8007e8c:	bf08      	it	eq
 8007e8e:	68f5      	ldreq	r5, [r6, #12]
 8007e90:	e7da      	b.n	8007e48 <_vfiprintf_r+0x20>
 8007e92:	89ab      	ldrh	r3, [r5, #12]
 8007e94:	0598      	lsls	r0, r3, #22
 8007e96:	d4ed      	bmi.n	8007e74 <_vfiprintf_r+0x4c>
 8007e98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e9a:	f000 fb9a 	bl	80085d2 <__retarget_lock_release_recursive>
 8007e9e:	e7e9      	b.n	8007e74 <_vfiprintf_r+0x4c>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea4:	2320      	movs	r3, #32
 8007ea6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007eaa:	2330      	movs	r3, #48	; 0x30
 8007eac:	f04f 0901 	mov.w	r9, #1
 8007eb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eb4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008074 <_vfiprintf_r+0x24c>
 8007eb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ebc:	4623      	mov	r3, r4
 8007ebe:	469a      	mov	sl, r3
 8007ec0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ec4:	b10a      	cbz	r2, 8007eca <_vfiprintf_r+0xa2>
 8007ec6:	2a25      	cmp	r2, #37	; 0x25
 8007ec8:	d1f9      	bne.n	8007ebe <_vfiprintf_r+0x96>
 8007eca:	ebba 0b04 	subs.w	fp, sl, r4
 8007ece:	d00b      	beq.n	8007ee8 <_vfiprintf_r+0xc0>
 8007ed0:	465b      	mov	r3, fp
 8007ed2:	4622      	mov	r2, r4
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	f7ff ff93 	bl	8007e02 <__sfputs_r>
 8007edc:	3001      	adds	r0, #1
 8007ede:	f000 80aa 	beq.w	8008036 <_vfiprintf_r+0x20e>
 8007ee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ee4:	445a      	add	r2, fp
 8007ee6:	9209      	str	r2, [sp, #36]	; 0x24
 8007ee8:	f89a 3000 	ldrb.w	r3, [sl]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 80a2 	beq.w	8008036 <_vfiprintf_r+0x20e>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ef8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007efc:	f10a 0a01 	add.w	sl, sl, #1
 8007f00:	9304      	str	r3, [sp, #16]
 8007f02:	9307      	str	r3, [sp, #28]
 8007f04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f08:	931a      	str	r3, [sp, #104]	; 0x68
 8007f0a:	4654      	mov	r4, sl
 8007f0c:	2205      	movs	r2, #5
 8007f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f12:	4858      	ldr	r0, [pc, #352]	; (8008074 <_vfiprintf_r+0x24c>)
 8007f14:	f7ff f910 	bl	8007138 <memchr>
 8007f18:	9a04      	ldr	r2, [sp, #16]
 8007f1a:	b9d8      	cbnz	r0, 8007f54 <_vfiprintf_r+0x12c>
 8007f1c:	06d1      	lsls	r1, r2, #27
 8007f1e:	bf44      	itt	mi
 8007f20:	2320      	movmi	r3, #32
 8007f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f26:	0713      	lsls	r3, r2, #28
 8007f28:	bf44      	itt	mi
 8007f2a:	232b      	movmi	r3, #43	; 0x2b
 8007f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f30:	f89a 3000 	ldrb.w	r3, [sl]
 8007f34:	2b2a      	cmp	r3, #42	; 0x2a
 8007f36:	d015      	beq.n	8007f64 <_vfiprintf_r+0x13c>
 8007f38:	4654      	mov	r4, sl
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	f04f 0c0a 	mov.w	ip, #10
 8007f40:	9a07      	ldr	r2, [sp, #28]
 8007f42:	4621      	mov	r1, r4
 8007f44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f48:	3b30      	subs	r3, #48	; 0x30
 8007f4a:	2b09      	cmp	r3, #9
 8007f4c:	d94e      	bls.n	8007fec <_vfiprintf_r+0x1c4>
 8007f4e:	b1b0      	cbz	r0, 8007f7e <_vfiprintf_r+0x156>
 8007f50:	9207      	str	r2, [sp, #28]
 8007f52:	e014      	b.n	8007f7e <_vfiprintf_r+0x156>
 8007f54:	eba0 0308 	sub.w	r3, r0, r8
 8007f58:	fa09 f303 	lsl.w	r3, r9, r3
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	46a2      	mov	sl, r4
 8007f60:	9304      	str	r3, [sp, #16]
 8007f62:	e7d2      	b.n	8007f0a <_vfiprintf_r+0xe2>
 8007f64:	9b03      	ldr	r3, [sp, #12]
 8007f66:	1d19      	adds	r1, r3, #4
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	9103      	str	r1, [sp, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	bfbb      	ittet	lt
 8007f70:	425b      	neglt	r3, r3
 8007f72:	f042 0202 	orrlt.w	r2, r2, #2
 8007f76:	9307      	strge	r3, [sp, #28]
 8007f78:	9307      	strlt	r3, [sp, #28]
 8007f7a:	bfb8      	it	lt
 8007f7c:	9204      	strlt	r2, [sp, #16]
 8007f7e:	7823      	ldrb	r3, [r4, #0]
 8007f80:	2b2e      	cmp	r3, #46	; 0x2e
 8007f82:	d10c      	bne.n	8007f9e <_vfiprintf_r+0x176>
 8007f84:	7863      	ldrb	r3, [r4, #1]
 8007f86:	2b2a      	cmp	r3, #42	; 0x2a
 8007f88:	d135      	bne.n	8007ff6 <_vfiprintf_r+0x1ce>
 8007f8a:	9b03      	ldr	r3, [sp, #12]
 8007f8c:	3402      	adds	r4, #2
 8007f8e:	1d1a      	adds	r2, r3, #4
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	9203      	str	r2, [sp, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	bfb8      	it	lt
 8007f98:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007f9c:	9305      	str	r3, [sp, #20]
 8007f9e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008078 <_vfiprintf_r+0x250>
 8007fa2:	2203      	movs	r2, #3
 8007fa4:	4650      	mov	r0, sl
 8007fa6:	7821      	ldrb	r1, [r4, #0]
 8007fa8:	f7ff f8c6 	bl	8007138 <memchr>
 8007fac:	b140      	cbz	r0, 8007fc0 <_vfiprintf_r+0x198>
 8007fae:	2340      	movs	r3, #64	; 0x40
 8007fb0:	eba0 000a 	sub.w	r0, r0, sl
 8007fb4:	fa03 f000 	lsl.w	r0, r3, r0
 8007fb8:	9b04      	ldr	r3, [sp, #16]
 8007fba:	3401      	adds	r4, #1
 8007fbc:	4303      	orrs	r3, r0
 8007fbe:	9304      	str	r3, [sp, #16]
 8007fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fc4:	2206      	movs	r2, #6
 8007fc6:	482d      	ldr	r0, [pc, #180]	; (800807c <_vfiprintf_r+0x254>)
 8007fc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fcc:	f7ff f8b4 	bl	8007138 <memchr>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d03f      	beq.n	8008054 <_vfiprintf_r+0x22c>
 8007fd4:	4b2a      	ldr	r3, [pc, #168]	; (8008080 <_vfiprintf_r+0x258>)
 8007fd6:	bb1b      	cbnz	r3, 8008020 <_vfiprintf_r+0x1f8>
 8007fd8:	9b03      	ldr	r3, [sp, #12]
 8007fda:	3307      	adds	r3, #7
 8007fdc:	f023 0307 	bic.w	r3, r3, #7
 8007fe0:	3308      	adds	r3, #8
 8007fe2:	9303      	str	r3, [sp, #12]
 8007fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe6:	443b      	add	r3, r7
 8007fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fea:	e767      	b.n	8007ebc <_vfiprintf_r+0x94>
 8007fec:	460c      	mov	r4, r1
 8007fee:	2001      	movs	r0, #1
 8007ff0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ff4:	e7a5      	b.n	8007f42 <_vfiprintf_r+0x11a>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	f04f 0c0a 	mov.w	ip, #10
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	3401      	adds	r4, #1
 8008000:	9305      	str	r3, [sp, #20]
 8008002:	4620      	mov	r0, r4
 8008004:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008008:	3a30      	subs	r2, #48	; 0x30
 800800a:	2a09      	cmp	r2, #9
 800800c:	d903      	bls.n	8008016 <_vfiprintf_r+0x1ee>
 800800e:	2b00      	cmp	r3, #0
 8008010:	d0c5      	beq.n	8007f9e <_vfiprintf_r+0x176>
 8008012:	9105      	str	r1, [sp, #20]
 8008014:	e7c3      	b.n	8007f9e <_vfiprintf_r+0x176>
 8008016:	4604      	mov	r4, r0
 8008018:	2301      	movs	r3, #1
 800801a:	fb0c 2101 	mla	r1, ip, r1, r2
 800801e:	e7f0      	b.n	8008002 <_vfiprintf_r+0x1da>
 8008020:	ab03      	add	r3, sp, #12
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	462a      	mov	r2, r5
 8008026:	4630      	mov	r0, r6
 8008028:	4b16      	ldr	r3, [pc, #88]	; (8008084 <_vfiprintf_r+0x25c>)
 800802a:	a904      	add	r1, sp, #16
 800802c:	f7fc fbee 	bl	800480c <_printf_float>
 8008030:	4607      	mov	r7, r0
 8008032:	1c78      	adds	r0, r7, #1
 8008034:	d1d6      	bne.n	8007fe4 <_vfiprintf_r+0x1bc>
 8008036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008038:	07d9      	lsls	r1, r3, #31
 800803a:	d405      	bmi.n	8008048 <_vfiprintf_r+0x220>
 800803c:	89ab      	ldrh	r3, [r5, #12]
 800803e:	059a      	lsls	r2, r3, #22
 8008040:	d402      	bmi.n	8008048 <_vfiprintf_r+0x220>
 8008042:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008044:	f000 fac5 	bl	80085d2 <__retarget_lock_release_recursive>
 8008048:	89ab      	ldrh	r3, [r5, #12]
 800804a:	065b      	lsls	r3, r3, #25
 800804c:	f53f af12 	bmi.w	8007e74 <_vfiprintf_r+0x4c>
 8008050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008052:	e711      	b.n	8007e78 <_vfiprintf_r+0x50>
 8008054:	ab03      	add	r3, sp, #12
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	462a      	mov	r2, r5
 800805a:	4630      	mov	r0, r6
 800805c:	4b09      	ldr	r3, [pc, #36]	; (8008084 <_vfiprintf_r+0x25c>)
 800805e:	a904      	add	r1, sp, #16
 8008060:	f7fc fe70 	bl	8004d44 <_printf_i>
 8008064:	e7e4      	b.n	8008030 <_vfiprintf_r+0x208>
 8008066:	bf00      	nop
 8008068:	0800af58 	.word	0x0800af58
 800806c:	0800af78 	.word	0x0800af78
 8008070:	0800af38 	.word	0x0800af38
 8008074:	0800ae24 	.word	0x0800ae24
 8008078:	0800ae2a 	.word	0x0800ae2a
 800807c:	0800ae2e 	.word	0x0800ae2e
 8008080:	0800480d 	.word	0x0800480d
 8008084:	08007e03 	.word	0x08007e03

08008088 <nan>:
 8008088:	2000      	movs	r0, #0
 800808a:	4901      	ldr	r1, [pc, #4]	; (8008090 <nan+0x8>)
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	7ff80000 	.word	0x7ff80000

08008094 <strncmp>:
 8008094:	4603      	mov	r3, r0
 8008096:	b510      	push	{r4, lr}
 8008098:	b172      	cbz	r2, 80080b8 <strncmp+0x24>
 800809a:	3901      	subs	r1, #1
 800809c:	1884      	adds	r4, r0, r2
 800809e:	f813 0b01 	ldrb.w	r0, [r3], #1
 80080a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80080a6:	4290      	cmp	r0, r2
 80080a8:	d101      	bne.n	80080ae <strncmp+0x1a>
 80080aa:	42a3      	cmp	r3, r4
 80080ac:	d101      	bne.n	80080b2 <strncmp+0x1e>
 80080ae:	1a80      	subs	r0, r0, r2
 80080b0:	bd10      	pop	{r4, pc}
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d1f3      	bne.n	800809e <strncmp+0xa>
 80080b6:	e7fa      	b.n	80080ae <strncmp+0x1a>
 80080b8:	4610      	mov	r0, r2
 80080ba:	e7f9      	b.n	80080b0 <strncmp+0x1c>

080080bc <__swbuf_r>:
 80080bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080be:	460e      	mov	r6, r1
 80080c0:	4614      	mov	r4, r2
 80080c2:	4605      	mov	r5, r0
 80080c4:	b118      	cbz	r0, 80080ce <__swbuf_r+0x12>
 80080c6:	6983      	ldr	r3, [r0, #24]
 80080c8:	b90b      	cbnz	r3, 80080ce <__swbuf_r+0x12>
 80080ca:	f000 f9e3 	bl	8008494 <__sinit>
 80080ce:	4b21      	ldr	r3, [pc, #132]	; (8008154 <__swbuf_r+0x98>)
 80080d0:	429c      	cmp	r4, r3
 80080d2:	d12b      	bne.n	800812c <__swbuf_r+0x70>
 80080d4:	686c      	ldr	r4, [r5, #4]
 80080d6:	69a3      	ldr	r3, [r4, #24]
 80080d8:	60a3      	str	r3, [r4, #8]
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	071a      	lsls	r2, r3, #28
 80080de:	d52f      	bpl.n	8008140 <__swbuf_r+0x84>
 80080e0:	6923      	ldr	r3, [r4, #16]
 80080e2:	b36b      	cbz	r3, 8008140 <__swbuf_r+0x84>
 80080e4:	6923      	ldr	r3, [r4, #16]
 80080e6:	6820      	ldr	r0, [r4, #0]
 80080e8:	b2f6      	uxtb	r6, r6
 80080ea:	1ac0      	subs	r0, r0, r3
 80080ec:	6963      	ldr	r3, [r4, #20]
 80080ee:	4637      	mov	r7, r6
 80080f0:	4283      	cmp	r3, r0
 80080f2:	dc04      	bgt.n	80080fe <__swbuf_r+0x42>
 80080f4:	4621      	mov	r1, r4
 80080f6:	4628      	mov	r0, r5
 80080f8:	f000 f938 	bl	800836c <_fflush_r>
 80080fc:	bb30      	cbnz	r0, 800814c <__swbuf_r+0x90>
 80080fe:	68a3      	ldr	r3, [r4, #8]
 8008100:	3001      	adds	r0, #1
 8008102:	3b01      	subs	r3, #1
 8008104:	60a3      	str	r3, [r4, #8]
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	6022      	str	r2, [r4, #0]
 800810c:	701e      	strb	r6, [r3, #0]
 800810e:	6963      	ldr	r3, [r4, #20]
 8008110:	4283      	cmp	r3, r0
 8008112:	d004      	beq.n	800811e <__swbuf_r+0x62>
 8008114:	89a3      	ldrh	r3, [r4, #12]
 8008116:	07db      	lsls	r3, r3, #31
 8008118:	d506      	bpl.n	8008128 <__swbuf_r+0x6c>
 800811a:	2e0a      	cmp	r6, #10
 800811c:	d104      	bne.n	8008128 <__swbuf_r+0x6c>
 800811e:	4621      	mov	r1, r4
 8008120:	4628      	mov	r0, r5
 8008122:	f000 f923 	bl	800836c <_fflush_r>
 8008126:	b988      	cbnz	r0, 800814c <__swbuf_r+0x90>
 8008128:	4638      	mov	r0, r7
 800812a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800812c:	4b0a      	ldr	r3, [pc, #40]	; (8008158 <__swbuf_r+0x9c>)
 800812e:	429c      	cmp	r4, r3
 8008130:	d101      	bne.n	8008136 <__swbuf_r+0x7a>
 8008132:	68ac      	ldr	r4, [r5, #8]
 8008134:	e7cf      	b.n	80080d6 <__swbuf_r+0x1a>
 8008136:	4b09      	ldr	r3, [pc, #36]	; (800815c <__swbuf_r+0xa0>)
 8008138:	429c      	cmp	r4, r3
 800813a:	bf08      	it	eq
 800813c:	68ec      	ldreq	r4, [r5, #12]
 800813e:	e7ca      	b.n	80080d6 <__swbuf_r+0x1a>
 8008140:	4621      	mov	r1, r4
 8008142:	4628      	mov	r0, r5
 8008144:	f000 f81a 	bl	800817c <__swsetup_r>
 8008148:	2800      	cmp	r0, #0
 800814a:	d0cb      	beq.n	80080e4 <__swbuf_r+0x28>
 800814c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008150:	e7ea      	b.n	8008128 <__swbuf_r+0x6c>
 8008152:	bf00      	nop
 8008154:	0800af58 	.word	0x0800af58
 8008158:	0800af78 	.word	0x0800af78
 800815c:	0800af38 	.word	0x0800af38

08008160 <__ascii_wctomb>:
 8008160:	4603      	mov	r3, r0
 8008162:	4608      	mov	r0, r1
 8008164:	b141      	cbz	r1, 8008178 <__ascii_wctomb+0x18>
 8008166:	2aff      	cmp	r2, #255	; 0xff
 8008168:	d904      	bls.n	8008174 <__ascii_wctomb+0x14>
 800816a:	228a      	movs	r2, #138	; 0x8a
 800816c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	4770      	bx	lr
 8008174:	2001      	movs	r0, #1
 8008176:	700a      	strb	r2, [r1, #0]
 8008178:	4770      	bx	lr
	...

0800817c <__swsetup_r>:
 800817c:	4b32      	ldr	r3, [pc, #200]	; (8008248 <__swsetup_r+0xcc>)
 800817e:	b570      	push	{r4, r5, r6, lr}
 8008180:	681d      	ldr	r5, [r3, #0]
 8008182:	4606      	mov	r6, r0
 8008184:	460c      	mov	r4, r1
 8008186:	b125      	cbz	r5, 8008192 <__swsetup_r+0x16>
 8008188:	69ab      	ldr	r3, [r5, #24]
 800818a:	b913      	cbnz	r3, 8008192 <__swsetup_r+0x16>
 800818c:	4628      	mov	r0, r5
 800818e:	f000 f981 	bl	8008494 <__sinit>
 8008192:	4b2e      	ldr	r3, [pc, #184]	; (800824c <__swsetup_r+0xd0>)
 8008194:	429c      	cmp	r4, r3
 8008196:	d10f      	bne.n	80081b8 <__swsetup_r+0x3c>
 8008198:	686c      	ldr	r4, [r5, #4]
 800819a:	89a3      	ldrh	r3, [r4, #12]
 800819c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081a0:	0719      	lsls	r1, r3, #28
 80081a2:	d42c      	bmi.n	80081fe <__swsetup_r+0x82>
 80081a4:	06dd      	lsls	r5, r3, #27
 80081a6:	d411      	bmi.n	80081cc <__swsetup_r+0x50>
 80081a8:	2309      	movs	r3, #9
 80081aa:	6033      	str	r3, [r6, #0]
 80081ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081b4:	81a3      	strh	r3, [r4, #12]
 80081b6:	e03e      	b.n	8008236 <__swsetup_r+0xba>
 80081b8:	4b25      	ldr	r3, [pc, #148]	; (8008250 <__swsetup_r+0xd4>)
 80081ba:	429c      	cmp	r4, r3
 80081bc:	d101      	bne.n	80081c2 <__swsetup_r+0x46>
 80081be:	68ac      	ldr	r4, [r5, #8]
 80081c0:	e7eb      	b.n	800819a <__swsetup_r+0x1e>
 80081c2:	4b24      	ldr	r3, [pc, #144]	; (8008254 <__swsetup_r+0xd8>)
 80081c4:	429c      	cmp	r4, r3
 80081c6:	bf08      	it	eq
 80081c8:	68ec      	ldreq	r4, [r5, #12]
 80081ca:	e7e6      	b.n	800819a <__swsetup_r+0x1e>
 80081cc:	0758      	lsls	r0, r3, #29
 80081ce:	d512      	bpl.n	80081f6 <__swsetup_r+0x7a>
 80081d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081d2:	b141      	cbz	r1, 80081e6 <__swsetup_r+0x6a>
 80081d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081d8:	4299      	cmp	r1, r3
 80081da:	d002      	beq.n	80081e2 <__swsetup_r+0x66>
 80081dc:	4630      	mov	r0, r6
 80081de:	f7fc f99b 	bl	8004518 <_free_r>
 80081e2:	2300      	movs	r3, #0
 80081e4:	6363      	str	r3, [r4, #52]	; 0x34
 80081e6:	89a3      	ldrh	r3, [r4, #12]
 80081e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081ec:	81a3      	strh	r3, [r4, #12]
 80081ee:	2300      	movs	r3, #0
 80081f0:	6063      	str	r3, [r4, #4]
 80081f2:	6923      	ldr	r3, [r4, #16]
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	89a3      	ldrh	r3, [r4, #12]
 80081f8:	f043 0308 	orr.w	r3, r3, #8
 80081fc:	81a3      	strh	r3, [r4, #12]
 80081fe:	6923      	ldr	r3, [r4, #16]
 8008200:	b94b      	cbnz	r3, 8008216 <__swsetup_r+0x9a>
 8008202:	89a3      	ldrh	r3, [r4, #12]
 8008204:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800820c:	d003      	beq.n	8008216 <__swsetup_r+0x9a>
 800820e:	4621      	mov	r1, r4
 8008210:	4630      	mov	r0, r6
 8008212:	f000 fa05 	bl	8008620 <__smakebuf_r>
 8008216:	89a0      	ldrh	r0, [r4, #12]
 8008218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800821c:	f010 0301 	ands.w	r3, r0, #1
 8008220:	d00a      	beq.n	8008238 <__swsetup_r+0xbc>
 8008222:	2300      	movs	r3, #0
 8008224:	60a3      	str	r3, [r4, #8]
 8008226:	6963      	ldr	r3, [r4, #20]
 8008228:	425b      	negs	r3, r3
 800822a:	61a3      	str	r3, [r4, #24]
 800822c:	6923      	ldr	r3, [r4, #16]
 800822e:	b943      	cbnz	r3, 8008242 <__swsetup_r+0xc6>
 8008230:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008234:	d1ba      	bne.n	80081ac <__swsetup_r+0x30>
 8008236:	bd70      	pop	{r4, r5, r6, pc}
 8008238:	0781      	lsls	r1, r0, #30
 800823a:	bf58      	it	pl
 800823c:	6963      	ldrpl	r3, [r4, #20]
 800823e:	60a3      	str	r3, [r4, #8]
 8008240:	e7f4      	b.n	800822c <__swsetup_r+0xb0>
 8008242:	2000      	movs	r0, #0
 8008244:	e7f7      	b.n	8008236 <__swsetup_r+0xba>
 8008246:	bf00      	nop
 8008248:	20000020 	.word	0x20000020
 800824c:	0800af58 	.word	0x0800af58
 8008250:	0800af78 	.word	0x0800af78
 8008254:	0800af38 	.word	0x0800af38

08008258 <abort>:
 8008258:	2006      	movs	r0, #6
 800825a:	b508      	push	{r3, lr}
 800825c:	f000 fa92 	bl	8008784 <raise>
 8008260:	2001      	movs	r0, #1
 8008262:	f7f9 fe96 	bl	8001f92 <_exit>
	...

08008268 <__sflush_r>:
 8008268:	898a      	ldrh	r2, [r1, #12]
 800826a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826c:	4605      	mov	r5, r0
 800826e:	0710      	lsls	r0, r2, #28
 8008270:	460c      	mov	r4, r1
 8008272:	d457      	bmi.n	8008324 <__sflush_r+0xbc>
 8008274:	684b      	ldr	r3, [r1, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	dc04      	bgt.n	8008284 <__sflush_r+0x1c>
 800827a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800827c:	2b00      	cmp	r3, #0
 800827e:	dc01      	bgt.n	8008284 <__sflush_r+0x1c>
 8008280:	2000      	movs	r0, #0
 8008282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008286:	2e00      	cmp	r6, #0
 8008288:	d0fa      	beq.n	8008280 <__sflush_r+0x18>
 800828a:	2300      	movs	r3, #0
 800828c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008290:	682f      	ldr	r7, [r5, #0]
 8008292:	602b      	str	r3, [r5, #0]
 8008294:	d032      	beq.n	80082fc <__sflush_r+0x94>
 8008296:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	075a      	lsls	r2, r3, #29
 800829c:	d505      	bpl.n	80082aa <__sflush_r+0x42>
 800829e:	6863      	ldr	r3, [r4, #4]
 80082a0:	1ac0      	subs	r0, r0, r3
 80082a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082a4:	b10b      	cbz	r3, 80082aa <__sflush_r+0x42>
 80082a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082a8:	1ac0      	subs	r0, r0, r3
 80082aa:	2300      	movs	r3, #0
 80082ac:	4602      	mov	r2, r0
 80082ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082b0:	4628      	mov	r0, r5
 80082b2:	6a21      	ldr	r1, [r4, #32]
 80082b4:	47b0      	blx	r6
 80082b6:	1c43      	adds	r3, r0, #1
 80082b8:	89a3      	ldrh	r3, [r4, #12]
 80082ba:	d106      	bne.n	80082ca <__sflush_r+0x62>
 80082bc:	6829      	ldr	r1, [r5, #0]
 80082be:	291d      	cmp	r1, #29
 80082c0:	d82c      	bhi.n	800831c <__sflush_r+0xb4>
 80082c2:	4a29      	ldr	r2, [pc, #164]	; (8008368 <__sflush_r+0x100>)
 80082c4:	40ca      	lsrs	r2, r1
 80082c6:	07d6      	lsls	r6, r2, #31
 80082c8:	d528      	bpl.n	800831c <__sflush_r+0xb4>
 80082ca:	2200      	movs	r2, #0
 80082cc:	6062      	str	r2, [r4, #4]
 80082ce:	6922      	ldr	r2, [r4, #16]
 80082d0:	04d9      	lsls	r1, r3, #19
 80082d2:	6022      	str	r2, [r4, #0]
 80082d4:	d504      	bpl.n	80082e0 <__sflush_r+0x78>
 80082d6:	1c42      	adds	r2, r0, #1
 80082d8:	d101      	bne.n	80082de <__sflush_r+0x76>
 80082da:	682b      	ldr	r3, [r5, #0]
 80082dc:	b903      	cbnz	r3, 80082e0 <__sflush_r+0x78>
 80082de:	6560      	str	r0, [r4, #84]	; 0x54
 80082e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082e2:	602f      	str	r7, [r5, #0]
 80082e4:	2900      	cmp	r1, #0
 80082e6:	d0cb      	beq.n	8008280 <__sflush_r+0x18>
 80082e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082ec:	4299      	cmp	r1, r3
 80082ee:	d002      	beq.n	80082f6 <__sflush_r+0x8e>
 80082f0:	4628      	mov	r0, r5
 80082f2:	f7fc f911 	bl	8004518 <_free_r>
 80082f6:	2000      	movs	r0, #0
 80082f8:	6360      	str	r0, [r4, #52]	; 0x34
 80082fa:	e7c2      	b.n	8008282 <__sflush_r+0x1a>
 80082fc:	6a21      	ldr	r1, [r4, #32]
 80082fe:	2301      	movs	r3, #1
 8008300:	4628      	mov	r0, r5
 8008302:	47b0      	blx	r6
 8008304:	1c41      	adds	r1, r0, #1
 8008306:	d1c7      	bne.n	8008298 <__sflush_r+0x30>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d0c4      	beq.n	8008298 <__sflush_r+0x30>
 800830e:	2b1d      	cmp	r3, #29
 8008310:	d001      	beq.n	8008316 <__sflush_r+0xae>
 8008312:	2b16      	cmp	r3, #22
 8008314:	d101      	bne.n	800831a <__sflush_r+0xb2>
 8008316:	602f      	str	r7, [r5, #0]
 8008318:	e7b2      	b.n	8008280 <__sflush_r+0x18>
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008320:	81a3      	strh	r3, [r4, #12]
 8008322:	e7ae      	b.n	8008282 <__sflush_r+0x1a>
 8008324:	690f      	ldr	r7, [r1, #16]
 8008326:	2f00      	cmp	r7, #0
 8008328:	d0aa      	beq.n	8008280 <__sflush_r+0x18>
 800832a:	0793      	lsls	r3, r2, #30
 800832c:	bf18      	it	ne
 800832e:	2300      	movne	r3, #0
 8008330:	680e      	ldr	r6, [r1, #0]
 8008332:	bf08      	it	eq
 8008334:	694b      	ldreq	r3, [r1, #20]
 8008336:	1bf6      	subs	r6, r6, r7
 8008338:	600f      	str	r7, [r1, #0]
 800833a:	608b      	str	r3, [r1, #8]
 800833c:	2e00      	cmp	r6, #0
 800833e:	dd9f      	ble.n	8008280 <__sflush_r+0x18>
 8008340:	4633      	mov	r3, r6
 8008342:	463a      	mov	r2, r7
 8008344:	4628      	mov	r0, r5
 8008346:	6a21      	ldr	r1, [r4, #32]
 8008348:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800834c:	47e0      	blx	ip
 800834e:	2800      	cmp	r0, #0
 8008350:	dc06      	bgt.n	8008360 <__sflush_r+0xf8>
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800835c:	81a3      	strh	r3, [r4, #12]
 800835e:	e790      	b.n	8008282 <__sflush_r+0x1a>
 8008360:	4407      	add	r7, r0
 8008362:	1a36      	subs	r6, r6, r0
 8008364:	e7ea      	b.n	800833c <__sflush_r+0xd4>
 8008366:	bf00      	nop
 8008368:	20400001 	.word	0x20400001

0800836c <_fflush_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	690b      	ldr	r3, [r1, #16]
 8008370:	4605      	mov	r5, r0
 8008372:	460c      	mov	r4, r1
 8008374:	b913      	cbnz	r3, 800837c <_fflush_r+0x10>
 8008376:	2500      	movs	r5, #0
 8008378:	4628      	mov	r0, r5
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	b118      	cbz	r0, 8008386 <_fflush_r+0x1a>
 800837e:	6983      	ldr	r3, [r0, #24]
 8008380:	b90b      	cbnz	r3, 8008386 <_fflush_r+0x1a>
 8008382:	f000 f887 	bl	8008494 <__sinit>
 8008386:	4b14      	ldr	r3, [pc, #80]	; (80083d8 <_fflush_r+0x6c>)
 8008388:	429c      	cmp	r4, r3
 800838a:	d11b      	bne.n	80083c4 <_fflush_r+0x58>
 800838c:	686c      	ldr	r4, [r5, #4]
 800838e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0ef      	beq.n	8008376 <_fflush_r+0xa>
 8008396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008398:	07d0      	lsls	r0, r2, #31
 800839a:	d404      	bmi.n	80083a6 <_fflush_r+0x3a>
 800839c:	0599      	lsls	r1, r3, #22
 800839e:	d402      	bmi.n	80083a6 <_fflush_r+0x3a>
 80083a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083a2:	f000 f915 	bl	80085d0 <__retarget_lock_acquire_recursive>
 80083a6:	4628      	mov	r0, r5
 80083a8:	4621      	mov	r1, r4
 80083aa:	f7ff ff5d 	bl	8008268 <__sflush_r>
 80083ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083b0:	4605      	mov	r5, r0
 80083b2:	07da      	lsls	r2, r3, #31
 80083b4:	d4e0      	bmi.n	8008378 <_fflush_r+0xc>
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	059b      	lsls	r3, r3, #22
 80083ba:	d4dd      	bmi.n	8008378 <_fflush_r+0xc>
 80083bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083be:	f000 f908 	bl	80085d2 <__retarget_lock_release_recursive>
 80083c2:	e7d9      	b.n	8008378 <_fflush_r+0xc>
 80083c4:	4b05      	ldr	r3, [pc, #20]	; (80083dc <_fflush_r+0x70>)
 80083c6:	429c      	cmp	r4, r3
 80083c8:	d101      	bne.n	80083ce <_fflush_r+0x62>
 80083ca:	68ac      	ldr	r4, [r5, #8]
 80083cc:	e7df      	b.n	800838e <_fflush_r+0x22>
 80083ce:	4b04      	ldr	r3, [pc, #16]	; (80083e0 <_fflush_r+0x74>)
 80083d0:	429c      	cmp	r4, r3
 80083d2:	bf08      	it	eq
 80083d4:	68ec      	ldreq	r4, [r5, #12]
 80083d6:	e7da      	b.n	800838e <_fflush_r+0x22>
 80083d8:	0800af58 	.word	0x0800af58
 80083dc:	0800af78 	.word	0x0800af78
 80083e0:	0800af38 	.word	0x0800af38

080083e4 <std>:
 80083e4:	2300      	movs	r3, #0
 80083e6:	b510      	push	{r4, lr}
 80083e8:	4604      	mov	r4, r0
 80083ea:	e9c0 3300 	strd	r3, r3, [r0]
 80083ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083f2:	6083      	str	r3, [r0, #8]
 80083f4:	8181      	strh	r1, [r0, #12]
 80083f6:	6643      	str	r3, [r0, #100]	; 0x64
 80083f8:	81c2      	strh	r2, [r0, #14]
 80083fa:	6183      	str	r3, [r0, #24]
 80083fc:	4619      	mov	r1, r3
 80083fe:	2208      	movs	r2, #8
 8008400:	305c      	adds	r0, #92	; 0x5c
 8008402:	f7fc f881 	bl	8004508 <memset>
 8008406:	4b05      	ldr	r3, [pc, #20]	; (800841c <std+0x38>)
 8008408:	6224      	str	r4, [r4, #32]
 800840a:	6263      	str	r3, [r4, #36]	; 0x24
 800840c:	4b04      	ldr	r3, [pc, #16]	; (8008420 <std+0x3c>)
 800840e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008410:	4b04      	ldr	r3, [pc, #16]	; (8008424 <std+0x40>)
 8008412:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008414:	4b04      	ldr	r3, [pc, #16]	; (8008428 <std+0x44>)
 8008416:	6323      	str	r3, [r4, #48]	; 0x30
 8008418:	bd10      	pop	{r4, pc}
 800841a:	bf00      	nop
 800841c:	080087bd 	.word	0x080087bd
 8008420:	080087df 	.word	0x080087df
 8008424:	08008817 	.word	0x08008817
 8008428:	0800883b 	.word	0x0800883b

0800842c <_cleanup_r>:
 800842c:	4901      	ldr	r1, [pc, #4]	; (8008434 <_cleanup_r+0x8>)
 800842e:	f000 b8af 	b.w	8008590 <_fwalk_reent>
 8008432:	bf00      	nop
 8008434:	0800836d 	.word	0x0800836d

08008438 <__sfmoreglue>:
 8008438:	2268      	movs	r2, #104	; 0x68
 800843a:	b570      	push	{r4, r5, r6, lr}
 800843c:	1e4d      	subs	r5, r1, #1
 800843e:	4355      	muls	r5, r2
 8008440:	460e      	mov	r6, r1
 8008442:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008446:	f7fc f8cf 	bl	80045e8 <_malloc_r>
 800844a:	4604      	mov	r4, r0
 800844c:	b140      	cbz	r0, 8008460 <__sfmoreglue+0x28>
 800844e:	2100      	movs	r1, #0
 8008450:	e9c0 1600 	strd	r1, r6, [r0]
 8008454:	300c      	adds	r0, #12
 8008456:	60a0      	str	r0, [r4, #8]
 8008458:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800845c:	f7fc f854 	bl	8004508 <memset>
 8008460:	4620      	mov	r0, r4
 8008462:	bd70      	pop	{r4, r5, r6, pc}

08008464 <__sfp_lock_acquire>:
 8008464:	4801      	ldr	r0, [pc, #4]	; (800846c <__sfp_lock_acquire+0x8>)
 8008466:	f000 b8b3 	b.w	80085d0 <__retarget_lock_acquire_recursive>
 800846a:	bf00      	nop
 800846c:	20000855 	.word	0x20000855

08008470 <__sfp_lock_release>:
 8008470:	4801      	ldr	r0, [pc, #4]	; (8008478 <__sfp_lock_release+0x8>)
 8008472:	f000 b8ae 	b.w	80085d2 <__retarget_lock_release_recursive>
 8008476:	bf00      	nop
 8008478:	20000855 	.word	0x20000855

0800847c <__sinit_lock_acquire>:
 800847c:	4801      	ldr	r0, [pc, #4]	; (8008484 <__sinit_lock_acquire+0x8>)
 800847e:	f000 b8a7 	b.w	80085d0 <__retarget_lock_acquire_recursive>
 8008482:	bf00      	nop
 8008484:	20000856 	.word	0x20000856

08008488 <__sinit_lock_release>:
 8008488:	4801      	ldr	r0, [pc, #4]	; (8008490 <__sinit_lock_release+0x8>)
 800848a:	f000 b8a2 	b.w	80085d2 <__retarget_lock_release_recursive>
 800848e:	bf00      	nop
 8008490:	20000856 	.word	0x20000856

08008494 <__sinit>:
 8008494:	b510      	push	{r4, lr}
 8008496:	4604      	mov	r4, r0
 8008498:	f7ff fff0 	bl	800847c <__sinit_lock_acquire>
 800849c:	69a3      	ldr	r3, [r4, #24]
 800849e:	b11b      	cbz	r3, 80084a8 <__sinit+0x14>
 80084a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a4:	f7ff bff0 	b.w	8008488 <__sinit_lock_release>
 80084a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084ac:	6523      	str	r3, [r4, #80]	; 0x50
 80084ae:	4b13      	ldr	r3, [pc, #76]	; (80084fc <__sinit+0x68>)
 80084b0:	4a13      	ldr	r2, [pc, #76]	; (8008500 <__sinit+0x6c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80084b6:	42a3      	cmp	r3, r4
 80084b8:	bf08      	it	eq
 80084ba:	2301      	moveq	r3, #1
 80084bc:	4620      	mov	r0, r4
 80084be:	bf08      	it	eq
 80084c0:	61a3      	streq	r3, [r4, #24]
 80084c2:	f000 f81f 	bl	8008504 <__sfp>
 80084c6:	6060      	str	r0, [r4, #4]
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 f81b 	bl	8008504 <__sfp>
 80084ce:	60a0      	str	r0, [r4, #8]
 80084d0:	4620      	mov	r0, r4
 80084d2:	f000 f817 	bl	8008504 <__sfp>
 80084d6:	2200      	movs	r2, #0
 80084d8:	2104      	movs	r1, #4
 80084da:	60e0      	str	r0, [r4, #12]
 80084dc:	6860      	ldr	r0, [r4, #4]
 80084de:	f7ff ff81 	bl	80083e4 <std>
 80084e2:	2201      	movs	r2, #1
 80084e4:	2109      	movs	r1, #9
 80084e6:	68a0      	ldr	r0, [r4, #8]
 80084e8:	f7ff ff7c 	bl	80083e4 <std>
 80084ec:	2202      	movs	r2, #2
 80084ee:	2112      	movs	r1, #18
 80084f0:	68e0      	ldr	r0, [r4, #12]
 80084f2:	f7ff ff77 	bl	80083e4 <std>
 80084f6:	2301      	movs	r3, #1
 80084f8:	61a3      	str	r3, [r4, #24]
 80084fa:	e7d1      	b.n	80084a0 <__sinit+0xc>
 80084fc:	0800aa9c 	.word	0x0800aa9c
 8008500:	0800842d 	.word	0x0800842d

08008504 <__sfp>:
 8008504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008506:	4607      	mov	r7, r0
 8008508:	f7ff ffac 	bl	8008464 <__sfp_lock_acquire>
 800850c:	4b1e      	ldr	r3, [pc, #120]	; (8008588 <__sfp+0x84>)
 800850e:	681e      	ldr	r6, [r3, #0]
 8008510:	69b3      	ldr	r3, [r6, #24]
 8008512:	b913      	cbnz	r3, 800851a <__sfp+0x16>
 8008514:	4630      	mov	r0, r6
 8008516:	f7ff ffbd 	bl	8008494 <__sinit>
 800851a:	3648      	adds	r6, #72	; 0x48
 800851c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008520:	3b01      	subs	r3, #1
 8008522:	d503      	bpl.n	800852c <__sfp+0x28>
 8008524:	6833      	ldr	r3, [r6, #0]
 8008526:	b30b      	cbz	r3, 800856c <__sfp+0x68>
 8008528:	6836      	ldr	r6, [r6, #0]
 800852a:	e7f7      	b.n	800851c <__sfp+0x18>
 800852c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008530:	b9d5      	cbnz	r5, 8008568 <__sfp+0x64>
 8008532:	4b16      	ldr	r3, [pc, #88]	; (800858c <__sfp+0x88>)
 8008534:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008538:	60e3      	str	r3, [r4, #12]
 800853a:	6665      	str	r5, [r4, #100]	; 0x64
 800853c:	f000 f847 	bl	80085ce <__retarget_lock_init_recursive>
 8008540:	f7ff ff96 	bl	8008470 <__sfp_lock_release>
 8008544:	2208      	movs	r2, #8
 8008546:	4629      	mov	r1, r5
 8008548:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800854c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008550:	6025      	str	r5, [r4, #0]
 8008552:	61a5      	str	r5, [r4, #24]
 8008554:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008558:	f7fb ffd6 	bl	8004508 <memset>
 800855c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008560:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008564:	4620      	mov	r0, r4
 8008566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008568:	3468      	adds	r4, #104	; 0x68
 800856a:	e7d9      	b.n	8008520 <__sfp+0x1c>
 800856c:	2104      	movs	r1, #4
 800856e:	4638      	mov	r0, r7
 8008570:	f7ff ff62 	bl	8008438 <__sfmoreglue>
 8008574:	4604      	mov	r4, r0
 8008576:	6030      	str	r0, [r6, #0]
 8008578:	2800      	cmp	r0, #0
 800857a:	d1d5      	bne.n	8008528 <__sfp+0x24>
 800857c:	f7ff ff78 	bl	8008470 <__sfp_lock_release>
 8008580:	230c      	movs	r3, #12
 8008582:	603b      	str	r3, [r7, #0]
 8008584:	e7ee      	b.n	8008564 <__sfp+0x60>
 8008586:	bf00      	nop
 8008588:	0800aa9c 	.word	0x0800aa9c
 800858c:	ffff0001 	.word	0xffff0001

08008590 <_fwalk_reent>:
 8008590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008594:	4606      	mov	r6, r0
 8008596:	4688      	mov	r8, r1
 8008598:	2700      	movs	r7, #0
 800859a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800859e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085a2:	f1b9 0901 	subs.w	r9, r9, #1
 80085a6:	d505      	bpl.n	80085b4 <_fwalk_reent+0x24>
 80085a8:	6824      	ldr	r4, [r4, #0]
 80085aa:	2c00      	cmp	r4, #0
 80085ac:	d1f7      	bne.n	800859e <_fwalk_reent+0xe>
 80085ae:	4638      	mov	r0, r7
 80085b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085b4:	89ab      	ldrh	r3, [r5, #12]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d907      	bls.n	80085ca <_fwalk_reent+0x3a>
 80085ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085be:	3301      	adds	r3, #1
 80085c0:	d003      	beq.n	80085ca <_fwalk_reent+0x3a>
 80085c2:	4629      	mov	r1, r5
 80085c4:	4630      	mov	r0, r6
 80085c6:	47c0      	blx	r8
 80085c8:	4307      	orrs	r7, r0
 80085ca:	3568      	adds	r5, #104	; 0x68
 80085cc:	e7e9      	b.n	80085a2 <_fwalk_reent+0x12>

080085ce <__retarget_lock_init_recursive>:
 80085ce:	4770      	bx	lr

080085d0 <__retarget_lock_acquire_recursive>:
 80085d0:	4770      	bx	lr

080085d2 <__retarget_lock_release_recursive>:
 80085d2:	4770      	bx	lr

080085d4 <__swhatbuf_r>:
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	460e      	mov	r6, r1
 80085d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085dc:	4614      	mov	r4, r2
 80085de:	2900      	cmp	r1, #0
 80085e0:	461d      	mov	r5, r3
 80085e2:	b096      	sub	sp, #88	; 0x58
 80085e4:	da08      	bge.n	80085f8 <__swhatbuf_r+0x24>
 80085e6:	2200      	movs	r2, #0
 80085e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80085ec:	602a      	str	r2, [r5, #0]
 80085ee:	061a      	lsls	r2, r3, #24
 80085f0:	d410      	bmi.n	8008614 <__swhatbuf_r+0x40>
 80085f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085f6:	e00e      	b.n	8008616 <__swhatbuf_r+0x42>
 80085f8:	466a      	mov	r2, sp
 80085fa:	f000 f945 	bl	8008888 <_fstat_r>
 80085fe:	2800      	cmp	r0, #0
 8008600:	dbf1      	blt.n	80085e6 <__swhatbuf_r+0x12>
 8008602:	9a01      	ldr	r2, [sp, #4]
 8008604:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008608:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800860c:	425a      	negs	r2, r3
 800860e:	415a      	adcs	r2, r3
 8008610:	602a      	str	r2, [r5, #0]
 8008612:	e7ee      	b.n	80085f2 <__swhatbuf_r+0x1e>
 8008614:	2340      	movs	r3, #64	; 0x40
 8008616:	2000      	movs	r0, #0
 8008618:	6023      	str	r3, [r4, #0]
 800861a:	b016      	add	sp, #88	; 0x58
 800861c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008620 <__smakebuf_r>:
 8008620:	898b      	ldrh	r3, [r1, #12]
 8008622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008624:	079d      	lsls	r5, r3, #30
 8008626:	4606      	mov	r6, r0
 8008628:	460c      	mov	r4, r1
 800862a:	d507      	bpl.n	800863c <__smakebuf_r+0x1c>
 800862c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	6123      	str	r3, [r4, #16]
 8008634:	2301      	movs	r3, #1
 8008636:	6163      	str	r3, [r4, #20]
 8008638:	b002      	add	sp, #8
 800863a:	bd70      	pop	{r4, r5, r6, pc}
 800863c:	466a      	mov	r2, sp
 800863e:	ab01      	add	r3, sp, #4
 8008640:	f7ff ffc8 	bl	80085d4 <__swhatbuf_r>
 8008644:	9900      	ldr	r1, [sp, #0]
 8008646:	4605      	mov	r5, r0
 8008648:	4630      	mov	r0, r6
 800864a:	f7fb ffcd 	bl	80045e8 <_malloc_r>
 800864e:	b948      	cbnz	r0, 8008664 <__smakebuf_r+0x44>
 8008650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008654:	059a      	lsls	r2, r3, #22
 8008656:	d4ef      	bmi.n	8008638 <__smakebuf_r+0x18>
 8008658:	f023 0303 	bic.w	r3, r3, #3
 800865c:	f043 0302 	orr.w	r3, r3, #2
 8008660:	81a3      	strh	r3, [r4, #12]
 8008662:	e7e3      	b.n	800862c <__smakebuf_r+0xc>
 8008664:	4b0d      	ldr	r3, [pc, #52]	; (800869c <__smakebuf_r+0x7c>)
 8008666:	62b3      	str	r3, [r6, #40]	; 0x28
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	6020      	str	r0, [r4, #0]
 800866c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008670:	81a3      	strh	r3, [r4, #12]
 8008672:	9b00      	ldr	r3, [sp, #0]
 8008674:	6120      	str	r0, [r4, #16]
 8008676:	6163      	str	r3, [r4, #20]
 8008678:	9b01      	ldr	r3, [sp, #4]
 800867a:	b15b      	cbz	r3, 8008694 <__smakebuf_r+0x74>
 800867c:	4630      	mov	r0, r6
 800867e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008682:	f000 f913 	bl	80088ac <_isatty_r>
 8008686:	b128      	cbz	r0, 8008694 <__smakebuf_r+0x74>
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	f023 0303 	bic.w	r3, r3, #3
 800868e:	f043 0301 	orr.w	r3, r3, #1
 8008692:	81a3      	strh	r3, [r4, #12]
 8008694:	89a0      	ldrh	r0, [r4, #12]
 8008696:	4305      	orrs	r5, r0
 8008698:	81a5      	strh	r5, [r4, #12]
 800869a:	e7cd      	b.n	8008638 <__smakebuf_r+0x18>
 800869c:	0800842d 	.word	0x0800842d

080086a0 <memmove>:
 80086a0:	4288      	cmp	r0, r1
 80086a2:	b510      	push	{r4, lr}
 80086a4:	eb01 0402 	add.w	r4, r1, r2
 80086a8:	d902      	bls.n	80086b0 <memmove+0x10>
 80086aa:	4284      	cmp	r4, r0
 80086ac:	4623      	mov	r3, r4
 80086ae:	d807      	bhi.n	80086c0 <memmove+0x20>
 80086b0:	1e43      	subs	r3, r0, #1
 80086b2:	42a1      	cmp	r1, r4
 80086b4:	d008      	beq.n	80086c8 <memmove+0x28>
 80086b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086be:	e7f8      	b.n	80086b2 <memmove+0x12>
 80086c0:	4601      	mov	r1, r0
 80086c2:	4402      	add	r2, r0
 80086c4:	428a      	cmp	r2, r1
 80086c6:	d100      	bne.n	80086ca <memmove+0x2a>
 80086c8:	bd10      	pop	{r4, pc}
 80086ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086d2:	e7f7      	b.n	80086c4 <memmove+0x24>

080086d4 <_realloc_r>:
 80086d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d8:	4680      	mov	r8, r0
 80086da:	4614      	mov	r4, r2
 80086dc:	460e      	mov	r6, r1
 80086de:	b921      	cbnz	r1, 80086ea <_realloc_r+0x16>
 80086e0:	4611      	mov	r1, r2
 80086e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086e6:	f7fb bf7f 	b.w	80045e8 <_malloc_r>
 80086ea:	b92a      	cbnz	r2, 80086f8 <_realloc_r+0x24>
 80086ec:	f7fb ff14 	bl	8004518 <_free_r>
 80086f0:	4625      	mov	r5, r4
 80086f2:	4628      	mov	r0, r5
 80086f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f8:	f000 f8fa 	bl	80088f0 <_malloc_usable_size_r>
 80086fc:	4284      	cmp	r4, r0
 80086fe:	4607      	mov	r7, r0
 8008700:	d802      	bhi.n	8008708 <_realloc_r+0x34>
 8008702:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008706:	d812      	bhi.n	800872e <_realloc_r+0x5a>
 8008708:	4621      	mov	r1, r4
 800870a:	4640      	mov	r0, r8
 800870c:	f7fb ff6c 	bl	80045e8 <_malloc_r>
 8008710:	4605      	mov	r5, r0
 8008712:	2800      	cmp	r0, #0
 8008714:	d0ed      	beq.n	80086f2 <_realloc_r+0x1e>
 8008716:	42bc      	cmp	r4, r7
 8008718:	4622      	mov	r2, r4
 800871a:	4631      	mov	r1, r6
 800871c:	bf28      	it	cs
 800871e:	463a      	movcs	r2, r7
 8008720:	f7fe fd18 	bl	8007154 <memcpy>
 8008724:	4631      	mov	r1, r6
 8008726:	4640      	mov	r0, r8
 8008728:	f7fb fef6 	bl	8004518 <_free_r>
 800872c:	e7e1      	b.n	80086f2 <_realloc_r+0x1e>
 800872e:	4635      	mov	r5, r6
 8008730:	e7df      	b.n	80086f2 <_realloc_r+0x1e>

08008732 <_raise_r>:
 8008732:	291f      	cmp	r1, #31
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4604      	mov	r4, r0
 8008738:	460d      	mov	r5, r1
 800873a:	d904      	bls.n	8008746 <_raise_r+0x14>
 800873c:	2316      	movs	r3, #22
 800873e:	6003      	str	r3, [r0, #0]
 8008740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008744:	bd38      	pop	{r3, r4, r5, pc}
 8008746:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008748:	b112      	cbz	r2, 8008750 <_raise_r+0x1e>
 800874a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800874e:	b94b      	cbnz	r3, 8008764 <_raise_r+0x32>
 8008750:	4620      	mov	r0, r4
 8008752:	f000 f831 	bl	80087b8 <_getpid_r>
 8008756:	462a      	mov	r2, r5
 8008758:	4601      	mov	r1, r0
 800875a:	4620      	mov	r0, r4
 800875c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008760:	f000 b818 	b.w	8008794 <_kill_r>
 8008764:	2b01      	cmp	r3, #1
 8008766:	d00a      	beq.n	800877e <_raise_r+0x4c>
 8008768:	1c59      	adds	r1, r3, #1
 800876a:	d103      	bne.n	8008774 <_raise_r+0x42>
 800876c:	2316      	movs	r3, #22
 800876e:	6003      	str	r3, [r0, #0]
 8008770:	2001      	movs	r0, #1
 8008772:	e7e7      	b.n	8008744 <_raise_r+0x12>
 8008774:	2400      	movs	r4, #0
 8008776:	4628      	mov	r0, r5
 8008778:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800877c:	4798      	blx	r3
 800877e:	2000      	movs	r0, #0
 8008780:	e7e0      	b.n	8008744 <_raise_r+0x12>
	...

08008784 <raise>:
 8008784:	4b02      	ldr	r3, [pc, #8]	; (8008790 <raise+0xc>)
 8008786:	4601      	mov	r1, r0
 8008788:	6818      	ldr	r0, [r3, #0]
 800878a:	f7ff bfd2 	b.w	8008732 <_raise_r>
 800878e:	bf00      	nop
 8008790:	20000020 	.word	0x20000020

08008794 <_kill_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	2300      	movs	r3, #0
 8008798:	4d06      	ldr	r5, [pc, #24]	; (80087b4 <_kill_r+0x20>)
 800879a:	4604      	mov	r4, r0
 800879c:	4608      	mov	r0, r1
 800879e:	4611      	mov	r1, r2
 80087a0:	602b      	str	r3, [r5, #0]
 80087a2:	f7f9 fbe6 	bl	8001f72 <_kill>
 80087a6:	1c43      	adds	r3, r0, #1
 80087a8:	d102      	bne.n	80087b0 <_kill_r+0x1c>
 80087aa:	682b      	ldr	r3, [r5, #0]
 80087ac:	b103      	cbz	r3, 80087b0 <_kill_r+0x1c>
 80087ae:	6023      	str	r3, [r4, #0]
 80087b0:	bd38      	pop	{r3, r4, r5, pc}
 80087b2:	bf00      	nop
 80087b4:	20000850 	.word	0x20000850

080087b8 <_getpid_r>:
 80087b8:	f7f9 bbd4 	b.w	8001f64 <_getpid>

080087bc <__sread>:
 80087bc:	b510      	push	{r4, lr}
 80087be:	460c      	mov	r4, r1
 80087c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c4:	f000 f89c 	bl	8008900 <_read_r>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	bfab      	itete	ge
 80087cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087ce:	89a3      	ldrhlt	r3, [r4, #12]
 80087d0:	181b      	addge	r3, r3, r0
 80087d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087d6:	bfac      	ite	ge
 80087d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80087da:	81a3      	strhlt	r3, [r4, #12]
 80087dc:	bd10      	pop	{r4, pc}

080087de <__swrite>:
 80087de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087e2:	461f      	mov	r7, r3
 80087e4:	898b      	ldrh	r3, [r1, #12]
 80087e6:	4605      	mov	r5, r0
 80087e8:	05db      	lsls	r3, r3, #23
 80087ea:	460c      	mov	r4, r1
 80087ec:	4616      	mov	r6, r2
 80087ee:	d505      	bpl.n	80087fc <__swrite+0x1e>
 80087f0:	2302      	movs	r3, #2
 80087f2:	2200      	movs	r2, #0
 80087f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f8:	f000 f868 	bl	80088cc <_lseek_r>
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	4632      	mov	r2, r6
 8008800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008804:	81a3      	strh	r3, [r4, #12]
 8008806:	4628      	mov	r0, r5
 8008808:	463b      	mov	r3, r7
 800880a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800880e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008812:	f000 b817 	b.w	8008844 <_write_r>

08008816 <__sseek>:
 8008816:	b510      	push	{r4, lr}
 8008818:	460c      	mov	r4, r1
 800881a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800881e:	f000 f855 	bl	80088cc <_lseek_r>
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	bf15      	itete	ne
 8008828:	6560      	strne	r0, [r4, #84]	; 0x54
 800882a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800882e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008832:	81a3      	strheq	r3, [r4, #12]
 8008834:	bf18      	it	ne
 8008836:	81a3      	strhne	r3, [r4, #12]
 8008838:	bd10      	pop	{r4, pc}

0800883a <__sclose>:
 800883a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800883e:	f000 b813 	b.w	8008868 <_close_r>
	...

08008844 <_write_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4604      	mov	r4, r0
 8008848:	4608      	mov	r0, r1
 800884a:	4611      	mov	r1, r2
 800884c:	2200      	movs	r2, #0
 800884e:	4d05      	ldr	r5, [pc, #20]	; (8008864 <_write_r+0x20>)
 8008850:	602a      	str	r2, [r5, #0]
 8008852:	461a      	mov	r2, r3
 8008854:	f7f9 fbc4 	bl	8001fe0 <_write>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_write_r+0x1e>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b103      	cbz	r3, 8008862 <_write_r+0x1e>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20000850 	.word	0x20000850

08008868 <_close_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	2300      	movs	r3, #0
 800886c:	4d05      	ldr	r5, [pc, #20]	; (8008884 <_close_r+0x1c>)
 800886e:	4604      	mov	r4, r0
 8008870:	4608      	mov	r0, r1
 8008872:	602b      	str	r3, [r5, #0]
 8008874:	f7f9 fbd0 	bl	8002018 <_close>
 8008878:	1c43      	adds	r3, r0, #1
 800887a:	d102      	bne.n	8008882 <_close_r+0x1a>
 800887c:	682b      	ldr	r3, [r5, #0]
 800887e:	b103      	cbz	r3, 8008882 <_close_r+0x1a>
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	bd38      	pop	{r3, r4, r5, pc}
 8008884:	20000850 	.word	0x20000850

08008888 <_fstat_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	2300      	movs	r3, #0
 800888c:	4d06      	ldr	r5, [pc, #24]	; (80088a8 <_fstat_r+0x20>)
 800888e:	4604      	mov	r4, r0
 8008890:	4608      	mov	r0, r1
 8008892:	4611      	mov	r1, r2
 8008894:	602b      	str	r3, [r5, #0]
 8008896:	f7f9 fbca 	bl	800202e <_fstat>
 800889a:	1c43      	adds	r3, r0, #1
 800889c:	d102      	bne.n	80088a4 <_fstat_r+0x1c>
 800889e:	682b      	ldr	r3, [r5, #0]
 80088a0:	b103      	cbz	r3, 80088a4 <_fstat_r+0x1c>
 80088a2:	6023      	str	r3, [r4, #0]
 80088a4:	bd38      	pop	{r3, r4, r5, pc}
 80088a6:	bf00      	nop
 80088a8:	20000850 	.word	0x20000850

080088ac <_isatty_r>:
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	2300      	movs	r3, #0
 80088b0:	4d05      	ldr	r5, [pc, #20]	; (80088c8 <_isatty_r+0x1c>)
 80088b2:	4604      	mov	r4, r0
 80088b4:	4608      	mov	r0, r1
 80088b6:	602b      	str	r3, [r5, #0]
 80088b8:	f7f9 fbc8 	bl	800204c <_isatty>
 80088bc:	1c43      	adds	r3, r0, #1
 80088be:	d102      	bne.n	80088c6 <_isatty_r+0x1a>
 80088c0:	682b      	ldr	r3, [r5, #0]
 80088c2:	b103      	cbz	r3, 80088c6 <_isatty_r+0x1a>
 80088c4:	6023      	str	r3, [r4, #0]
 80088c6:	bd38      	pop	{r3, r4, r5, pc}
 80088c8:	20000850 	.word	0x20000850

080088cc <_lseek_r>:
 80088cc:	b538      	push	{r3, r4, r5, lr}
 80088ce:	4604      	mov	r4, r0
 80088d0:	4608      	mov	r0, r1
 80088d2:	4611      	mov	r1, r2
 80088d4:	2200      	movs	r2, #0
 80088d6:	4d05      	ldr	r5, [pc, #20]	; (80088ec <_lseek_r+0x20>)
 80088d8:	602a      	str	r2, [r5, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	f7f9 fbc0 	bl	8002060 <_lseek>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d102      	bne.n	80088ea <_lseek_r+0x1e>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	b103      	cbz	r3, 80088ea <_lseek_r+0x1e>
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	20000850 	.word	0x20000850

080088f0 <_malloc_usable_size_r>:
 80088f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088f4:	1f18      	subs	r0, r3, #4
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	bfbc      	itt	lt
 80088fa:	580b      	ldrlt	r3, [r1, r0]
 80088fc:	18c0      	addlt	r0, r0, r3
 80088fe:	4770      	bx	lr

08008900 <_read_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	4604      	mov	r4, r0
 8008904:	4608      	mov	r0, r1
 8008906:	4611      	mov	r1, r2
 8008908:	2200      	movs	r2, #0
 800890a:	4d05      	ldr	r5, [pc, #20]	; (8008920 <_read_r+0x20>)
 800890c:	602a      	str	r2, [r5, #0]
 800890e:	461a      	mov	r2, r3
 8008910:	f7f9 fb49 	bl	8001fa6 <_read>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	d102      	bne.n	800891e <_read_r+0x1e>
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	b103      	cbz	r3, 800891e <_read_r+0x1e>
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	20000850 	.word	0x20000850

08008924 <_init>:
 8008924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008926:	bf00      	nop
 8008928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892a:	bc08      	pop	{r3}
 800892c:	469e      	mov	lr, r3
 800892e:	4770      	bx	lr

08008930 <_fini>:
 8008930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008932:	bf00      	nop
 8008934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008936:	bc08      	pop	{r3}
 8008938:	469e      	mov	lr, r3
 800893a:	4770      	bx	lr
