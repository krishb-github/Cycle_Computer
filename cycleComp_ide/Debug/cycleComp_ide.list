
cycleComp_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002530  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d98  0800263c  0800263c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d4  080033d4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080033d4  080033d4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033d4  080033d4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d4  080033d4  000133d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080033dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000014  080033f0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  080033f0  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d6d  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001812  00000000  00000000  00028daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002a5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002af78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017034  00000000  00000000  0002b8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b2ce  00000000  00000000  000428f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083b58  00000000  00000000  0004dbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d171a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b4  00000000  00000000  000d176c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08002624 	.word	0x08002624

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08002624 	.word	0x08002624

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fcec 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f824 	bl	80001a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8be 	bl	80002d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015c:	f000 f864 	bl	8000228 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f890 	bl	8000284 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();  // initialise
 8000164:	f000 f926 	bl	80003b4 <SSD1306_Init>

  /// lets print some string

  SSD1306_GotoXY (0,0);
 8000168:	2100      	movs	r1, #0
 800016a:	2000      	movs	r0, #0
 800016c:	f000 fa8a 	bl	8000684 <SSD1306_GotoXY>
  SSD1306_Puts ("AKIRA KRISH", &Font_11x18, 1);
 8000170:	2201      	movs	r2, #1
 8000172:	4908      	ldr	r1, [pc, #32]	; (8000194 <main+0x48>)
 8000174:	4808      	ldr	r0, [pc, #32]	; (8000198 <main+0x4c>)
 8000176:	f000 fb1b 	bl	80007b0 <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 800017a:	211e      	movs	r1, #30
 800017c:	200a      	movs	r0, #10
 800017e:	f000 fa81 	bl	8000684 <SSD1306_GotoXY>
  SSD1306_Puts ("RATHE", &Font_11x18, 1);
 8000182:	2201      	movs	r2, #1
 8000184:	4903      	ldr	r1, [pc, #12]	; (8000194 <main+0x48>)
 8000186:	4805      	ldr	r0, [pc, #20]	; (800019c <main+0x50>)
 8000188:	f000 fb12 	bl	80007b0 <SSD1306_Puts>
  SSD1306_UpdateScreen(); //display
 800018c:	f000 f9d6 	bl	800053c <SSD1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000190:	e7fe      	b.n	8000190 <main+0x44>
 8000192:	bf00      	nop
 8000194:	20000000 	.word	0x20000000
 8000198:	0800263c 	.word	0x0800263c
 800019c:	08002648 	.word	0x08002648

080001a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b090      	sub	sp, #64	; 0x40
 80001a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a6:	f107 0318 	add.w	r3, r7, #24
 80001aa:	2228      	movs	r2, #40	; 0x28
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f002 fa30 	bl	8002614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]
 80001c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c2:	2301      	movs	r3, #1
 80001c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001cc:	2300      	movs	r3, #0
 80001ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d0:	2301      	movs	r3, #1
 80001d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d4:	2302      	movs	r3, #2
 80001d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80001de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80001e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e4:	f107 0318 	add.w	r3, r7, #24
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fcf9 	bl	8001be0 <HAL_RCC_OscConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001f4:	f000 f8d8 	bl	80003a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f8:	230f      	movs	r3, #15
 80001fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fc:	2302      	movs	r3, #2
 80001fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2101      	movs	r1, #1
 8000210:	4618      	mov	r0, r3
 8000212:	f001 ff67 	bl	80020e4 <HAL_RCC_ClockConfig>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800021c:	f000 f8c4 	bl	80003a8 <Error_Handler>
  }
}
 8000220:	bf00      	nop
 8000222:	3740      	adds	r7, #64	; 0x40
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800022c:	4b12      	ldr	r3, [pc, #72]	; (8000278 <MX_I2C1_Init+0x50>)
 800022e:	4a13      	ldr	r2, [pc, #76]	; (800027c <MX_I2C1_Init+0x54>)
 8000230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000232:	4b11      	ldr	r3, [pc, #68]	; (8000278 <MX_I2C1_Init+0x50>)
 8000234:	4a12      	ldr	r2, [pc, #72]	; (8000280 <MX_I2C1_Init+0x58>)
 8000236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000238:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <MX_I2C1_Init+0x50>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800023e:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <MX_I2C1_Init+0x50>)
 8000240:	2200      	movs	r2, #0
 8000242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <MX_I2C1_Init+0x50>)
 8000246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800024a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <MX_I2C1_Init+0x50>)
 800024e:	2200      	movs	r2, #0
 8000250:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000252:	4b09      	ldr	r3, [pc, #36]	; (8000278 <MX_I2C1_Init+0x50>)
 8000254:	2200      	movs	r2, #0
 8000256:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000258:	4b07      	ldr	r3, [pc, #28]	; (8000278 <MX_I2C1_Init+0x50>)
 800025a:	2200      	movs	r2, #0
 800025c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <MX_I2C1_Init+0x50>)
 8000260:	2200      	movs	r2, #0
 8000262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000264:	4804      	ldr	r0, [pc, #16]	; (8000278 <MX_I2C1_Init+0x50>)
 8000266:	f000 ff43 	bl	80010f0 <HAL_I2C_Init>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000270:	f000 f89a 	bl	80003a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000030 	.word	0x20000030
 800027c:	40005400 	.word	0x40005400
 8000280:	00061a80 	.word	0x00061a80

08000284 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000288:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 800028a:	4a12      	ldr	r2, [pc, #72]	; (80002d4 <MX_USART1_UART_Init+0x50>)
 800028c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800028e:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 8000290:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000294:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 8000298:	2200      	movs	r2, #0
 800029a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 80002aa:	220c      	movs	r2, #12
 80002ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ba:	4805      	ldr	r0, [pc, #20]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 80002bc:	f002 f8aa 	bl	8002414 <HAL_UART_Init>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002c6:	f000 f86f 	bl	80003a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000084 	.word	0x20000084
 80002d4:	40013800 	.word	0x40013800

080002d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0310 	add.w	r3, r7, #16
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ec:	4b2a      	ldr	r3, [pc, #168]	; (8000398 <MX_GPIO_Init+0xc0>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a29      	ldr	r2, [pc, #164]	; (8000398 <MX_GPIO_Init+0xc0>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b27      	ldr	r3, [pc, #156]	; (8000398 <MX_GPIO_Init+0xc0>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0310 	and.w	r3, r3, #16
 8000300:	60fb      	str	r3, [r7, #12]
 8000302:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000304:	4b24      	ldr	r3, [pc, #144]	; (8000398 <MX_GPIO_Init+0xc0>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a23      	ldr	r2, [pc, #140]	; (8000398 <MX_GPIO_Init+0xc0>)
 800030a:	f043 0320 	orr.w	r3, r3, #32
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b21      	ldr	r3, [pc, #132]	; (8000398 <MX_GPIO_Init+0xc0>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0320 	and.w	r3, r3, #32
 8000318:	60bb      	str	r3, [r7, #8]
 800031a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031c:	4b1e      	ldr	r3, [pc, #120]	; (8000398 <MX_GPIO_Init+0xc0>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a1d      	ldr	r2, [pc, #116]	; (8000398 <MX_GPIO_Init+0xc0>)
 8000322:	f043 0304 	orr.w	r3, r3, #4
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <MX_GPIO_Init+0xc0>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0304 	and.w	r3, r3, #4
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000334:	4b18      	ldr	r3, [pc, #96]	; (8000398 <MX_GPIO_Init+0xc0>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a17      	ldr	r2, [pc, #92]	; (8000398 <MX_GPIO_Init+0xc0>)
 800033a:	f043 0308 	orr.w	r3, r3, #8
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b15      	ldr	r3, [pc, #84]	; (8000398 <MX_GPIO_Init+0xc0>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0308 	and.w	r3, r3, #8
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000352:	4812      	ldr	r0, [pc, #72]	; (800039c <MX_GPIO_Init+0xc4>)
 8000354:	f000 feb4 	bl	80010c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800035c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035e:	2301      	movs	r3, #1
 8000360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000366:	2302      	movs	r3, #2
 8000368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	4619      	mov	r1, r3
 8000370:	480a      	ldr	r0, [pc, #40]	; (800039c <MX_GPIO_Init+0xc4>)
 8000372:	f000 fd21 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : sp_Pin sm_Pin sw_Pin */
  GPIO_InitStruct.Pin = sp_Pin|sm_Pin|sw_Pin;
 8000376:	230e      	movs	r3, #14
 8000378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_GPIO_Init+0xc8>)
 800037c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	4619      	mov	r1, r3
 8000388:	4806      	ldr	r0, [pc, #24]	; (80003a4 <MX_GPIO_Init+0xcc>)
 800038a:	f000 fd15 	bl	8000db8 <HAL_GPIO_Init>

}
 800038e:	bf00      	nop
 8000390:	3720      	adds	r7, #32
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000
 800039c:	40011000 	.word	0x40011000
 80003a0:	10110000 	.word	0x10110000
 80003a4:	40010800 	.word	0x40010800

080003a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ac:	b672      	cpsid	i
}
 80003ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <Error_Handler+0x8>
	...

080003b4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80003ba:	f000 fa1f 	bl	80007fc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80003be:	f644 6320 	movw	r3, #20000	; 0x4e20
 80003c2:	2201      	movs	r2, #1
 80003c4:	2178      	movs	r1, #120	; 0x78
 80003c6:	485b      	ldr	r0, [pc, #364]	; (8000534 <SSD1306_Init+0x180>)
 80003c8:	f001 f8d4 	bl	8001574 <HAL_I2C_IsDeviceReady>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	e0a9      	b.n	800052a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80003d6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80003da:	607b      	str	r3, [r7, #4]
	while(p>0)
 80003dc:	e002      	b.n	80003e4 <SSD1306_Init+0x30>
		p--;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	3b01      	subs	r3, #1
 80003e2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1f9      	bne.n	80003de <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80003ea:	22ae      	movs	r2, #174	; 0xae
 80003ec:	2100      	movs	r1, #0
 80003ee:	2078      	movs	r0, #120	; 0x78
 80003f0:	f000 fa7e 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80003f4:	2220      	movs	r2, #32
 80003f6:	2100      	movs	r1, #0
 80003f8:	2078      	movs	r0, #120	; 0x78
 80003fa:	f000 fa79 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80003fe:	2210      	movs	r2, #16
 8000400:	2100      	movs	r1, #0
 8000402:	2078      	movs	r0, #120	; 0x78
 8000404:	f000 fa74 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000408:	22b0      	movs	r2, #176	; 0xb0
 800040a:	2100      	movs	r1, #0
 800040c:	2078      	movs	r0, #120	; 0x78
 800040e:	f000 fa6f 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000412:	22c8      	movs	r2, #200	; 0xc8
 8000414:	2100      	movs	r1, #0
 8000416:	2078      	movs	r0, #120	; 0x78
 8000418:	f000 fa6a 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800041c:	2200      	movs	r2, #0
 800041e:	2100      	movs	r1, #0
 8000420:	2078      	movs	r0, #120	; 0x78
 8000422:	f000 fa65 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000426:	2210      	movs	r2, #16
 8000428:	2100      	movs	r1, #0
 800042a:	2078      	movs	r0, #120	; 0x78
 800042c:	f000 fa60 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000430:	2240      	movs	r2, #64	; 0x40
 8000432:	2100      	movs	r1, #0
 8000434:	2078      	movs	r0, #120	; 0x78
 8000436:	f000 fa5b 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800043a:	2281      	movs	r2, #129	; 0x81
 800043c:	2100      	movs	r1, #0
 800043e:	2078      	movs	r0, #120	; 0x78
 8000440:	f000 fa56 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000444:	22ff      	movs	r2, #255	; 0xff
 8000446:	2100      	movs	r1, #0
 8000448:	2078      	movs	r0, #120	; 0x78
 800044a:	f000 fa51 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800044e:	22a1      	movs	r2, #161	; 0xa1
 8000450:	2100      	movs	r1, #0
 8000452:	2078      	movs	r0, #120	; 0x78
 8000454:	f000 fa4c 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000458:	22a6      	movs	r2, #166	; 0xa6
 800045a:	2100      	movs	r1, #0
 800045c:	2078      	movs	r0, #120	; 0x78
 800045e:	f000 fa47 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000462:	22a8      	movs	r2, #168	; 0xa8
 8000464:	2100      	movs	r1, #0
 8000466:	2078      	movs	r0, #120	; 0x78
 8000468:	f000 fa42 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800046c:	223f      	movs	r2, #63	; 0x3f
 800046e:	2100      	movs	r1, #0
 8000470:	2078      	movs	r0, #120	; 0x78
 8000472:	f000 fa3d 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000476:	22a4      	movs	r2, #164	; 0xa4
 8000478:	2100      	movs	r1, #0
 800047a:	2078      	movs	r0, #120	; 0x78
 800047c:	f000 fa38 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000480:	22d3      	movs	r2, #211	; 0xd3
 8000482:	2100      	movs	r1, #0
 8000484:	2078      	movs	r0, #120	; 0x78
 8000486:	f000 fa33 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	2078      	movs	r0, #120	; 0x78
 8000490:	f000 fa2e 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000494:	22d5      	movs	r2, #213	; 0xd5
 8000496:	2100      	movs	r1, #0
 8000498:	2078      	movs	r0, #120	; 0x78
 800049a:	f000 fa29 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800049e:	22f0      	movs	r2, #240	; 0xf0
 80004a0:	2100      	movs	r1, #0
 80004a2:	2078      	movs	r0, #120	; 0x78
 80004a4:	f000 fa24 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80004a8:	22d9      	movs	r2, #217	; 0xd9
 80004aa:	2100      	movs	r1, #0
 80004ac:	2078      	movs	r0, #120	; 0x78
 80004ae:	f000 fa1f 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80004b2:	2222      	movs	r2, #34	; 0x22
 80004b4:	2100      	movs	r1, #0
 80004b6:	2078      	movs	r0, #120	; 0x78
 80004b8:	f000 fa1a 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80004bc:	22da      	movs	r2, #218	; 0xda
 80004be:	2100      	movs	r1, #0
 80004c0:	2078      	movs	r0, #120	; 0x78
 80004c2:	f000 fa15 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80004c6:	2212      	movs	r2, #18
 80004c8:	2100      	movs	r1, #0
 80004ca:	2078      	movs	r0, #120	; 0x78
 80004cc:	f000 fa10 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80004d0:	22db      	movs	r2, #219	; 0xdb
 80004d2:	2100      	movs	r1, #0
 80004d4:	2078      	movs	r0, #120	; 0x78
 80004d6:	f000 fa0b 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80004da:	2220      	movs	r2, #32
 80004dc:	2100      	movs	r1, #0
 80004de:	2078      	movs	r0, #120	; 0x78
 80004e0:	f000 fa06 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80004e4:	228d      	movs	r2, #141	; 0x8d
 80004e6:	2100      	movs	r1, #0
 80004e8:	2078      	movs	r0, #120	; 0x78
 80004ea:	f000 fa01 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80004ee:	2214      	movs	r2, #20
 80004f0:	2100      	movs	r1, #0
 80004f2:	2078      	movs	r0, #120	; 0x78
 80004f4:	f000 f9fc 	bl	80008f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80004f8:	22af      	movs	r2, #175	; 0xaf
 80004fa:	2100      	movs	r1, #0
 80004fc:	2078      	movs	r0, #120	; 0x78
 80004fe:	f000 f9f7 	bl	80008f0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000502:	222e      	movs	r2, #46	; 0x2e
 8000504:	2100      	movs	r1, #0
 8000506:	2078      	movs	r0, #120	; 0x78
 8000508:	f000 f9f2 	bl	80008f0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800050c:	2000      	movs	r0, #0
 800050e:	f000 f843 	bl	8000598 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000512:	f000 f813 	bl	800053c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <SSD1306_Init+0x184>)
 8000518:	2200      	movs	r2, #0
 800051a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <SSD1306_Init+0x184>)
 800051e:	2200      	movs	r2, #0
 8000520:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <SSD1306_Init+0x184>)
 8000524:	2201      	movs	r2, #1
 8000526:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000528:	2301      	movs	r3, #1
}
 800052a:	4618      	mov	r0, r3
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000030 	.word	0x20000030
 8000538:	200004c8 	.word	0x200004c8

0800053c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000542:	2300      	movs	r3, #0
 8000544:	71fb      	strb	r3, [r7, #7]
 8000546:	e01d      	b.n	8000584 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	3b50      	subs	r3, #80	; 0x50
 800054c:	b2db      	uxtb	r3, r3
 800054e:	461a      	mov	r2, r3
 8000550:	2100      	movs	r1, #0
 8000552:	2078      	movs	r0, #120	; 0x78
 8000554:	f000 f9cc 	bl	80008f0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000558:	2200      	movs	r2, #0
 800055a:	2100      	movs	r1, #0
 800055c:	2078      	movs	r0, #120	; 0x78
 800055e:	f000 f9c7 	bl	80008f0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000562:	2210      	movs	r2, #16
 8000564:	2100      	movs	r1, #0
 8000566:	2078      	movs	r0, #120	; 0x78
 8000568:	f000 f9c2 	bl	80008f0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	01db      	lsls	r3, r3, #7
 8000570:	4a08      	ldr	r2, [pc, #32]	; (8000594 <SSD1306_UpdateScreen+0x58>)
 8000572:	441a      	add	r2, r3
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	2140      	movs	r1, #64	; 0x40
 8000578:	2078      	movs	r0, #120	; 0x78
 800057a:	f000 f953 	bl	8000824 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	3301      	adds	r3, #1
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	2b07      	cmp	r3, #7
 8000588:	d9de      	bls.n	8000548 <SSD1306_UpdateScreen+0xc>
	}
}
 800058a:	bf00      	nop
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200000c8 	.word	0x200000c8

08000598 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d101      	bne.n	80005ac <SSD1306_Fill+0x14>
 80005a8:	2300      	movs	r3, #0
 80005aa:	e000      	b.n	80005ae <SSD1306_Fill+0x16>
 80005ac:	23ff      	movs	r3, #255	; 0xff
 80005ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005b2:	4619      	mov	r1, r3
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <SSD1306_Fill+0x2c>)
 80005b6:	f002 f82d 	bl	8002614 <memset>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200000c8 	.word	0x200000c8

080005c8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]
 80005d2:	460b      	mov	r3, r1
 80005d4:	80bb      	strh	r3, [r7, #4]
 80005d6:	4613      	mov	r3, r2
 80005d8:	70fb      	strb	r3, [r7, #3]
	if (
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	2b7f      	cmp	r3, #127	; 0x7f
 80005de:	d848      	bhi.n	8000672 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80005e0:	88bb      	ldrh	r3, [r7, #4]
 80005e2:	2b3f      	cmp	r3, #63	; 0x3f
 80005e4:	d845      	bhi.n	8000672 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <SSD1306_DrawPixel+0xb4>)
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d006      	beq.n	80005fc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80005ee:	78fb      	ldrb	r3, [r7, #3]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	bf0c      	ite	eq
 80005f4:	2301      	moveq	r3, #1
 80005f6:	2300      	movne	r3, #0
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d11a      	bne.n	8000638 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000602:	88fa      	ldrh	r2, [r7, #6]
 8000604:	88bb      	ldrh	r3, [r7, #4]
 8000606:	08db      	lsrs	r3, r3, #3
 8000608:	b298      	uxth	r0, r3
 800060a:	4603      	mov	r3, r0
 800060c:	01db      	lsls	r3, r3, #7
 800060e:	4413      	add	r3, r2
 8000610:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <SSD1306_DrawPixel+0xb8>)
 8000612:	5cd3      	ldrb	r3, [r2, r3]
 8000614:	b25a      	sxtb	r2, r3
 8000616:	88bb      	ldrh	r3, [r7, #4]
 8000618:	f003 0307 	and.w	r3, r3, #7
 800061c:	2101      	movs	r1, #1
 800061e:	fa01 f303 	lsl.w	r3, r1, r3
 8000622:	b25b      	sxtb	r3, r3
 8000624:	4313      	orrs	r3, r2
 8000626:	b259      	sxtb	r1, r3
 8000628:	88fa      	ldrh	r2, [r7, #6]
 800062a:	4603      	mov	r3, r0
 800062c:	01db      	lsls	r3, r3, #7
 800062e:	4413      	add	r3, r2
 8000630:	b2c9      	uxtb	r1, r1
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <SSD1306_DrawPixel+0xb8>)
 8000634:	54d1      	strb	r1, [r2, r3]
 8000636:	e01d      	b.n	8000674 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000638:	88fa      	ldrh	r2, [r7, #6]
 800063a:	88bb      	ldrh	r3, [r7, #4]
 800063c:	08db      	lsrs	r3, r3, #3
 800063e:	b298      	uxth	r0, r3
 8000640:	4603      	mov	r3, r0
 8000642:	01db      	lsls	r3, r3, #7
 8000644:	4413      	add	r3, r2
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <SSD1306_DrawPixel+0xb8>)
 8000648:	5cd3      	ldrb	r3, [r2, r3]
 800064a:	b25a      	sxtb	r2, r3
 800064c:	88bb      	ldrh	r3, [r7, #4]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	2101      	movs	r1, #1
 8000654:	fa01 f303 	lsl.w	r3, r1, r3
 8000658:	b25b      	sxtb	r3, r3
 800065a:	43db      	mvns	r3, r3
 800065c:	b25b      	sxtb	r3, r3
 800065e:	4013      	ands	r3, r2
 8000660:	b259      	sxtb	r1, r3
 8000662:	88fa      	ldrh	r2, [r7, #6]
 8000664:	4603      	mov	r3, r0
 8000666:	01db      	lsls	r3, r3, #7
 8000668:	4413      	add	r3, r2
 800066a:	b2c9      	uxtb	r1, r1
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <SSD1306_DrawPixel+0xb8>)
 800066e:	54d1      	strb	r1, [r2, r3]
 8000670:	e000      	b.n	8000674 <SSD1306_DrawPixel+0xac>
		return;
 8000672:	bf00      	nop
	}
}
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	200004c8 	.word	0x200004c8
 8000680:	200000c8 	.word	0x200000c8

08000684 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	80fb      	strh	r3, [r7, #6]
 8000690:	4613      	mov	r3, r2
 8000692:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000694:	4a05      	ldr	r2, [pc, #20]	; (80006ac <SSD1306_GotoXY+0x28>)
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800069a:	4a04      	ldr	r2, [pc, #16]	; (80006ac <SSD1306_GotoXY+0x28>)
 800069c:	88bb      	ldrh	r3, [r7, #4]
 800069e:	8053      	strh	r3, [r2, #2]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	200004c8 	.word	0x200004c8

080006b0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	6039      	str	r1, [r7, #0]
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	4613      	mov	r3, r2
 80006be:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80006c0:	4b3a      	ldr	r3, [pc, #232]	; (80007ac <SSD1306_Putc+0xfc>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	4413      	add	r3, r2
	if (
 80006cc:	2b7f      	cmp	r3, #127	; 0x7f
 80006ce:	dc07      	bgt.n	80006e0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80006d0:	4b36      	ldr	r3, [pc, #216]	; (80007ac <SSD1306_Putc+0xfc>)
 80006d2:	885b      	ldrh	r3, [r3, #2]
 80006d4:	461a      	mov	r2, r3
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	785b      	ldrb	r3, [r3, #1]
 80006da:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80006dc:	2b3f      	cmp	r3, #63	; 0x3f
 80006de:	dd01      	ble.n	80006e4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	e05e      	b.n	80007a2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	e04b      	b.n	8000782 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	685a      	ldr	r2, [r3, #4]
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	3b20      	subs	r3, #32
 80006f2:	6839      	ldr	r1, [r7, #0]
 80006f4:	7849      	ldrb	r1, [r1, #1]
 80006f6:	fb01 f303 	mul.w	r3, r1, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	440b      	add	r3, r1
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4413      	add	r3, r2
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	e030      	b.n	8000770 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d010      	beq.n	8000740 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <SSD1306_Putc+0xfc>)
 8000720:	881a      	ldrh	r2, [r3, #0]
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	b29b      	uxth	r3, r3
 8000726:	4413      	add	r3, r2
 8000728:	b298      	uxth	r0, r3
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <SSD1306_Putc+0xfc>)
 800072c:	885a      	ldrh	r2, [r3, #2]
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	b29b      	uxth	r3, r3
 8000732:	4413      	add	r3, r2
 8000734:	b29b      	uxth	r3, r3
 8000736:	79ba      	ldrb	r2, [r7, #6]
 8000738:	4619      	mov	r1, r3
 800073a:	f7ff ff45 	bl	80005c8 <SSD1306_DrawPixel>
 800073e:	e014      	b.n	800076a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <SSD1306_Putc+0xfc>)
 8000742:	881a      	ldrh	r2, [r3, #0]
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	b29b      	uxth	r3, r3
 8000748:	4413      	add	r3, r2
 800074a:	b298      	uxth	r0, r3
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <SSD1306_Putc+0xfc>)
 800074e:	885a      	ldrh	r2, [r3, #2]
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	b29b      	uxth	r3, r3
 8000754:	4413      	add	r3, r2
 8000756:	b299      	uxth	r1, r3
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	2b00      	cmp	r3, #0
 800075c:	bf0c      	ite	eq
 800075e:	2301      	moveq	r3, #1
 8000760:	2300      	movne	r3, #0
 8000762:	b2db      	uxtb	r3, r3
 8000764:	461a      	mov	r2, r3
 8000766:	f7ff ff2f 	bl	80005c8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	3301      	adds	r3, #1
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	4293      	cmp	r3, r2
 800077a:	d3c8      	bcc.n	800070e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	3301      	adds	r3, #1
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	785b      	ldrb	r3, [r3, #1]
 8000786:	461a      	mov	r2, r3
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	4293      	cmp	r3, r2
 800078c:	d3ad      	bcc.n	80006ea <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <SSD1306_Putc+0xfc>)
 8000790:	881a      	ldrh	r2, [r3, #0]
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b29b      	uxth	r3, r3
 8000798:	4413      	add	r3, r2
 800079a:	b29a      	uxth	r2, r3
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <SSD1306_Putc+0xfc>)
 800079e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80007a0:	79fb      	ldrb	r3, [r7, #7]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200004c8 	.word	0x200004c8

080007b0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	4613      	mov	r3, r2
 80007bc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80007be:	e012      	b.n	80007e6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	79fa      	ldrb	r2, [r7, #7]
 80007c6:	68b9      	ldr	r1, [r7, #8]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff71 	bl	80006b0 <SSD1306_Putc>
 80007ce:	4603      	mov	r3, r0
 80007d0:	461a      	mov	r2, r3
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d002      	beq.n	80007e0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	e008      	b.n	80007f2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3301      	adds	r3, #1
 80007e4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1e8      	bne.n	80007c0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	781b      	ldrb	r3, [r3, #0]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <ssd1306_I2C_Init+0x24>)
 8000804:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000806:	e002      	b.n	800080e <ssd1306_I2C_Init+0x12>
		p--;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1f9      	bne.n	8000808 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	0003d090 	.word	0x0003d090

08000824 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b0c7      	sub	sp, #284	; 0x11c
 8000828:	af02      	add	r7, sp, #8
 800082a:	4604      	mov	r4, r0
 800082c:	4608      	mov	r0, r1
 800082e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000832:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000836:	600a      	str	r2, [r1, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800083e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000842:	4622      	mov	r2, r4
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800084a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800084e:	4602      	mov	r2, r0
 8000850:	701a      	strb	r2, [r3, #0]
 8000852:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000856:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800085a:	460a      	mov	r2, r1
 800085c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800085e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000862:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000866:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800086a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800086e:	7812      	ldrb	r2, [r2, #0]
 8000870:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000872:	2300      	movs	r3, #0
 8000874:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000878:	e015      	b.n	80008a6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800087a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800087e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000882:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000886:	6812      	ldr	r2, [r2, #0]
 8000888:	441a      	add	r2, r3
 800088a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800088e:	3301      	adds	r3, #1
 8000890:	7811      	ldrb	r1, [r2, #0]
 8000892:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000896:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800089a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800089c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008a0:	3301      	adds	r3, #1
 80008a2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80008a6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80008b0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80008b4:	8812      	ldrh	r2, [r2, #0]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d8df      	bhi.n	800087a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80008ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008be:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b299      	uxth	r1, r3
 80008c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	3301      	adds	r3, #1
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	f107 020c 	add.w	r2, r7, #12
 80008d8:	200a      	movs	r0, #10
 80008da:	9000      	str	r0, [sp, #0]
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <ssd1306_I2C_WriteMulti+0xc8>)
 80008de:	f000 fd4b 	bl	8001378 <HAL_I2C_Master_Transmit>
}
 80008e2:	bf00      	nop
 80008e4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd90      	pop	{r4, r7, pc}
 80008ec:	20000030 	.word	0x20000030

080008f0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af02      	add	r7, sp, #8
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	460b      	mov	r3, r1
 80008fc:	71bb      	strb	r3, [r7, #6]
 80008fe:	4613      	mov	r3, r2
 8000900:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000906:	797b      	ldrb	r3, [r7, #5]
 8000908:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	b299      	uxth	r1, r3
 800090e:	f107 020c 	add.w	r2, r7, #12
 8000912:	230a      	movs	r3, #10
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2302      	movs	r3, #2
 8000918:	4803      	ldr	r0, [pc, #12]	; (8000928 <ssd1306_I2C_Write+0x38>)
 800091a:	f000 fd2d 	bl	8001378 <HAL_I2C_Master_Transmit>
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000030 	.word	0x20000030

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_MspInit+0x40>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	4a0d      	ldr	r2, [pc, #52]	; (800096c <HAL_MspInit+0x40>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6193      	str	r3, [r2, #24]
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_MspInit+0x40>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_MspInit+0x40>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	4a07      	ldr	r2, [pc, #28]	; (800096c <HAL_MspInit+0x40>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	61d3      	str	r3, [r2, #28]
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <HAL_MspInit+0x40>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <HAL_I2C_MspInit+0x70>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d123      	bne.n	80009d8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <HAL_I2C_MspInit+0x74>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <HAL_I2C_MspInit+0x74>)
 8000996:	f043 0308 	orr.w	r3, r3, #8
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <HAL_I2C_MspInit+0x74>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0308 	and.w	r3, r3, #8
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009a8:	23c0      	movs	r3, #192	; 0xc0
 80009aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ac:	2312      	movs	r3, #18
 80009ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	4619      	mov	r1, r3
 80009ba:	480b      	ldr	r0, [pc, #44]	; (80009e8 <HAL_I2C_MspInit+0x78>)
 80009bc:	f000 f9fc 	bl	8000db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <HAL_I2C_MspInit+0x74>)
 80009c2:	69db      	ldr	r3, [r3, #28]
 80009c4:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <HAL_I2C_MspInit+0x74>)
 80009c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ca:	61d3      	str	r3, [r2, #28]
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_I2C_MspInit+0x74>)
 80009ce:	69db      	ldr	r3, [r3, #28]
 80009d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009d8:	bf00      	nop
 80009da:	3720      	adds	r7, #32
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40005400 	.word	0x40005400
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40010c00 	.word	0x40010c00

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <HAL_UART_MspInit+0x8c>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d131      	bne.n	8000a70 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <HAL_UART_MspInit+0x90>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a1a      	ldr	r2, [pc, #104]	; (8000a7c <HAL_UART_MspInit+0x90>)
 8000a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <HAL_UART_MspInit+0x90>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_UART_MspInit+0x90>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <HAL_UART_MspInit+0x90>)
 8000a2a:	f043 0304 	orr.w	r3, r3, #4
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_UART_MspInit+0x90>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480b      	ldr	r0, [pc, #44]	; (8000a80 <HAL_UART_MspInit+0x94>)
 8000a52:	f000 f9b1 	bl	8000db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <HAL_UART_MspInit+0x94>)
 8000a6c:	f000 f9a4 	bl	8000db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40013800 	.word	0x40013800
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010800 	.word	0x40010800

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler+0x4>

08000a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aca:	f000 f875 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
	...

08000ae0 <Reset_Handler>:
 8000ae0:	480c      	ldr	r0, [pc, #48]	; (8000b14 <LoopFillZerobss+0x12>)
 8000ae2:	490d      	ldr	r1, [pc, #52]	; (8000b18 <LoopFillZerobss+0x16>)
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <LoopFillZerobss+0x1a>)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:
 8000aea:	58d4      	ldr	r4, [r2, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:
 8000af0:	18c4      	adds	r4, r0, r3
 8000af2:	428c      	cmp	r4, r1
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <LoopFillZerobss+0x1e>)
 8000af8:	4c0a      	ldr	r4, [pc, #40]	; (8000b24 <LoopFillZerobss+0x22>)
 8000afa:	2300      	movs	r3, #0
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:
 8000b02:	42a2      	cmp	r2, r4
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>
 8000b06:	f7ff ffe4 	bl	8000ad2 <SystemInit>
 8000b0a:	f001 fd5f 	bl	80025cc <__libc_init_array>
 8000b0e:	f7ff fb1d 	bl	800014c <main>
 8000b12:	4770      	bx	lr
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000014 	.word	0x20000014
 8000b1c:	080033dc 	.word	0x080033dc
 8000b20:	20000014 	.word	0x20000014
 8000b24:	200004d4 	.word	0x200004d4

08000b28 <ADC1_2_IRQHandler>:
 8000b28:	e7fe      	b.n	8000b28 <ADC1_2_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_Init+0x28>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <HAL_Init+0x28>)
 8000b36:	f043 0310 	orr.w	r3, r3, #16
 8000b3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 f907 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b42:	200f      	movs	r0, #15
 8000b44:	f000 f808 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b48:	f7ff fef0 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40022000 	.word	0x40022000

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0x54>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_InitTick+0x58>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f911 	bl	8000d9e <HAL_SYSTICK_Config>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00e      	b.n	8000ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d80a      	bhi.n	8000ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b94:	f000 f8e7 	bl	8000d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <HAL_InitTick+0x5c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000010 	.word	0x20000010
 8000bb4:	2000000c 	.word	0x2000000c

08000bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x1c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a03      	ldr	r2, [pc, #12]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	20000010 	.word	0x20000010
 8000bd8:	200004d0 	.word	0x200004d0

08000bdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b02      	ldr	r3, [pc, #8]	; (8000bec <HAL_GetTick+0x10>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	200004d0 	.word	0x200004d0

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d30:	f7ff ff90 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff49 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff5e 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff90 	bl	8000ca8 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5f 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffb0 	bl	8000d0c <SysTick_Config>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b08b      	sub	sp, #44	; 0x2c
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dca:	e169      	b.n	80010a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	f040 8158 	bne.w	800109a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	4a9a      	ldr	r2, [pc, #616]	; (8001058 <HAL_GPIO_Init+0x2a0>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d05e      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
 8000df4:	4a98      	ldr	r2, [pc, #608]	; (8001058 <HAL_GPIO_Init+0x2a0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d875      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000dfa:	4a98      	ldr	r2, [pc, #608]	; (800105c <HAL_GPIO_Init+0x2a4>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d058      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
 8000e00:	4a96      	ldr	r2, [pc, #600]	; (800105c <HAL_GPIO_Init+0x2a4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d86f      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000e06:	4a96      	ldr	r2, [pc, #600]	; (8001060 <HAL_GPIO_Init+0x2a8>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d052      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
 8000e0c:	4a94      	ldr	r2, [pc, #592]	; (8001060 <HAL_GPIO_Init+0x2a8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d869      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000e12:	4a94      	ldr	r2, [pc, #592]	; (8001064 <HAL_GPIO_Init+0x2ac>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d04c      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
 8000e18:	4a92      	ldr	r2, [pc, #584]	; (8001064 <HAL_GPIO_Init+0x2ac>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d863      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000e1e:	4a92      	ldr	r2, [pc, #584]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d046      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
 8000e24:	4a90      	ldr	r2, [pc, #576]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d85d      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000e2a:	2b12      	cmp	r3, #18
 8000e2c:	d82a      	bhi.n	8000e84 <HAL_GPIO_Init+0xcc>
 8000e2e:	2b12      	cmp	r3, #18
 8000e30:	d859      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000e32:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <HAL_GPIO_Init+0x80>)
 8000e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e38:	08000eb3 	.word	0x08000eb3
 8000e3c:	08000e8d 	.word	0x08000e8d
 8000e40:	08000e9f 	.word	0x08000e9f
 8000e44:	08000ee1 	.word	0x08000ee1
 8000e48:	08000ee7 	.word	0x08000ee7
 8000e4c:	08000ee7 	.word	0x08000ee7
 8000e50:	08000ee7 	.word	0x08000ee7
 8000e54:	08000ee7 	.word	0x08000ee7
 8000e58:	08000ee7 	.word	0x08000ee7
 8000e5c:	08000ee7 	.word	0x08000ee7
 8000e60:	08000ee7 	.word	0x08000ee7
 8000e64:	08000ee7 	.word	0x08000ee7
 8000e68:	08000ee7 	.word	0x08000ee7
 8000e6c:	08000ee7 	.word	0x08000ee7
 8000e70:	08000ee7 	.word	0x08000ee7
 8000e74:	08000ee7 	.word	0x08000ee7
 8000e78:	08000ee7 	.word	0x08000ee7
 8000e7c:	08000e95 	.word	0x08000e95
 8000e80:	08000ea9 	.word	0x08000ea9
 8000e84:	4a79      	ldr	r2, [pc, #484]	; (800106c <HAL_GPIO_Init+0x2b4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d013      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e8a:	e02c      	b.n	8000ee6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	623b      	str	r3, [r7, #32]
          break;
 8000e92:	e029      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	623b      	str	r3, [r7, #32]
          break;
 8000e9c:	e024      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	3308      	adds	r3, #8
 8000ea4:	623b      	str	r3, [r7, #32]
          break;
 8000ea6:	e01f      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	330c      	adds	r3, #12
 8000eae:	623b      	str	r3, [r7, #32]
          break;
 8000eb0:	e01a      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d102      	bne.n	8000ec0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	623b      	str	r3, [r7, #32]
          break;
 8000ebe:	e013      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d105      	bne.n	8000ed4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	611a      	str	r2, [r3, #16]
          break;
 8000ed2:	e009      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69fa      	ldr	r2, [r7, #28]
 8000edc:	615a      	str	r2, [r3, #20]
          break;
 8000ede:	e003      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
          break;
 8000ee4:	e000      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          break;
 8000ee6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	2bff      	cmp	r3, #255	; 0xff
 8000eec:	d801      	bhi.n	8000ef2 <HAL_GPIO_Init+0x13a>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	e001      	b.n	8000ef6 <HAL_GPIO_Init+0x13e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	2bff      	cmp	r3, #255	; 0xff
 8000efc:	d802      	bhi.n	8000f04 <HAL_GPIO_Init+0x14c>
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	e002      	b.n	8000f0a <HAL_GPIO_Init+0x152>
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	3b08      	subs	r3, #8
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	210f      	movs	r1, #15
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	6a39      	ldr	r1, [r7, #32]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	431a      	orrs	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 80b1 	beq.w	800109a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f38:	4b4d      	ldr	r3, [pc, #308]	; (8001070 <HAL_GPIO_Init+0x2b8>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a4c      	ldr	r2, [pc, #304]	; (8001070 <HAL_GPIO_Init+0x2b8>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b4a      	ldr	r3, [pc, #296]	; (8001070 <HAL_GPIO_Init+0x2b8>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f50:	4a48      	ldr	r2, [pc, #288]	; (8001074 <HAL_GPIO_Init+0x2bc>)
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	4013      	ands	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a40      	ldr	r2, [pc, #256]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d013      	beq.n	8000fa4 <HAL_GPIO_Init+0x1ec>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a3f      	ldr	r2, [pc, #252]	; (800107c <HAL_GPIO_Init+0x2c4>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d00d      	beq.n	8000fa0 <HAL_GPIO_Init+0x1e8>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a3e      	ldr	r2, [pc, #248]	; (8001080 <HAL_GPIO_Init+0x2c8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d007      	beq.n	8000f9c <HAL_GPIO_Init+0x1e4>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a3d      	ldr	r2, [pc, #244]	; (8001084 <HAL_GPIO_Init+0x2cc>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d101      	bne.n	8000f98 <HAL_GPIO_Init+0x1e0>
 8000f94:	2303      	movs	r3, #3
 8000f96:	e006      	b.n	8000fa6 <HAL_GPIO_Init+0x1ee>
 8000f98:	2304      	movs	r3, #4
 8000f9a:	e004      	b.n	8000fa6 <HAL_GPIO_Init+0x1ee>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	e002      	b.n	8000fa6 <HAL_GPIO_Init+0x1ee>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <HAL_GPIO_Init+0x1ee>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa8:	f002 0203 	and.w	r2, r2, #3
 8000fac:	0092      	lsls	r2, r2, #2
 8000fae:	4093      	lsls	r3, r2
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fb6:	492f      	ldr	r1, [pc, #188]	; (8001074 <HAL_GPIO_Init+0x2bc>)
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d006      	beq.n	8000fde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	492c      	ldr	r1, [pc, #176]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	600b      	str	r3, [r1, #0]
 8000fdc:	e006      	b.n	8000fec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	4928      	ldr	r1, [pc, #160]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d006      	beq.n	8001006 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	4922      	ldr	r1, [pc, #136]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	604b      	str	r3, [r1, #4]
 8001004:	e006      	b.n	8001014 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001006:	4b20      	ldr	r3, [pc, #128]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	43db      	mvns	r3, r3
 800100e:	491e      	ldr	r1, [pc, #120]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8001010:	4013      	ands	r3, r2
 8001012:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d006      	beq.n	800102e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	4918      	ldr	r1, [pc, #96]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	608b      	str	r3, [r1, #8]
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	43db      	mvns	r3, r3
 8001036:	4914      	ldr	r1, [pc, #80]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8001038:	4013      	ands	r3, r2
 800103a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d021      	beq.n	800108c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	490e      	ldr	r1, [pc, #56]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	60cb      	str	r3, [r1, #12]
 8001054:	e021      	b.n	800109a <HAL_GPIO_Init+0x2e2>
 8001056:	bf00      	nop
 8001058:	10320000 	.word	0x10320000
 800105c:	10310000 	.word	0x10310000
 8001060:	10220000 	.word	0x10220000
 8001064:	10210000 	.word	0x10210000
 8001068:	10120000 	.word	0x10120000
 800106c:	10110000 	.word	0x10110000
 8001070:	40021000 	.word	0x40021000
 8001074:	40010000 	.word	0x40010000
 8001078:	40010800 	.word	0x40010800
 800107c:	40010c00 	.word	0x40010c00
 8001080:	40011000 	.word	0x40011000
 8001084:	40011400 	.word	0x40011400
 8001088:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_GPIO_Init+0x304>)
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	43db      	mvns	r3, r3
 8001094:	4909      	ldr	r1, [pc, #36]	; (80010bc <HAL_GPIO_Init+0x304>)
 8001096:	4013      	ands	r3, r2
 8001098:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	3301      	adds	r3, #1
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	fa22 f303 	lsr.w	r3, r2, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f47f ae8e 	bne.w	8000dcc <HAL_GPIO_Init+0x14>
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	372c      	adds	r7, #44	; 0x2c
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	40010400 	.word	0x40010400

080010c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
 80010cc:	4613      	mov	r3, r2
 80010ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010d0:	787b      	ldrb	r3, [r7, #1]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010dc:	e003      	b.n	80010e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010de:	887b      	ldrh	r3, [r7, #2]
 80010e0:	041a      	lsls	r2, r3, #16
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	611a      	str	r2, [r3, #16]
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e12b      	b.n	800135a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d106      	bne.n	800111c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fc2a 	bl	8000970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2224      	movs	r2, #36	; 0x24
 8001120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0201 	bic.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001142:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001152:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001154:	f001 f918 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8001158:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	4a81      	ldr	r2, [pc, #516]	; (8001364 <HAL_I2C_Init+0x274>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d807      	bhi.n	8001174 <HAL_I2C_Init+0x84>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4a80      	ldr	r2, [pc, #512]	; (8001368 <HAL_I2C_Init+0x278>)
 8001168:	4293      	cmp	r3, r2
 800116a:	bf94      	ite	ls
 800116c:	2301      	movls	r3, #1
 800116e:	2300      	movhi	r3, #0
 8001170:	b2db      	uxtb	r3, r3
 8001172:	e006      	b.n	8001182 <HAL_I2C_Init+0x92>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4a7d      	ldr	r2, [pc, #500]	; (800136c <HAL_I2C_Init+0x27c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	bf94      	ite	ls
 800117c:	2301      	movls	r3, #1
 800117e:	2300      	movhi	r3, #0
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e0e7      	b.n	800135a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4a78      	ldr	r2, [pc, #480]	; (8001370 <HAL_I2C_Init+0x280>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	0c9b      	lsrs	r3, r3, #18
 8001194:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4a6a      	ldr	r2, [pc, #424]	; (8001364 <HAL_I2C_Init+0x274>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d802      	bhi.n	80011c4 <HAL_I2C_Init+0xd4>
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	3301      	adds	r3, #1
 80011c2:	e009      	b.n	80011d8 <HAL_I2C_Init+0xe8>
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
 80011ce:	4a69      	ldr	r2, [pc, #420]	; (8001374 <HAL_I2C_Init+0x284>)
 80011d0:	fba2 2303 	umull	r2, r3, r2, r3
 80011d4:	099b      	lsrs	r3, r3, #6
 80011d6:	3301      	adds	r3, #1
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	430b      	orrs	r3, r1
 80011de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	495c      	ldr	r1, [pc, #368]	; (8001364 <HAL_I2C_Init+0x274>)
 80011f4:	428b      	cmp	r3, r1
 80011f6:	d819      	bhi.n	800122c <HAL_I2C_Init+0x13c>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	1e59      	subs	r1, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fbb1 f3f3 	udiv	r3, r1, r3
 8001206:	1c59      	adds	r1, r3, #1
 8001208:	f640 73fc 	movw	r3, #4092	; 0xffc
 800120c:	400b      	ands	r3, r1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00a      	beq.n	8001228 <HAL_I2C_Init+0x138>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1e59      	subs	r1, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001220:	3301      	adds	r3, #1
 8001222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001226:	e051      	b.n	80012cc <HAL_I2C_Init+0x1dc>
 8001228:	2304      	movs	r3, #4
 800122a:	e04f      	b.n	80012cc <HAL_I2C_Init+0x1dc>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d111      	bne.n	8001258 <HAL_I2C_Init+0x168>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	1e58      	subs	r0, r3, #1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6859      	ldr	r1, [r3, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	440b      	add	r3, r1
 8001242:	fbb0 f3f3 	udiv	r3, r0, r3
 8001246:	3301      	adds	r3, #1
 8001248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124c:	2b00      	cmp	r3, #0
 800124e:	bf0c      	ite	eq
 8001250:	2301      	moveq	r3, #1
 8001252:	2300      	movne	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	e012      	b.n	800127e <HAL_I2C_Init+0x18e>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	1e58      	subs	r0, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6859      	ldr	r1, [r3, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	0099      	lsls	r1, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	fbb0 f3f3 	udiv	r3, r0, r3
 800126e:	3301      	adds	r3, #1
 8001270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf0c      	ite	eq
 8001278:	2301      	moveq	r3, #1
 800127a:	2300      	movne	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_I2C_Init+0x196>
 8001282:	2301      	movs	r3, #1
 8001284:	e022      	b.n	80012cc <HAL_I2C_Init+0x1dc>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10e      	bne.n	80012ac <HAL_I2C_Init+0x1bc>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1e58      	subs	r0, r3, #1
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6859      	ldr	r1, [r3, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	440b      	add	r3, r1
 800129c:	fbb0 f3f3 	udiv	r3, r0, r3
 80012a0:	3301      	adds	r3, #1
 80012a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012aa:	e00f      	b.n	80012cc <HAL_I2C_Init+0x1dc>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	1e58      	subs	r0, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6859      	ldr	r1, [r3, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	0099      	lsls	r1, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	6809      	ldr	r1, [r1, #0]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69da      	ldr	r2, [r3, #28]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	431a      	orrs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6911      	ldr	r1, [r2, #16]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68d2      	ldr	r2, [r2, #12]
 8001306:	4311      	orrs	r1, r2
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	430b      	orrs	r3, r1
 800130e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695a      	ldr	r2, [r3, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0201 	orr.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2220      	movs	r2, #32
 8001346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	000186a0 	.word	0x000186a0
 8001368:	001e847f 	.word	0x001e847f
 800136c:	003d08ff 	.word	0x003d08ff
 8001370:	431bde83 	.word	0x431bde83
 8001374:	10624dd3 	.word	0x10624dd3

08001378 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af02      	add	r7, sp, #8
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	461a      	mov	r2, r3
 8001384:	460b      	mov	r3, r1
 8001386:	817b      	strh	r3, [r7, #10]
 8001388:	4613      	mov	r3, r2
 800138a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff fc26 	bl	8000bdc <HAL_GetTick>
 8001390:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b20      	cmp	r3, #32
 800139c:	f040 80e0 	bne.w	8001560 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2319      	movs	r3, #25
 80013a6:	2201      	movs	r2, #1
 80013a8:	4970      	ldr	r1, [pc, #448]	; (800156c <HAL_I2C_Master_Transmit+0x1f4>)
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 fa92 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80013b6:	2302      	movs	r3, #2
 80013b8:	e0d3      	b.n	8001562 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d101      	bne.n	80013c8 <HAL_I2C_Master_Transmit+0x50>
 80013c4:	2302      	movs	r3, #2
 80013c6:	e0cc      	b.n	8001562 <HAL_I2C_Master_Transmit+0x1ea>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d007      	beq.n	80013ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 0201 	orr.w	r2, r2, #1
 80013ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2221      	movs	r2, #33	; 0x21
 8001402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2210      	movs	r2, #16
 800140a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	893a      	ldrh	r2, [r7, #8]
 800141e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001424:	b29a      	uxth	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4a50      	ldr	r2, [pc, #320]	; (8001570 <HAL_I2C_Master_Transmit+0x1f8>)
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001430:	8979      	ldrh	r1, [r7, #10]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	6a3a      	ldr	r2, [r7, #32]
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 f9ca 	bl	80017d0 <I2C_MasterRequestWrite>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e08d      	b.n	8001562 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800145c:	e066      	b.n	800152c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	6a39      	ldr	r1, [r7, #32]
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f000 fb0c 	bl	8001a80 <I2C_WaitOnTXEFlagUntilTimeout>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00d      	beq.n	800148a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	2b04      	cmp	r3, #4
 8001474:	d107      	bne.n	8001486 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001484:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e06b      	b.n	8001562 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	781a      	ldrb	r2, [r3, #0]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	3b01      	subs	r3, #1
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b2:	3b01      	subs	r3, #1
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d11b      	bne.n	8001500 <HAL_I2C_Master_Transmit+0x188>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d017      	beq.n	8001500 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	3b01      	subs	r3, #1
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f8:	3b01      	subs	r3, #1
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	6a39      	ldr	r1, [r7, #32]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 fafc 	bl	8001b02 <I2C_WaitOnBTFFlagUntilTimeout>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00d      	beq.n	800152c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	2b04      	cmp	r3, #4
 8001516:	d107      	bne.n	8001528 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001526:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e01a      	b.n	8001562 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001530:	2b00      	cmp	r3, #0
 8001532:	d194      	bne.n	800145e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2220      	movs	r2, #32
 8001548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	e000      	b.n	8001562 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001560:	2302      	movs	r3, #2
  }
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	00100002 	.word	0x00100002
 8001570:	ffff0000 	.word	0xffff0000

08001574 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af02      	add	r7, sp, #8
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	460b      	mov	r3, r1
 8001582:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff fb2a 	bl	8000bdc <HAL_GetTick>
 8001588:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800158a:	2301      	movs	r3, #1
 800158c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b20      	cmp	r3, #32
 8001598:	f040 8111 	bne.w	80017be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2319      	movs	r3, #25
 80015a2:	2201      	movs	r2, #1
 80015a4:	4988      	ldr	r1, [pc, #544]	; (80017c8 <HAL_I2C_IsDeviceReady+0x254>)
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f000 f994 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80015b2:	2302      	movs	r3, #2
 80015b4:	e104      	b.n	80017c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_I2C_IsDeviceReady+0x50>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e0fd      	b.n	80017c0 <HAL_I2C_IsDeviceReady+0x24c>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d007      	beq.n	80015ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 0201 	orr.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2224      	movs	r2, #36	; 0x24
 80015fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4a70      	ldr	r2, [pc, #448]	; (80017cc <HAL_I2C_IsDeviceReady+0x258>)
 800160c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800161c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	2200      	movs	r2, #0
 8001626:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 f952 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00d      	beq.n	8001652 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001644:	d103      	bne.n	800164e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e0b6      	b.n	80017c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001652:	897b      	ldrh	r3, [r7, #10]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001660:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff fabb 	bl	8000bdc <HAL_GetTick>
 8001666:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b02      	cmp	r3, #2
 8001674:	bf0c      	ite	eq
 8001676:	2301      	moveq	r3, #1
 8001678:	2300      	movne	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800168c:	bf0c      	ite	eq
 800168e:	2301      	moveq	r3, #1
 8001690:	2300      	movne	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001696:	e025      	b.n	80016e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001698:	f7ff faa0 	bl	8000bdc <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d302      	bcc.n	80016ae <HAL_I2C_IsDeviceReady+0x13a>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d103      	bne.n	80016b6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	22a0      	movs	r2, #160	; 0xa0
 80016b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	bf0c      	ite	eq
 80016c4:	2301      	moveq	r3, #1
 80016c6:	2300      	movne	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016da:	bf0c      	ite	eq
 80016dc:	2301      	moveq	r3, #1
 80016de:	2300      	movne	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2ba0      	cmp	r3, #160	; 0xa0
 80016ee:	d005      	beq.n	80016fc <HAL_I2C_IsDeviceReady+0x188>
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d102      	bne.n	80016fc <HAL_I2C_IsDeviceReady+0x188>
 80016f6:	7dbb      	ldrb	r3, [r7, #22]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0cd      	beq.n	8001698 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2220      	movs	r2, #32
 8001700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b02      	cmp	r3, #2
 8001710:	d129      	bne.n	8001766 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001720:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2319      	movs	r3, #25
 800173e:	2201      	movs	r2, #1
 8001740:	4921      	ldr	r1, [pc, #132]	; (80017c8 <HAL_I2C_IsDeviceReady+0x254>)
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f8c6 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e036      	b.n	80017c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2220      	movs	r2, #32
 8001756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e02c      	b.n	80017c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001774:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800177e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2319      	movs	r3, #25
 8001786:	2201      	movs	r2, #1
 8001788:	490f      	ldr	r1, [pc, #60]	; (80017c8 <HAL_I2C_IsDeviceReady+0x254>)
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 f8a2 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e012      	b.n	80017c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	3301      	adds	r3, #1
 800179e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	f4ff af32 	bcc.w	800160e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2220      	movs	r2, #32
 80017ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80017be:	2302      	movs	r3, #2
  }
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	00100002 	.word	0x00100002
 80017cc:	ffff0000 	.word	0xffff0000

080017d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	460b      	mov	r3, r1
 80017de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d006      	beq.n	80017fa <I2C_MasterRequestWrite+0x2a>
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d003      	beq.n	80017fa <I2C_MasterRequestWrite+0x2a>
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80017f8:	d108      	bne.n	800180c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	e00b      	b.n	8001824 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	2b12      	cmp	r3, #18
 8001812:	d107      	bne.n	8001824 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001822:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f000 f84f 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00d      	beq.n	8001858 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800184a:	d103      	bne.n	8001854 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e035      	b.n	80018c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001860:	d108      	bne.n	8001874 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001862:	897b      	ldrh	r3, [r7, #10]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001870:	611a      	str	r2, [r3, #16]
 8001872:	e01b      	b.n	80018ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001874:	897b      	ldrh	r3, [r7, #10]
 8001876:	11db      	asrs	r3, r3, #7
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f003 0306 	and.w	r3, r3, #6
 800187e:	b2db      	uxtb	r3, r3
 8001880:	f063 030f 	orn	r3, r3, #15
 8001884:	b2da      	uxtb	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	490e      	ldr	r1, [pc, #56]	; (80018cc <I2C_MasterRequestWrite+0xfc>)
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f875 	bl	8001982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e010      	b.n	80018c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018a2:	897b      	ldrh	r3, [r7, #10]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	4907      	ldr	r1, [pc, #28]	; (80018d0 <I2C_MasterRequestWrite+0x100>)
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 f865 	bl	8001982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	00010008 	.word	0x00010008
 80018d0:	00010002 	.word	0x00010002

080018d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018e4:	e025      	b.n	8001932 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018ec:	d021      	beq.n	8001932 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ee:	f7ff f975 	bl	8000bdc <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d302      	bcc.n	8001904 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d116      	bne.n	8001932 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2220      	movs	r2, #32
 800190e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f043 0220 	orr.w	r2, r3, #32
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e023      	b.n	800197a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b01      	cmp	r3, #1
 800193a:	d10d      	bne.n	8001958 <I2C_WaitOnFlagUntilTimeout+0x84>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	43da      	mvns	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4013      	ands	r3, r2
 8001948:	b29b      	uxth	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	bf0c      	ite	eq
 800194e:	2301      	moveq	r3, #1
 8001950:	2300      	movne	r3, #0
 8001952:	b2db      	uxtb	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	e00c      	b.n	8001972 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	43da      	mvns	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4013      	ands	r3, r2
 8001964:	b29b      	uxth	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	bf0c      	ite	eq
 800196a:	2301      	moveq	r3, #1
 800196c:	2300      	movne	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	429a      	cmp	r2, r3
 8001976:	d0b6      	beq.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001990:	e051      	b.n	8001a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a0:	d123      	bne.n	80019ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2220      	movs	r2, #32
 80019c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f043 0204 	orr.w	r2, r3, #4
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e046      	b.n	8001a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019f0:	d021      	beq.n	8001a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f2:	f7ff f8f3 	bl	8000bdc <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d302      	bcc.n	8001a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d116      	bne.n	8001a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2220      	movs	r2, #32
 8001a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f043 0220 	orr.w	r2, r3, #32
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e020      	b.n	8001a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	0c1b      	lsrs	r3, r3, #16
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d10c      	bne.n	8001a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	43da      	mvns	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bf14      	ite	ne
 8001a52:	2301      	movne	r3, #1
 8001a54:	2300      	moveq	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	e00b      	b.n	8001a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	43da      	mvns	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	4013      	ands	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf14      	ite	ne
 8001a6c:	2301      	movne	r3, #1
 8001a6e:	2300      	moveq	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d18d      	bne.n	8001992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a8c:	e02d      	b.n	8001aea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f878 	bl	8001b84 <I2C_IsAcknowledgeFailed>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e02d      	b.n	8001afa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001aa4:	d021      	beq.n	8001aea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa6:	f7ff f899 	bl	8000bdc <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d302      	bcc.n	8001abc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d116      	bne.n	8001aea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f043 0220 	orr.w	r2, r3, #32
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e007      	b.n	8001afa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af4:	2b80      	cmp	r3, #128	; 0x80
 8001af6:	d1ca      	bne.n	8001a8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b0e:	e02d      	b.n	8001b6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 f837 	bl	8001b84 <I2C_IsAcknowledgeFailed>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e02d      	b.n	8001b7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b26:	d021      	beq.n	8001b6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b28:	f7ff f858 	bl	8000bdc <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d302      	bcc.n	8001b3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d116      	bne.n	8001b6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2220      	movs	r2, #32
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f043 0220 	orr.w	r2, r3, #32
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e007      	b.n	8001b7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d1ca      	bne.n	8001b10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b9a:	d11b      	bne.n	8001bd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ba4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	f043 0204 	orr.w	r2, r3, #4
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e272      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 8087 	beq.w	8001d0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c00:	4b92      	ldr	r3, [pc, #584]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d00c      	beq.n	8001c26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c0c:	4b8f      	ldr	r3, [pc, #572]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d112      	bne.n	8001c3e <HAL_RCC_OscConfig+0x5e>
 8001c18:	4b8c      	ldr	r3, [pc, #560]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c24:	d10b      	bne.n	8001c3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c26:	4b89      	ldr	r3, [pc, #548]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d06c      	beq.n	8001d0c <HAL_RCC_OscConfig+0x12c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d168      	bne.n	8001d0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e24c      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x76>
 8001c48:	4b80      	ldr	r3, [pc, #512]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a7f      	ldr	r2, [pc, #508]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	e02e      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd4>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x98>
 8001c5e:	4b7b      	ldr	r3, [pc, #492]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a7a      	ldr	r2, [pc, #488]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b78      	ldr	r3, [pc, #480]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a77      	ldr	r2, [pc, #476]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e01d      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd4>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0xbc>
 8001c82:	4b72      	ldr	r3, [pc, #456]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a71      	ldr	r2, [pc, #452]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b6f      	ldr	r3, [pc, #444]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a6e      	ldr	r2, [pc, #440]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd4>
 8001c9c:	4b6b      	ldr	r3, [pc, #428]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a6a      	ldr	r2, [pc, #424]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b68      	ldr	r3, [pc, #416]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a67      	ldr	r2, [pc, #412]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7fe ff8e 	bl	8000bdc <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7fe ff8a 	bl	8000bdc <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e200      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xe4>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7fe ff7a 	bl	8000bdc <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7fe ff76 	bl	8000bdc <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1ec      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x10c>
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d063      	beq.n	8001de2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d1a:	4b4c      	ldr	r3, [pc, #304]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d26:	4b49      	ldr	r3, [pc, #292]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d11c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x18c>
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d116      	bne.n	8001d6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	4b43      	ldr	r3, [pc, #268]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_RCC_OscConfig+0x176>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e1c0      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4939      	ldr	r1, [pc, #228]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	e03a      	b.n	8001de2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d74:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7fe ff2f 	bl	8000bdc <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d82:	f7fe ff2b 	bl	8000bdc <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e1a1      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4927      	ldr	r1, [pc, #156]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
 8001db4:	e015      	b.n	8001de2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db6:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7fe ff0e 	bl	8000bdc <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc4:	f7fe ff0a 	bl	8000bdc <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e180      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d03a      	beq.n	8001e64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d019      	beq.n	8001e2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df6:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_RCC_OscConfig+0x274>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfc:	f7fe feee 	bl	8000bdc <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e04:	f7fe feea 	bl	8000bdc <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e160      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e22:	2001      	movs	r0, #1
 8001e24:	f000 fad8 	bl	80023d8 <RCC_Delay>
 8001e28:	e01c      	b.n	8001e64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e30:	f7fe fed4 	bl	8000bdc <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e36:	e00f      	b.n	8001e58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e38:	f7fe fed0 	bl	8000bdc <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d908      	bls.n	8001e58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e146      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	42420000 	.word	0x42420000
 8001e54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e58:	4b92      	ldr	r3, [pc, #584]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1e9      	bne.n	8001e38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80a6 	beq.w	8001fbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e76:	4b8b      	ldr	r3, [pc, #556]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10d      	bne.n	8001e9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	4b88      	ldr	r3, [pc, #544]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a87      	ldr	r2, [pc, #540]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	61d3      	str	r3, [r2, #28]
 8001e8e:	4b85      	ldr	r3, [pc, #532]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	4b82      	ldr	r3, [pc, #520]	; (80020a8 <HAL_RCC_OscConfig+0x4c8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d118      	bne.n	8001edc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eaa:	4b7f      	ldr	r3, [pc, #508]	; (80020a8 <HAL_RCC_OscConfig+0x4c8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a7e      	ldr	r2, [pc, #504]	; (80020a8 <HAL_RCC_OscConfig+0x4c8>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb6:	f7fe fe91 	bl	8000bdc <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebe:	f7fe fe8d 	bl	8000bdc <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b64      	cmp	r3, #100	; 0x64
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e103      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	4b75      	ldr	r3, [pc, #468]	; (80020a8 <HAL_RCC_OscConfig+0x4c8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x312>
 8001ee4:	4b6f      	ldr	r3, [pc, #444]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a6e      	ldr	r2, [pc, #440]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	e02d      	b.n	8001f4e <HAL_RCC_OscConfig+0x36e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x334>
 8001efa:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a69      	ldr	r2, [pc, #420]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6213      	str	r3, [r2, #32]
 8001f06:	4b67      	ldr	r3, [pc, #412]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a66      	ldr	r2, [pc, #408]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	6213      	str	r3, [r2, #32]
 8001f12:	e01c      	b.n	8001f4e <HAL_RCC_OscConfig+0x36e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	d10c      	bne.n	8001f36 <HAL_RCC_OscConfig+0x356>
 8001f1c:	4b61      	ldr	r3, [pc, #388]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	4a60      	ldr	r2, [pc, #384]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	6213      	str	r3, [r2, #32]
 8001f28:	4b5e      	ldr	r3, [pc, #376]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	4a5d      	ldr	r2, [pc, #372]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6213      	str	r3, [r2, #32]
 8001f34:	e00b      	b.n	8001f4e <HAL_RCC_OscConfig+0x36e>
 8001f36:	4b5b      	ldr	r3, [pc, #364]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a5a      	ldr	r2, [pc, #360]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6213      	str	r3, [r2, #32]
 8001f42:	4b58      	ldr	r3, [pc, #352]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4a57      	ldr	r2, [pc, #348]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d015      	beq.n	8001f82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7fe fe41 	bl	8000bdc <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7fe fe3d 	bl	8000bdc <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0b1      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f74:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ee      	beq.n	8001f5e <HAL_RCC_OscConfig+0x37e>
 8001f80:	e014      	b.n	8001fac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f82:	f7fe fe2b 	bl	8000bdc <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7fe fe27 	bl	8000bdc <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e09b      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa0:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1ee      	bne.n	8001f8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d105      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb2:	4b3c      	ldr	r3, [pc, #240]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4a3b      	ldr	r2, [pc, #236]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8087 	beq.w	80020d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc8:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d061      	beq.n	8002098 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d146      	bne.n	800206a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fdc:	4b33      	ldr	r3, [pc, #204]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7fe fdfb 	bl	8000bdc <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fea:	f7fe fdf7 	bl	8000bdc <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e06d      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffc:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f0      	bne.n	8001fea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002010:	d108      	bne.n	8002024 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002012:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	4921      	ldr	r1, [pc, #132]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a19      	ldr	r1, [r3, #32]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	430b      	orrs	r3, r1
 8002036:	491b      	ldr	r1, [pc, #108]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800203c:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7fe fdcb 	bl	8000bdc <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204a:	f7fe fdc7 	bl	8000bdc <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e03d      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x46a>
 8002068:	e035      	b.n	80020d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7fe fdb4 	bl	8000bdc <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002078:	f7fe fdb0 	bl	8000bdc <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e026      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x498>
 8002096:	e01e      	b.n	80020d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d107      	bne.n	80020b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e019      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40007000 	.word	0x40007000
 80020ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_OscConfig+0x500>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0d0      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f8:	4b6a      	ldr	r3, [pc, #424]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d910      	bls.n	8002128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b67      	ldr	r3, [pc, #412]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 0207 	bic.w	r2, r3, #7
 800210e:	4965      	ldr	r1, [pc, #404]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b63      	ldr	r3, [pc, #396]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0b8      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d020      	beq.n	8002176 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002140:	4b59      	ldr	r3, [pc, #356]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a58      	ldr	r2, [pc, #352]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800214a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002158:	4b53      	ldr	r3, [pc, #332]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4a52      	ldr	r2, [pc, #328]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002162:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002164:	4b50      	ldr	r3, [pc, #320]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	494d      	ldr	r1, [pc, #308]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d040      	beq.n	8002204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d107      	bne.n	800219a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b47      	ldr	r3, [pc, #284]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d115      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e07f      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a2:	4b41      	ldr	r3, [pc, #260]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e073      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e06b      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c2:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f023 0203 	bic.w	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4936      	ldr	r1, [pc, #216]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d4:	f7fe fd02 	bl	8000bdc <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021dc:	f7fe fcfe 	bl	8000bdc <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e053      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 020c 	and.w	r2, r3, #12
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	429a      	cmp	r2, r3
 8002202:	d1eb      	bne.n	80021dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002204:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d210      	bcs.n	8002234 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 0207 	bic.w	r2, r3, #7
 800221a:	4922      	ldr	r1, [pc, #136]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e032      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4916      	ldr	r1, [pc, #88]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	490e      	ldr	r1, [pc, #56]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002272:	f000 f821 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002276:	4602      	mov	r2, r0
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	490a      	ldr	r1, [pc, #40]	; (80022ac <HAL_RCC_ClockConfig+0x1c8>)
 8002284:	5ccb      	ldrb	r3, [r1, r3]
 8002286:	fa22 f303 	lsr.w	r3, r2, r3
 800228a:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <HAL_RCC_ClockConfig+0x1cc>)
 800228c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe fc60 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40022000 	.word	0x40022000
 80022a8:	40021000 	.word	0x40021000
 80022ac:	080033bc 	.word	0x080033bc
 80022b0:	20000008 	.word	0x20000008
 80022b4:	2000000c 	.word	0x2000000c

080022b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b490      	push	{r4, r7}
 80022ba:	b08a      	sub	sp, #40	; 0x28
 80022bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022be:	4b29      	ldr	r3, [pc, #164]	; (8002364 <HAL_RCC_GetSysClockFreq+0xac>)
 80022c0:	1d3c      	adds	r4, r7, #4
 80022c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022c8:	f240 2301 	movw	r3, #513	; 0x201
 80022cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	2300      	movs	r3, #0
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022e2:	4b21      	ldr	r3, [pc, #132]	; (8002368 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d002      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x40>
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d003      	beq.n	80022fe <HAL_RCC_GetSysClockFreq+0x46>
 80022f6:	e02b      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022f8:	4b1c      	ldr	r3, [pc, #112]	; (800236c <HAL_RCC_GetSysClockFreq+0xb4>)
 80022fa:	623b      	str	r3, [r7, #32]
      break;
 80022fc:	e02b      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	0c9b      	lsrs	r3, r3, #18
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3328      	adds	r3, #40	; 0x28
 8002308:	443b      	add	r3, r7
 800230a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800230e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d012      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_RCC_GetSysClockFreq+0xb0>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	0c5b      	lsrs	r3, r3, #17
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	3328      	adds	r3, #40	; 0x28
 8002326:	443b      	add	r3, r7
 8002328:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800232c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	4a0e      	ldr	r2, [pc, #56]	; (800236c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002332:	fb03 f202 	mul.w	r2, r3, r2
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	fbb2 f3f3 	udiv	r3, r2, r3
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
 800233e:	e004      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002344:	fb02 f303 	mul.w	r3, r2, r3
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	623b      	str	r3, [r7, #32]
      break;
 800234e:	e002      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002352:	623b      	str	r3, [r7, #32]
      break;
 8002354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002356:	6a3b      	ldr	r3, [r7, #32]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3728      	adds	r7, #40	; 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bc90      	pop	{r4, r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	08002650 	.word	0x08002650
 8002368:	40021000 	.word	0x40021000
 800236c:	007a1200 	.word	0x007a1200
 8002370:	003d0900 	.word	0x003d0900

08002374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002378:	4b02      	ldr	r3, [pc, #8]	; (8002384 <HAL_RCC_GetHCLKFreq+0x10>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	20000008 	.word	0x20000008

08002388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800238c:	f7ff fff2 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	4903      	ldr	r1, [pc, #12]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800239e:	5ccb      	ldrb	r3, [r1, r3]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40021000 	.word	0x40021000
 80023ac:	080033cc 	.word	0x080033cc

080023b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023b4:	f7ff ffde 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	0adb      	lsrs	r3, r3, #11
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	4903      	ldr	r1, [pc, #12]	; (80023d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	080033cc 	.word	0x080033cc

080023d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <RCC_Delay+0x34>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <RCC_Delay+0x38>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0a5b      	lsrs	r3, r3, #9
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023f4:	bf00      	nop
  }
  while (Delay --);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1e5a      	subs	r2, r3, #1
 80023fa:	60fa      	str	r2, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f9      	bne.n	80023f4 <RCC_Delay+0x1c>
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	20000008 	.word	0x20000008
 8002410:	10624dd3 	.word	0x10624dd3

08002414 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e03f      	b.n	80024a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe fad6 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2224      	movs	r2, #36	; 0x24
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002456:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f829 	bl	80024b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800246c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695a      	ldr	r2, [r3, #20]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800247c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800248c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80024ea:	f023 030c 	bic.w	r3, r3, #12
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	68b9      	ldr	r1, [r7, #8]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a2c      	ldr	r2, [pc, #176]	; (80025c4 <UART_SetConfig+0x114>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d103      	bne.n	8002520 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002518:	f7ff ff4a 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	e002      	b.n	8002526 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002520:	f7ff ff32 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8002524:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	009a      	lsls	r2, r3, #2
 8002530:	441a      	add	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	4a22      	ldr	r2, [pc, #136]	; (80025c8 <UART_SetConfig+0x118>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	0119      	lsls	r1, r3, #4
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	009a      	lsls	r2, r3, #2
 8002550:	441a      	add	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	fbb2 f2f3 	udiv	r2, r2, r3
 800255c:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <UART_SetConfig+0x118>)
 800255e:	fba3 0302 	umull	r0, r3, r3, r2
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	2064      	movs	r0, #100	; 0x64
 8002566:	fb00 f303 	mul.w	r3, r0, r3
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	3332      	adds	r3, #50	; 0x32
 8002570:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <UART_SetConfig+0x118>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800257c:	4419      	add	r1, r3
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	009a      	lsls	r2, r3, #2
 8002588:	441a      	add	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	fbb2 f2f3 	udiv	r2, r2, r3
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <UART_SetConfig+0x118>)
 8002596:	fba3 0302 	umull	r0, r3, r3, r2
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	2064      	movs	r0, #100	; 0x64
 800259e:	fb00 f303 	mul.w	r3, r0, r3
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	3332      	adds	r3, #50	; 0x32
 80025a8:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <UART_SetConfig+0x118>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	f003 020f 	and.w	r2, r3, #15
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	440a      	add	r2, r1
 80025ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025bc:	bf00      	nop
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40013800 	.word	0x40013800
 80025c8:	51eb851f 	.word	0x51eb851f

080025cc <__libc_init_array>:
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	2600      	movs	r6, #0
 80025d0:	4d0c      	ldr	r5, [pc, #48]	; (8002604 <__libc_init_array+0x38>)
 80025d2:	4c0d      	ldr	r4, [pc, #52]	; (8002608 <__libc_init_array+0x3c>)
 80025d4:	1b64      	subs	r4, r4, r5
 80025d6:	10a4      	asrs	r4, r4, #2
 80025d8:	42a6      	cmp	r6, r4
 80025da:	d109      	bne.n	80025f0 <__libc_init_array+0x24>
 80025dc:	f000 f822 	bl	8002624 <_init>
 80025e0:	2600      	movs	r6, #0
 80025e2:	4d0a      	ldr	r5, [pc, #40]	; (800260c <__libc_init_array+0x40>)
 80025e4:	4c0a      	ldr	r4, [pc, #40]	; (8002610 <__libc_init_array+0x44>)
 80025e6:	1b64      	subs	r4, r4, r5
 80025e8:	10a4      	asrs	r4, r4, #2
 80025ea:	42a6      	cmp	r6, r4
 80025ec:	d105      	bne.n	80025fa <__libc_init_array+0x2e>
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
 80025f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f4:	4798      	blx	r3
 80025f6:	3601      	adds	r6, #1
 80025f8:	e7ee      	b.n	80025d8 <__libc_init_array+0xc>
 80025fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80025fe:	4798      	blx	r3
 8002600:	3601      	adds	r6, #1
 8002602:	e7f2      	b.n	80025ea <__libc_init_array+0x1e>
 8002604:	080033d4 	.word	0x080033d4
 8002608:	080033d4 	.word	0x080033d4
 800260c:	080033d4 	.word	0x080033d4
 8002610:	080033d8 	.word	0x080033d8

08002614 <memset>:
 8002614:	4603      	mov	r3, r0
 8002616:	4402      	add	r2, r0
 8002618:	4293      	cmp	r3, r2
 800261a:	d100      	bne.n	800261e <memset+0xa>
 800261c:	4770      	bx	lr
 800261e:	f803 1b01 	strb.w	r1, [r3], #1
 8002622:	e7f9      	b.n	8002618 <memset+0x4>

08002624 <_init>:
 8002624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002626:	bf00      	nop
 8002628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262a:	bc08      	pop	{r3}
 800262c:	469e      	mov	lr, r3
 800262e:	4770      	bx	lr

08002630 <_fini>:
 8002630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002632:	bf00      	nop
 8002634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002636:	bc08      	pop	{r3}
 8002638:	469e      	mov	lr, r3
 800263a:	4770      	bx	lr
